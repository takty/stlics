var j=Object.defineProperty;var C=n=>{throw TypeError(n)};var L=(n,s,t)=>s in n?j(n,s,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[s]=t;var y=(n,s,t)=>L(n,typeof s!="symbol"?s+"":s,t),I=(n,s,t)=>s.has(n)||C("Cannot "+t);var e=(n,s,t)=>(I(n,s,"read from private field"),t?t.call(n):s.get(n)),r=(n,s,t)=>s.has(n)?C("Cannot add the same private member more than once"):s instanceof WeakSet?s.add(n):s.set(n,t),u=(n,s,t,i)=>(I(n,s,"write to private field"),i?i.call(n,t):s.set(n,t),t),v=(n,s,t)=>(I(n,s,"access private method"),t);import{S as O,A as P}from"./assignment-list-5MSHh1Ct.js";import"./worker-Cj0YX52P.js";var l,w,d,p,G,M,D;class J extends O{constructor(){super();r(this,p);r(this,l);r(this,w);r(this,d)}setThreshold(t){u(this,d,t)}name(){return"Fuzzy GENET"}preprocess(){if(u(this,l,[]),u(this,w,[]),u(this,d,1),!v(this,p,G).call(this))throw new Error;this.monitor.initialize()}exec(){const t=[...Array(e(this,l).length).keys()],i=this.pro.degree(),o=new P;let h=i,f=null;for(;;){const _=this.pro.degree();if(this.monitor.outputDebugString(`Evaluation: ${_}`),h<_&&(o.setProblem(this.pro),h=_,this.monitor.solutionFound(o,h)))return!0;if((f=this.monitor.check(_))!==null)break;v(this,p,M).call(this,t)}return f===!1&&!this.monitor.isTargetAssigned()&&i<h&&(o.apply(),f=!0),f}}l=new WeakMap,w=new WeakMap,d=new WeakMap,p=new WeakSet,G=function(){this.monitor.outputDebugString("Start of Network Generation");const t=[];for(const i of this.pro.variables()){if(i.domain().size()===0)return!1;e(this,l).push(new Y(i))}for(const i of this.pro.constraints())if(i.size()===1){const o=i.at(0),h=e(this,l)[o.index()];for(const f of h){const _=o.value();o.assign(f._value),i.degree()<=e(this,d)&&t.push(new V(i,f)),o.assign(_)}}else{const o=i.at(0),h=i.at(1),f=e(this,l)[o.index()],_=e(this,l)[h.index()];for(const z of f){const F=o.value();o.assign(z._value);for(const S of _){const W=h.value();h.assign(S._value),i.degree()<=e(this,d)&&t.push(new V(i,z,S)),h.assign(W)}o.assign(F)}}for(const i of e(this,l))for(const o of i._neurons)o.lockConnections();return u(this,w,t),this.monitor.outputDebugString("End of Network Generation"),!0},M=function(t){let i=!1;for(const o of v(this,p,D).call(this,t))e(this,l)[o].setActivityMaximumInput()&&(i=!0);if(i)for(const o of e(this,l))o.applyToVariable();else for(const o of e(this,w))o.refreshWeight()},D=function(t){for(let i=t.length;i>1;--i){const o=k(i),h=t[i-1];t[i-1]=t[o],t[o]=h}return t};var N,x,g,b,T;class Y{constructor(s){r(this,b);r(this,N);r(this,x,0);r(this,g,[]);y(this,"_neurons",[]);u(this,N,s);for(const t of s.domain())this._neurons.push(new $(t));v(this,b,T).call(this,k(this._neurons.length))}applyToVariable(){e(this,N).assign(this._neurons[e(this,x)]._value)}setActivityMaximumInput(){e(this,g).length=0;let s=Number.NEGATIVE_INFINITY,t=!1;for(let i=0;i<this._neurons.length;++i){const o=this._neurons[i].getInput();s<=o&&(s<o&&(s=o,e(this,g).length=0,t=!1),e(this,g).push(i),e(this,x)===i&&(t=!0))}return t||e(this,g).length===0?!1:(v(this,b,T).call(this,e(this,g)[k(e(this,g).length)]),!0)}[Symbol.iterator](){return this._neurons[Symbol.iterator]()}}N=new WeakMap,x=new WeakMap,g=new WeakMap,b=new WeakSet,T=function(s){for(const t of this._neurons)t._isActive=!1;this._neurons[s]._isActive=!0,u(this,x,s)};var m,a,c;class V{constructor(s,t,i=null){r(this,m);r(this,a);r(this,c);y(this,"_weight");u(this,m,s),u(this,a,t),u(this,c,i),this._weight=s.degree()-1,e(this,a).addConnection(this),e(this,c)&&e(this,c).addConnection(this)}getNeuron(s){return s===e(this,a)?e(this,c):s===e(this,c)?e(this,a):null}refreshWeight(){!e(this,a)._isActive||e(this,c)!==null&&!e(this,c)._isActive||(e(this,m).size()===1?this._weight+=e(this,m).relation().degree(e(this,a)._value)-1:this._weight+=e(this,m).relation().degree(e(this,a)._value,e(this,c)._value)-1)}}m=new WeakMap,a=new WeakMap,c=new WeakMap;var E,A;class ${constructor(s){r(this,E,[]);r(this,A,[]);y(this,"_value");y(this,"_isActive",!1);this._value=s}addConnection(s){e(this,A).push(s)}lockConnections(){u(this,E,[...e(this,A)]),u(this,A,null)}getInput(){let s=0;for(const t of e(this,E)){const i=t.getNeuron(this);s+=t._weight*(i===null||i._isActive?1:0)}return s}}E=new WeakMap,A=new WeakMap;function k(n){return Math.floor(Math.random()*Math.floor(n))}export{J as FuzzyGENET};
