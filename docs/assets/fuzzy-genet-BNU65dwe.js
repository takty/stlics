var W=Object.defineProperty;var k=n=>{throw TypeError(n)};var j=(n,t,s)=>t in n?W(n,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):n[t]=s;var A=(n,t,s)=>j(n,typeof t!="symbol"?t+"":t,s),E=(n,t,s)=>t.has(n)||k("Cannot "+s);var e=(n,t,s)=>(E(n,t,"read from private field"),s?s.call(n):t.get(n)),r=(n,t,s)=>t.has(n)?k("Cannot add the same private member more than once"):t instanceof WeakSet?t.add(n):t.set(n,s),u=(n,t,s,i)=>(E(n,t,"write to private field"),i?i.call(n,s):t.set(n,s),s),d=(n,t,s)=>(E(n,t,"access private method"),s);import{S as L,r as S,A as O}from"./assignment-list-NtRAOzA7.js";var l,m,v,p,C,D,G;class q extends L{constructor(){super();r(this,p);r(this,l);r(this,m);r(this,v)}setThreshold(s){u(this,v,s)}name(){return"Fuzzy GENET"}preprocess(){if(u(this,l,[]),u(this,m,[]),u(this,v,1),!d(this,p,C).call(this))throw new Error;this.monitor.initialize()}exec(){const s=[...Array(e(this,l).length).keys()],i=this.pro.degree(),o=new O;let h=i,f=null;for(;;){const _=this.pro.degree();if(this.monitor.outputDebugString(`Evaluation: ${_}`),h<_&&(o.setProblem(this.pro),h=_,this.monitor.solutionFound(o,h)))return!0;if((f=this.monitor.check(_))!==null)break;d(this,p,D).call(this,s)}return f===!1&&!this.monitor.isTargetAssigned()&&i<h&&(o.apply(),f=!0),f}}l=new WeakMap,m=new WeakMap,v=new WeakMap,p=new WeakSet,C=function(){this.monitor.outputDebugString("Start of Network Generation");const s=[];for(const i of this.pro.variables()){if(i.domain().size()===0)return!1;e(this,l).push(new P(i))}for(const i of this.pro.constraints())if(i.size()===1){const o=i.at(0),h=e(this,l)[o.index()];for(const f of h){const _=o.value();o.assign(f._value),i.degree()<=e(this,v)&&s.push(new V(i,f)),o.assign(_)}}else{const o=i.at(0),h=i.at(1),f=e(this,l)[o.index()],_=e(this,l)[h.index()];for(const I of f){const F=o.value();o.assign(I._value);for(const T of _){const M=h.value();h.assign(T._value),i.degree()<=e(this,v)&&s.push(new V(i,I,T)),h.assign(M)}o.assign(F)}}return u(this,m,s),this.monitor.outputDebugString("End of Network Generation"),!0},D=function(s){let i=!1;for(const o of d(this,p,G).call(this,s))e(this,l)[o].setActivityMaximumInput()&&(i=!0);if(i)for(const o of e(this,l))o.applyToVariable();else{for(const o of e(this,m))o.refreshWeight();this.monitor.outputDebugString("	Refresh weights")}},G=function(s){for(let i=s.length-1;0<i;--i){const o=S(i+1);[s[i],s[o]]=[s[o],s[i]]}return s};var y,w,g,N,z;class P{constructor(t){r(this,N);r(this,y);r(this,w,0);r(this,g,[]);A(this,"_ns",[]);u(this,y,t);for(const s of t.domain())this._ns.push(new R(s));d(this,N,z).call(this,S(this._ns.length))}applyToVariable(){e(this,y).assign(this._ns[e(this,w)]._value)}setActivityMaximumInput(){e(this,g).length=0;let t=Number.NEGATIVE_INFINITY,s=!1;for(let i=0;i<this._ns.length;++i){const o=this._ns[i].getInput();t<=o&&(t<o&&(t=o,e(this,g).length=0,s=!1),e(this,g).push(i),e(this,w)===i&&(s=!0))}return s||e(this,g).length===0?!1:(d(this,N,z).call(this,e(this,g)[S(e(this,g).length)]),!0)}[Symbol.iterator](){return this._ns[Symbol.iterator]()}}y=new WeakMap,w=new WeakMap,g=new WeakMap,N=new WeakSet,z=function(t){for(const s of this._ns)s._isActive=!1;this._ns[t]._isActive=!0,u(this,w,t)};var x,c,a;class V{constructor(t,s,i=null){r(this,x);r(this,c);r(this,a);A(this,"_w");u(this,x,t),u(this,c,s),u(this,a,i),this._w=t.degree()-1,e(this,c).addConnection(this),e(this,a)&&e(this,a).addConnection(this)}getNeuron(t){return t===e(this,c)?e(this,a):t===e(this,a)?e(this,c):null}refreshWeight(){if(!e(this,c)._isActive||e(this,a)!==null&&!e(this,a)._isActive)return;const t=e(this,x).relation();e(this,x).size()===1?this._w+=t(e(this,c)._value)-1:this._w+=t(e(this,c)._value,e(this,a)._value)-1}}x=new WeakMap,c=new WeakMap,a=new WeakMap;var b;class R{constructor(t){r(this,b,[]);A(this,"_value");A(this,"_isActive",!1);this._value=t}addConnection(t){e(this,b).push(t)}getInput(){let t=0;for(const s of e(this,b)){const i=s.getNeuron(this);t+=s._w*(i===null||i._isActive?1:0)}return t}}b=new WeakMap;export{q as FuzzyGENET};
