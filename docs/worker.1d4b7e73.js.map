{"mappings":"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","sources":["<anon>","src/_docs/n-1-queens/worker.ts","src/_model/n-1-queens.ts"],"sourcesContent":["(function () {\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire95bc\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire95bc\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nimportScripts(\"./worker.28e2d56a.js\");\nvar $36b40367d4b1ef08$exports = {};\n\nvar $1chkU = parcelRequire(\"1chkU\");\n/**\n * A sample implementation of the N-1 Queen Problem.\n * The problem is to place N queens on a board of N vertical squares and N-1 horizontal squares in such a way that as few queens as possible are taken from each other.\n * If two queens are in a position to be taken, the farther apart they are, the higher the satisfaction degree.\n *\n * @author Takuto Yanagida\n * @version 2024-10-21\n */ \nvar $kVxbQ = parcelRequire(\"kVxbQ\");\nclass $fbbc1c4d2f3f099a$export$da964d25c0ed9c2e extends (0, $kVxbQ.Model) {\n    #size;\n    constructor(queenSize){\n        super();\n        this.#size = queenSize;\n    }\n    getQueenSize() {\n        return this.#size;\n    }\n    setQueenSize(size) {\n        this.#size = size;\n    }\n    isFuzzy() {\n        return true;\n    }\n    createProblem(p) {\n        const xs = [];\n        for(let i = 0; i < this.#size; ++i)xs.push(p.createVariable({\n            name: `Queen ${i}`,\n            domain: p.createDomain({\n                min: 1,\n                max: this.#size - 1\n            }),\n            value: 1\n        }));\n        for(let i = 0; i < this.#size; ++i)for(let j = i + 1; j < this.#size; ++j)p.createConstraint({\n            relation: new $fbbc1c4d2f3f099a$var$FuzzyQueenRelation(i, j, this.#size),\n            variables: [\n                xs[i],\n                xs[j]\n            ]\n        });\n        return p;\n    }\n    printResult(p) {\n        for(let y = 0; y < this.#size; ++y){\n            let l = \"\";\n            if (p.variableAt(y).isEmpty()) for(let x = 0; x < this.#size; ++x)l += \"- \";\n            else {\n                for(let x = 0; x < this.#size; ++x)if (p.variableAt(y).value() - 1 === x) l += \"o \";\n                else l += \"- \";\n            }\n            this._debugOutput(l);\n        }\n    }\n}\nclass $fbbc1c4d2f3f099a$var$FuzzyQueenRelation {\n    #dist;\n    #size;\n    constructor(i, j, size){\n        this.#dist = j - i;\n        this.#size = size;\n    }\n    satisfactionDegree(v1, v2) {\n        if (v1 !== v2 && v1 !== v2 + this.#dist && v1 !== v2 - this.#dist) return 1;\n        return (this.#dist - 1) / (this.#size - 1);\n    }\n}\n\n\nonmessage = async (e)=>{\n    const { task: task, args: args } = e.data;\n    switch(task){\n        case \"create\":\n            $36b40367d4b1ef08$var$create(...args);\n            break;\n        case \"solve\":\n            $36b40367d4b1ef08$var$solve(...args);\n            break;\n    }\n};\nlet $36b40367d4b1ef08$var$m = null;\nlet $36b40367d4b1ef08$var$p = null;\nfunction $36b40367d4b1ef08$var$create(num) {\n    $36b40367d4b1ef08$var$m = new (0, $fbbc1c4d2f3f099a$export$da964d25c0ed9c2e)(num);\n    $36b40367d4b1ef08$var$m.setDebugOutput($36b40367d4b1ef08$var$log);\n    const obs = (v, val)=>$36b40367d4b1ef08$var$board(val - 1, v.index());\n    $36b40367d4b1ef08$var$p = new (0, $1chkU.Problem)();\n    $36b40367d4b1ef08$var$p.setVariableFactory((o, d)=>new (0, $1chkU.ObservableVariable)(o, d, obs));\n    $36b40367d4b1ef08$var$p = $36b40367d4b1ef08$var$m.createProblem($36b40367d4b1ef08$var$p);\n}\nasync function $36b40367d4b1ef08$var$solve(type, targetRate) {\n    const t = Date.now(); // Start time measurement\n    const sn = (0, $1chkU.SolverFactory).fuzzySolverNames()[type];\n    const s = await (0, $1chkU.SolverFactory).createSolver(sn, $36b40367d4b1ef08$var$p);\n    s.setTargetRate(targetRate);\n    s.setDebugOutput($36b40367d4b1ef08$var$log);\n    const result = s.solve();\n    const time = Date.now() - t; // Stop time measurement\n    const deg = $36b40367d4b1ef08$var$p.worstSatisfactionDegree();\n    $36b40367d4b1ef08$var$m.printResult($36b40367d4b1ef08$var$p);\n    postMessage({\n        result: result,\n        time: time,\n        deg: deg,\n        solver: s.name()\n    });\n}\nfunction $36b40367d4b1ef08$var$log(e) {\n    postMessage({\n        log: e\n    });\n}\nfunction $36b40367d4b1ef08$var$board(x, y) {\n    postMessage({\n        board: {\n            x: x,\n            y: y\n        }\n    });\n}\n\n})();\n//# sourceMappingURL=worker.1d4b7e73.js.map\n","import { Problem } from '../../../stlics.ts';\nimport { ObservableVariable } from '../../../stlics.ts';\nimport { Solver } from '../../../stlics.ts';\nimport { SolverFactory } from '../../../stlics.ts';\nimport { N_1_queens } from '../../_model/n-1-queens';\n\nonmessage = async e => {\n\tconst { task, args } = e.data;\n\tswitch (task) {\n\t\tcase 'create':\n\t\t\tcreate(...(args as [number]));\n\t\t\tbreak;\n\t\tcase 'solve':\n\t\t\tsolve(...(args as [string, number]));\n\t\t\tbreak;\n\t}\n};\n\nlet m: N_1_queens|null = null;\nlet p: Problem|null = null;\n\nfunction create(num: number) {\n\tm = new N_1_queens(num);\n\tm.setDebugOutput(log);\n\n\tconst obs = (v, val) => board(val - 1, v.index());\n\n\tp = new Problem();\n\tp.setVariableFactory((o, d) => new ObservableVariable(o, d, obs));\n\tp = m.createProblem(p);\n}\n\nasync function solve(type: string, targetRate: number): Promise<void> {\n\tconst t  = Date.now();  // Start time measurement\n\tconst sn = SolverFactory.fuzzySolverNames()[type];\n\n\tconst s = await SolverFactory.createSolver(sn, p as Problem) as Solver;\n\ts.setTargetRate(targetRate);\n\ts.setDebugOutput(log);\n\n\tconst result = s.solve();\n\tconst time   = Date.now() - t;  // Stop time measurement\n\tconst deg    = (p as Problem).worstSatisfactionDegree();\n\n\t(m as N_1_queens).printResult(p as Problem);\n\tpostMessage({ result, time, deg, solver: s.name() });\n}\n\nfunction log(e) {\n\tpostMessage({ log: e });\n}\n\nfunction board(x, y) {\n\tpostMessage({ board: { x, y } });\n}\n","/**\n * A sample implementation of the N-1 Queen Problem.\n * The problem is to place N queens on a board of N vertical squares and N-1 horizontal squares in such a way that as few queens as possible are taken from each other.\n * If two queens are in a position to be taken, the farther apart they are, the higher the satisfaction degree.\n *\n * @author Takuto Yanagida\n * @version 2024-10-21\n */\n\nimport { Problem } from '../problem/problem';\nimport { Variable } from '../problem/variable';\nimport { Domain } from '../problem/domain';\nimport { FuzzyRelation } from '../problem/relation';\nimport { Model } from './model';\n\nexport class N_1_queens extends Model {\n\n\t#size: number;\n\n\tconstructor(queenSize: number) {\n\t\tsuper();\n\t\tthis.#size = queenSize;\n\t}\n\n\tgetQueenSize(): number {\n\t\treturn this.#size;\n\t}\n\n\tsetQueenSize(size: number): void {\n\t\tthis.#size = size;\n\t}\n\n\tisFuzzy(): boolean {\n\t\treturn true;\n\t}\n\n\tcreateProblem(p: Problem): Problem {\n\t\tconst xs: Variable[] = [];\n\t\tfor (let i: number = 0; i < this.#size; ++i) {\n\t\t\txs.push(p.createVariable({ name: `Queen ${i}`, domain: p.createDomain({ min: 1, max: this.#size - 1 }) as Domain, value: 1 }));\n\t\t}\n\t\tfor (let i: number = 0; i < this.#size; ++i) {\n\t\t\tfor (let j: number = i + 1; j < this.#size; ++j) {\n\t\t\t\tp.createConstraint({ relation: new FuzzyQueenRelation(i, j, this.#size), variables: [xs[i], xs[j]] });\n\t\t\t}\n\t\t}\n\t\treturn p;\n\t}\n\n\tprintResult(p: Problem) {\n\t\tfor (let y: number = 0; y < this.#size; ++y) {\n\t\t\tlet l: string = '';\n\t\t\tif (p.variableAt(y).isEmpty()) {\n\t\t\t\tfor (let x: number = 0; x < this.#size; ++x) {\n\t\t\t\t\tl += '- ';\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor (let x: number = 0; x < this.#size; ++x) {\n\t\t\t\t\tif (p.variableAt(y).value() - 1 === x) {\n\t\t\t\t\t\tl += 'o ';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tl += '- ';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._debugOutput(l);\n\t\t}\n\t}\n\n}\n\nclass FuzzyQueenRelation implements FuzzyRelation {\n\n\t#dist: number;\n\t#size: number;\n\n\tconstructor(i: number, j: number, size: number) {\n\t\tthis.#dist = j - i;\n\t\tthis.#size = size;\n\t}\n\n\tsatisfactionDegree(v1: number, v2: number): number {\n\t\tif ((v1 !== v2) && (v1 !== v2 + this.#dist) && (v1 !== v2 - this.#dist)) return 1;\n\t\treturn (this.#dist - 1) / (this.#size - 1);\n\t}\n\n}\n"],"names":["$parcel$global","globalThis","self","window","global","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","importScripts","$1chkU","$kVxbQ","$fbbc1c4d2f3f099a$export$da964d25c0ed9c2e","Model","constructor","queenSize","getQueenSize","setQueenSize","size","isFuzzy","createProblem","p","xs","i","push","createVariable","name","domain","createDomain","min","max","value","j","createConstraint","relation","$fbbc1c4d2f3f099a$var$FuzzyQueenRelation","variables","printResult","y","l","variableAt","isEmpty","x","_debugOutput","satisfactionDegree","v1","v2","onmessage","e","task","args","data","$36b40367d4b1ef08$var$create","num","$36b40367d4b1ef08$var$m","setDebugOutput","$36b40367d4b1ef08$var$log","obs","v","val","postMessage","board","index","$36b40367d4b1ef08$var$p","Problem","setVariableFactory","o","d","ObservableVariable","$36b40367d4b1ef08$var$solve","type","targetRate","t","Date","now","sn","SolverFactory","fuzzySolverNames","s","createSolver","setTargetRate","result","solve","time","deg","worstSatisfactionDegree","solver","log"],"version":3,"file":"worker.1d4b7e73.js.map"}