{"mappings":"C,A,W,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,E,Q,C,c,yC,I,E,E,QGAO,OAAA,EAEN,OAAO,CAAA,CAAM,CAAC,CAAS,EACtB,IAAI,EAAW,EAAW,EAAW,EAAW,EAChD,GAAI,EAAI,EAAG,CACV,EAAI,KAAK,IAAI,CAAC,EAAI,EAAI,GACtB,GACC,EAAG,CACF,EAAG,CACF,GACC,EAAI,KAAK,MAAM,GACf,EAAI,EAAI,KAAK,MAAM,GAAK,QACf,EAAI,EAAI,EAAI,GAAK,GAAO,AAAM,IAAN,EAAU,AAC5C,GAAQ,EACR,EAAI,EAAI,EAAI,EAAI,CACjB,OAAS,GAAK,EAAG,AACjB,EAAK,AAAA,CAAA,EAAI,CAAA,EAAK,KAAK,GAAG,CAAC,EAAK,CAAA,EAAI,CAAA,GAAM,EAAI,CAC3C,OAAS,GAAK,IAAK,MACV,AAAA,CAAA,EAAI,EAAI,CAAA,EAAK,KAAK,GAAG,CAAC,IAAM,KAAK,MAAM,GAAI,AACtD,KAAO,CACN,EAAI,KAAK,CAAC,CAAI,CAAA,EAAI,KAAK,CAAC,AAAD,EACvB,GACK,KAAK,MAAM,GAAK,GACnB,EAAI,EACJ,EAAI,EACJ,CAAA,EAAI,KAAK,MAAM,EAAf,EACQ,GAEP,CAAA,EAAI,KAAK,GAAG,CAAC,CADb,CAAA,EAAI,KAAK,GAAG,CAAC,KAAK,GAAG,CAAC,GAAK,EAA3B,EACA,IAID,EAAI,EACJ,EAAI,EAFJ,CAAA,EAAI,KAAK,MAAM,EAAf,EAGQ,GAEP,CAAA,EAAI,KAAK,GAAG,CAAE,AAAA,CAAA,EAAI,CAAA,EAAK,KAAK,GAAG,CAD/B,EAAI,EAAI,KAAK,GAAG,CAAC,IACjB,SAGM,KAAK,MAAM,IAAM,EAAG,AAC9B,CACA,OAAO,CACR,CAEA,OAAO,OAAO,CAAS,CAAE,CAAS,CAAU,CAC3C,IAAM,EAAY,EAAK,CAAA,CAAM,CAAC,GAC9B,OAAO,EAAK,CAAA,EAAI,EAAK,CAAA,CAAM,CAAC,EAAA,CAC7B,CAED,C,I,E,E,QDlCO,OAAM,UAAqB,EAAA,KAAI,CAErC,OAAO,QAAQ,CAAW,CAAU,CACnC,OAAO,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,KAAK,KAAK,CAAC,GAC9C,CAEA,CAAA,CAAK,AAAS,AACd,EAAA,CAAI,AAAS,AACb,EAAA,CAAE,AAAS,AACX,EAAA,CAAI,AAAS,AAEb,aAAY,CAAgB,CAAE,CAAe,CAAE,CAAoB,CAAE,EAA4B,IAAI,CAAE,CACtG,KAAK,GACL,IAAI,CAAC,CAAA,CAAK,CAAG,EACb,IAAI,CAAC,CAAA,CAAI,CAAG,EACZ,IAAI,CAAC,CAAA,CAAE,CAAG,EACV,IAAI,CAAC,CAAA,CAAI,CAAG,GAAc,CAC3B,CAEA,kBAA2B,CAC1B,OAAO,IAAI,CAAC,CAAA,CAAK,AAClB,CAEA,iBAAiB,CAAa,CAAQ,CACrC,IAAI,CAAC,CAAA,CAAK,CAAG,CACd,CAEA,YAAqB,CACpB,OAAO,IAAI,CAAC,CAAA,CAAI,AACjB,CAEA,WAAW,CAAe,CAAQ,CACjC,IAAI,CAAC,CAAA,CAAI,CAAG,CACb,CAEA,qBAA8B,CAC7B,OAAO,IAAI,CAAC,CAAA,CAAE,AACf,CAEA,oBAAoB,CAAiB,CAAQ,CAC5C,IAAI,CAAC,CAAA,CAAE,CAAG,CACX,CAEA,eAAwB,CACvB,OAAO,IAAI,CAAC,CAAA,CAAI,AACjB,CAEA,cAAc,CAAY,CAAQ,CACjC,IAAI,CAAC,CAAA,CAAI,CAAG,CACb,CAEA,SAAmB,CAClB,MAAO,CAAA,CACR,CAEA,cAAc,CAAU,CAAW,CAClC,IAAM,EAAa,IAAI,CAAC,CAAA,CAAI,CAAI,CAAA,AAAC,CAAA,IAAI,CAAC,CAAA,CAAK,CAAG,IAAI,CAAC,CAAA,CAAK,CAAG,IAAI,CAAC,CAAA,CAAK,AAAJ,EAAQ,CAAA,EAAM,EACzE,EAAiB,EAAE,CACzB,IAAK,IAAI,EAAY,EAAG,EAAI,IAAI,CAAC,CAAA,CAAK,CAAE,EAAE,EACzC,EAAG,IAAI,CAAC,EAAE,cAAc,CAAC,CAAE,OAAQ,EAAE,YAAY,CAAC,CAAE,IAAK,EAAG,IAAK,IAAI,CAAC,CAAA,CAAI,CAAG,CAAE,GAAc,MAAO,EAAG,KAAM,EAAG,IAEjH,KAAO,EAAE,cAAc,GAAK,GAAG,CAC9B,IAAM,EAAY,EAAa,OAAO,CAAC,IAAI,CAAC,CAAA,CAAK,EAC3C,EAAY,EAAa,OAAO,CAAC,IAAI,CAAC,CAAA,CAAK,EAE7C,IAAM,GAEL,IAAM,AADgB,EAAE,kBAAkB,CAAC,CAAE,CAAC,EAAE,CAAE,CAAE,CAAC,EAAE,EAC5C,MAAM,EACpB,EAAE,gBAAgB,CAAC,CAAE,SAAU,IAAI,EAAc,IAAI,CAAC,CAAA,CAAiB,IAAK,UAAW,CAAC,CAAE,CAAC,EAAE,CAAE,CAAE,CAAC,EAAE,CAAC,AAAC,EAGzG,CACA,OAAO,CACR,CAEA,CAAA,CAAiB,GAChB,IAAM,EAAoB,EAAE,CAC5B,IAAK,IAAI,EAAY,EAAG,EAAI,IAAI,CAAC,CAAA,CAAI,CAAE,EAAE,EACxC,EAAM,IAAI,CAAC,AAAI,MAAM,IAAI,CAAC,CAAA,CAAI,GAE/B,IAAK,IAAI,EAAY,EAAG,EAAI,IAAI,CAAC,CAAA,CAAI,CAAE,EAAE,EACxC,IAAK,IAAI,EAAY,EAAG,EAAI,IAAI,CAAC,CAAA,CAAI,CAAE,EAAE,EAAG,CAC3C,IAAM,EAAa,AAAY,IAAZ,IAAI,CAAC,CAAA,CAAE,CAAU,OAAO,SAAS,CAAI,AAAA,CAAA,EAAI,IAAI,CAAC,CAAA,CAAC,AAAA,EAAK,IAAI,CAAC,CAAA,CAAE,AAC9E,CAAA,CAAK,CAAC,EAAE,CAAC,EAAE,CAAG,AAAA,EAAK,MAAM,CAAC,EAAG,EAC9B,CAED,OAAO,CACR,CAED,CAEA,MAAM,EAEL,CAAA,CAAM,AAAa,AAEnB,aAAY,CAAiB,CAAE,CAC9B,IAAI,CAAC,CAAA,CAAM,CAAG,CACf,CAEA,mBAAmB,CAAc,CAAE,CAAc,CAAU,CAC1D,OAAO,IAAI,CAAC,CAAA,CAAM,CAAC,EAAO,CAAC,EAAO,AACnC,CAED,CDjHA,UAAY,MAAM,IACjB,GAAM,CAAA,KAAE,CAAI,CAAA,KAAE,CAAI,CAAE,CAAG,EAAE,IAAI,CAC7B,OAAQ,GACP,IAAK,UACJ,AAWH,SAAgB,CAAc,CAAE,CAAe,CAAE,CAAoB,EAEpE,AADA,CAAA,EAAI,IAAI,EAAa,EAAQ,EAAS,EAAtC,EACE,cAAc,CAAC,GACjB,EAAI,EAAE,aAAa,CAAC,IAAI,EAAA,OAAM,CAC/B,KAfc,GACX,KACD,KAAK,QACJ,KAAU,EAEZ,CACD,EAEA,IAAI,EAAuB,KACvB,EAAkB,KAQtB,eAAe,EAAM,CAAY,CAAE,CAAkB,EACpD,IAAM,EAAK,KAAK,GAAG,GACb,EAAK,AAAA,CAAA,EAAA,EAAA,aAAY,AAAZ,EAAc,gBAAgB,EAAE,CAAC,EAAK,CAE3C,EAAI,MAAM,AAAA,CAAA,EAAA,EAAA,aAAY,AAAZ,EAAc,YAAY,CAAC,EAAI,GAC/C,EAAE,aAAa,CAAC,GAChB,EAAE,cAAc,CAAC,GAMjB,YAAY,CAAE,OAJC,EAAE,KAAK,GAIA,KAHP,KAAK,GAAG,GAAK,EAGA,IAFZ,EAAc,uBAAuB,GAEpB,OAAQ,EAAE,IAAI,EAAG,EACnD,CAEA,SAAS,EAAI,CAAC,EACb,YAAY,CAAE,IAAK,CAAE,EACtB,C","sources":["<anon>","src/_docs/random-binary/worker.ts","src/_model/random-binary.ts","src/_model/beta.ts"],"sourcesContent":["(function () {\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire95bc\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire95bc\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nimportScripts(\"./worker.28e2d56a.js\");\nvar $2bafa7ae00e6e617$exports = {};\n\nvar $1chkU = parcelRequire(\"1chkU\");\n/**\n * Sample implementation of a random binary problem.\n *\n * @author Takuto Yanagida\n * @version 2024-10-21\n */ class $7b770316d3d133ec$export$4637d999aac180ea {\n    static #gamma(a) {\n        let t, x, y, u, r;\n        if (a > 1) {\n            t = Math.sqrt(2 * a - 1);\n            do do {\n                do {\n                    do {\n                        x = Math.random();\n                        y = 2 * Math.random() - 1;\n                    }while (x * x + y * y >= 1 || x === 0);\n                    y = y / x;\n                    x = t * y + a - 1;\n                }while (x <= 0);\n                u = (a - 1) * Math.log(x / (a - 1)) - t * y;\n            }while (u <= -50);\n            while ((1 + y * y) * Math.exp(u) <= Math.random());\n        } else {\n            t = Math.E / (a + Math.E);\n            do if (Math.random() < t) {\n                x = 0;\n                y = 1;\n                r = Math.random();\n                if (r > 0) {\n                    x = Math.exp(Math.log(r) / a);\n                    y = Math.exp(-x);\n                }\n            } else {\n                r = Math.random();\n                x = 1;\n                y = 0;\n                if (r > 0) {\n                    x = 1 - Math.log(r);\n                    y = Math.exp((a - 1) * Math.log(x));\n                }\n            }\n            while (Math.random() >= y);\n        }\n        return x;\n    }\n    static random(a, b) {\n        const T = $7b770316d3d133ec$export$4637d999aac180ea.#gamma(a);\n        return T / (T + $7b770316d3d133ec$export$4637d999aac180ea.#gamma(b));\n    }\n}\n\n\n\nvar $kVxbQ = parcelRequire(\"kVxbQ\");\nclass $dea60c80c87ffc50$export$e97843e77531646 extends (0, $kVxbQ.Model) {\n    static nextInt(max) {\n        return Math.floor(Math.random() * Math.floor(max));\n    }\n    #size;\n    #den;\n    #t;\n    #sig;\n    constructor(varCount, density, aveTightness, domainSize = null){\n        super();\n        this.#size = varCount;\n        this.#den = density;\n        this.#t = aveTightness;\n        this.#sig = domainSize ?? varCount;\n    }\n    getVariableCount() {\n        return this.#size;\n    }\n    setVariableCount(count) {\n        this.#size = count;\n    }\n    getDensity() {\n        return this.#den;\n    }\n    setDensity(density) {\n        this.#den = density;\n    }\n    getAverageTightness() {\n        return this.#t;\n    }\n    setAverageTightness(tightness) {\n        this.#t = tightness;\n    }\n    getDomainSize() {\n        return this.#sig;\n    }\n    setDomainSize(size) {\n        this.#sig = size;\n    }\n    isFuzzy() {\n        return true;\n    }\n    createProblem(p) {\n        const r = this.#den * ((this.#size * this.#size - this.#size) / 2) | 0;\n        const xs = [];\n        for(let i = 0; i < this.#size; ++i)xs.push(p.createVariable({\n            domain: p.createDomain({\n                min: 0,\n                max: this.#sig - 1\n            }),\n            value: 0,\n            name: \"\"\n        }));\n        while(p.constraintSize() < r){\n            const i = $dea60c80c87ffc50$export$e97843e77531646.nextInt(this.#size);\n            const j = $dea60c80c87ffc50$export$e97843e77531646.nextInt(this.#size);\n            if (i !== j) {\n                const temp = p.constraintsBetween(xs[i], xs[j]);\n                if (0 === temp.length) p.createConstraint({\n                    relation: new $dea60c80c87ffc50$var$TableRelation(this.#getRelationTable()),\n                    variables: [\n                        xs[i],\n                        xs[j]\n                    ]\n                });\n            }\n        }\n        return p;\n    }\n    #getRelationTable() {\n        const table = [];\n        for(let i = 0; i < this.#sig; ++i)table.push(new Array(this.#sig));\n        for(let i = 0; i < this.#sig; ++i)for(let j = 0; j < this.#sig; ++j){\n            const q = this.#t === 0 ? Number.MAX_VALUE : (1 - this.#t) / this.#t;\n            table[i][j] = (0, $7b770316d3d133ec$export$4637d999aac180ea).random(1, q);\n        }\n        return table;\n    }\n}\nclass $dea60c80c87ffc50$var$TableRelation {\n    #table;\n    constructor(table){\n        this.#table = table;\n    }\n    satisfactionDegree(value1, value2) {\n        return this.#table[value1][value2];\n    }\n}\n\n\nonmessage = async (e)=>{\n    const { task: task, args: args } = e.data;\n    switch(task){\n        case \"create\":\n            $2bafa7ae00e6e617$var$create(...args);\n            break;\n        case \"solve\":\n            $2bafa7ae00e6e617$var$solve(...args);\n            break;\n    }\n};\nlet $2bafa7ae00e6e617$var$m = null;\nlet $2bafa7ae00e6e617$var$p = null;\nfunction $2bafa7ae00e6e617$var$create(varNum, density, aveTightness) {\n    $2bafa7ae00e6e617$var$m = new (0, $dea60c80c87ffc50$export$e97843e77531646)(varNum, density, aveTightness);\n    $2bafa7ae00e6e617$var$m.setDebugOutput($2bafa7ae00e6e617$var$log);\n    $2bafa7ae00e6e617$var$p = $2bafa7ae00e6e617$var$m.createProblem(new (0, $1chkU.Problem)());\n}\nasync function $2bafa7ae00e6e617$var$solve(type, targetRate) {\n    const t = Date.now(); // Start time measurement\n    const sn = (0, $1chkU.SolverFactory).fuzzySolverNames()[type];\n    const s = await (0, $1chkU.SolverFactory).createSolver(sn, $2bafa7ae00e6e617$var$p);\n    s.setTargetRate(targetRate);\n    s.setDebugOutput($2bafa7ae00e6e617$var$log);\n    const result = s.solve();\n    const time = Date.now() - t; // Stop time measurement\n    const deg = $2bafa7ae00e6e617$var$p.worstSatisfactionDegree();\n    postMessage({\n        result: result,\n        time: time,\n        deg: deg,\n        solver: s.name()\n    });\n}\nfunction $2bafa7ae00e6e617$var$log(e) {\n    postMessage({\n        log: e\n    });\n}\n\n})();\n//# sourceMappingURL=worker.e978c33f.js.map\n","import { Problem } from '../../../stlics.ts';\nimport { Solver } from '../../../stlics.ts';\nimport { SolverFactory } from '../../../stlics.ts';\nimport { RandomBinary }  from '../../_model/random-binary';\n\nonmessage = async e => {\n\tconst { task, args } = e.data;\n\tswitch (task) {\n\t\tcase 'create':\n\t\t\tcreate(...(args as [number, number, number]));\n\t\t\tbreak;\n\t\tcase 'solve':\n\t\t\tsolve(...(args as [string, number]));\n\t\t\tbreak;\n\t}\n};\n\nlet m: RandomBinary|null = null;\nlet p: Problem|null = null;\n\nfunction create(varNum: number, density: number, aveTightness: number): void {\n\tm = new RandomBinary(varNum, density, aveTightness);\n\tm.setDebugOutput(log);\n\tp = m.createProblem(new Problem());\n}\n\nasync function solve(type: string, targetRate: number): Promise<void> {\n\tconst t  = Date.now();  // Start time measurement\n\tconst sn = SolverFactory.fuzzySolverNames()[type];\n\n\tconst s = await SolverFactory.createSolver(sn, p as Problem) as Solver;\n\ts.setTargetRate(targetRate);\n\ts.setDebugOutput(log);\n\n\tconst result = s.solve();\n\tconst time   = Date.now() - t;  // Stop time measurement\n\tconst deg    = (p as Problem).worstSatisfactionDegree();\n\n\tpostMessage({ result, time, deg, solver: s.name() });\n}\n\nfunction log(e) {\n\tpostMessage({ log: e });\n}\n","/**\n * Sample implementation of a random binary problem.\n *\n * @author Takuto Yanagida\n * @version 2024-10-21\n */\n\nimport { Problem } from '../problem/problem';\nimport { Variable } from '../problem/variable';\nimport { Constraint } from '../problem/constraint';\nimport { Domain } from '../problem/domain';\nimport { FuzzyRelation } from '../problem/relation';\nimport { Beta } from './beta';\nimport { Model } from './model';\n\nexport class RandomBinary extends Model {\n\n\tstatic nextInt(max: number): number {\n\t\treturn Math.floor(Math.random() * Math.floor(max));\n\t}\n\n\t#size: number;\n\t#den: number;\n\t#t: number;\n\t#sig: number;\n\n\tconstructor(varCount: number, density: number, aveTightness: number, domainSize: number | null = null) {\n\t\tsuper();\n\t\tthis.#size = varCount;\n\t\tthis.#den = density;\n\t\tthis.#t = aveTightness;\n\t\tthis.#sig = domainSize ?? varCount;\n\t}\n\n\tgetVariableCount(): number {\n\t\treturn this.#size;\n\t}\n\n\tsetVariableCount(count: number): void {\n\t\tthis.#size = count;\n\t}\n\n\tgetDensity(): number {\n\t\treturn this.#den;\n\t}\n\n\tsetDensity(density: number): void {\n\t\tthis.#den = density;\n\t}\n\n\tgetAverageTightness(): number {\n\t\treturn this.#t;\n\t}\n\n\tsetAverageTightness(tightness: number): void {\n\t\tthis.#t = tightness;\n\t}\n\n\tgetDomainSize(): number {\n\t\treturn this.#sig;\n\t}\n\n\tsetDomainSize(size: number): void {\n\t\tthis.#sig = size;\n\t}\n\n\tisFuzzy(): boolean {\n\t\treturn true;\n\t}\n\n\tcreateProblem(p: Problem): Problem {\n\t\tconst r: number = (this.#den * ((this.#size * this.#size - this.#size) / 2)) | 0;\n\t\tconst xs: Variable[] = [];\n\t\tfor (let i: number = 0; i < this.#size; ++i) {\n\t\t\txs.push(p.createVariable({ domain: p.createDomain({ min: 0, max: this.#sig - 1 }) as Domain, value: 0, name: '' }));\n\t\t}\n\t\twhile (p.constraintSize() < r) {\n\t\t\tconst i: number = RandomBinary.nextInt(this.#size);\n\t\t\tconst j: number = RandomBinary.nextInt(this.#size);\n\n\t\t\tif (i !== j) {\n\t\t\tconst temp: Constraint[] = p.constraintsBetween(xs[i], xs[j]);\n\t\t\t\tif (0 === temp.length) {\n\t\t\t\t\tp.createConstraint({ relation: new TableRelation(this.#getRelationTable()), variables: [xs[i], xs[j]] });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn p;\n\t}\n\n\t#getRelationTable(): number[][] {\n\t\tconst table: number[][] = [];\n\t\tfor (let i: number = 0; i < this.#sig; ++i) {\n\t\t\ttable.push(new Array(this.#sig));\n\t\t}\n\t\tfor (let i: number = 0; i < this.#sig; ++i) {\n\t\t\tfor (let j: number = 0; j < this.#sig; ++j) {\n\t\t\t\tconst q: number = (this.#t === 0) ? Number.MAX_VALUE : (1 - this.#t) / this.#t;\n\t\t\t\ttable[i][j] = Beta.random(1, q);\n\t\t\t}\n\t\t}\n\t\treturn table;\n\t}\n\n}\n\nclass TableRelation implements FuzzyRelation {\n\n\t#table: number[][];\n\n\tconstructor(table: number[][]) {\n\t\tthis.#table = table;\n\t}\n\n\tsatisfactionDegree(value1: number, value2: number): number {\n\t\treturn this.#table[value1][value2];\n\t}\n\n}\n","export class Beta {\n\n\tstatic #gamma(a: number): number {\n\t\tlet t: number, x: number, y: number, u: number, r: number;\n\t\tif (a > 1) {\n\t\t\tt = Math.sqrt(2 * a - 1);\n\t\t\tdo {\n\t\t\t\tdo {\n\t\t\t\t\tdo {\n\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\tx = Math.random();\n\t\t\t\t\t\t\ty = 2 * Math.random() - 1;\n\t\t\t\t\t\t} while ((x * x + y * y >= 1) || (x === 0));\n\t\t\t\t\t\ty = y / x;\n\t\t\t\t\t\tx = t * y + a - 1;\n\t\t\t\t\t} while (x <= 0);\n\t\t\t\t\tu = (a - 1) * Math.log(x / (a - 1)) - t * y;\n\t\t\t\t} while (u <= -50);\n\t\t\t} while ((1 + y * y) * Math.exp(u) <= Math.random());\n\t\t} else {\n\t\t\tt = Math.E / (a + Math.E);\n\t\t\tdo {\n\t\t\t\tif (Math.random() < t) {\n\t\t\t\t\tx = 0;\n\t\t\t\t\ty = 1;\n\t\t\t\t\tr = Math.random();\n\t\t\t\t\tif (r > 0) {\n\t\t\t\t\t\tx = Math.exp(Math.log(r) / a);\n\t\t\t\t\t\ty = Math.exp(-x);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tr = Math.random();\n\t\t\t\t\tx = 1;\n\t\t\t\t\ty = 0;\n\t\t\t\t\tif (r > 0) {\n\t\t\t\t\t\tx = 1 - Math.log(r);\n\t\t\t\t\t\ty = Math.exp((a - 1) * Math.log(x));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} while (Math.random() >= y);\n\t\t}\n\t\treturn x;\n\t}\n\n\tstatic random(a: number, b: number): number {\n\t\tconst T: number = Beta.#gamma(a);\n\t\treturn T / (T + Beta.#gamma(b));\n\t}\n\n}\n"],"names":["$parcel$global","globalThis","self","window","global","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","importScripts","$1chkU","$7b770316d3d133ec$export$4637d999aac180ea","a","t","x","y","u","r","Math","sqrt","random","log","exp","E","b","T","$kVxbQ","$dea60c80c87ffc50$export$e97843e77531646","Model","nextInt","max","floor","constructor","varCount","density","aveTightness","domainSize","getVariableCount","setVariableCount","count","getDensity","setDensity","getAverageTightness","setAverageTightness","tightness","getDomainSize","setDomainSize","size","isFuzzy","createProblem","p","xs","i","push","createVariable","domain","createDomain","min","value","name","constraintSize","j","temp","constraintsBetween","length","createConstraint","relation","$dea60c80c87ffc50$var$TableRelation","variables","table","Array","q","Number","MAX_VALUE","satisfactionDegree","value1","value2","onmessage","e","task","args","data","$2bafa7ae00e6e617$var$create","varNum","$2bafa7ae00e6e617$var$m","setDebugOutput","$2bafa7ae00e6e617$var$log","$2bafa7ae00e6e617$var$p","Problem","$2bafa7ae00e6e617$var$solve","type","targetRate","Date","now","sn","SolverFactory","fuzzySolverNames","s","createSolver","setTargetRate","postMessage","result","solve","time","deg","worstSatisfactionDegree","solver"],"version":3,"file":"worker.e978c33f.js.map"}