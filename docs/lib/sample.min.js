class Beta{static#e(e){let t,s,i,a,n;if(e>1){t=Math.sqrt(2*e-1);do{do{do{do{s=Math.random(),i=2*Math.random()-1}while(s*s+i*i>=1||0===s);i/=s,s=t*i+e-1}while(s<=0);a=(e-1)*Math.log(s/(e-1))-t*i}while(a<=-50)}while((1+i*i)*Math.exp(a)<=Math.random())}else{t=Math.E/(e+Math.E);do{Math.random()<t?(s=0,i=1,n=Math.random(),n>0&&(s=Math.exp(Math.log(n)/e),i=Math.exp(-s))):(n=Math.random(),s=1,i=0,n>0&&(s=1-Math.log(n),i=Math.exp((e-1)*Math.log(s))))}while(Math.random()>=i)}return s}static random(e,t){const s=Beta.#e(e);return s/(s+Beta.#e(t))}}class N_queens extends ProblemFactory{static COUNT=1;static QUEEN_NUM=20;static main(){let e=0,t=0;for(let s=0;s<N_queens.COUNT;++s){const s=new N_queens(N_queens.QUEEN_NUM),i=s.createProblem(new CrispProblem),a=Date.now(),n=new ForwardChecking(i);n.setTimeLimit(1e4);const r=n.solve(),o=Date.now()-a,l=i.satisfiedConstraintRate();console.log(`solver: ${n.name()}   ${r?"success":"failure"}`),console.log(`time: ${o}   rate: ${l}`),s.printResult(i),e+=o,t+=l}console.log(`average time: ${e/N_queens.COUNT}   average rate: ${t/N_queens.COUNT}`)}#t;constructor(e){super(),this.#t=e}getQueenSize(){return this.#t}setQueenSize(e){this.#t=e}isFuzzy(){return!1}createProblem(e){const t=[];for(let s=0;s<this.#t;++s)t.push(e.createVariable({name:`Queen ${s}`,domain:e.createDomain({min:1,max:this.#t}),value:1}));for(let s=0;s<this.#t;++s)for(let i=s+1;i<this.#t;++i)e.createConstraint({relation:new CrispQueenRelation(s,i),variables:[t[s],t[i]]});return e}printResult(e){for(let t=0;t<this.#t;++t){let s="";if(e.variableAt(t).isEmpty())for(let e=0;e<this.#t;++e)s+="- ";else for(let i=0;i<this.#t;++i)e.variableAt(t).value()-1===i?s+="o ":s+="- ";console.log(s)}}}class CrispQueenRelation extends CrispRelation{#s;constructor(e,t){super(),this.#s=t-e}isSatisfied(...e){const[t,s]=e;return t!==s&&t!==s+this.#s&&t!==s-this.#s}}class N_1_queens extends ProblemFactory{static COUNT=1;static QUEEN_NUM=20;static main(){let e=0,t=0;for(let s=0;s<N_1_queens.COUNT;++s){const i=new N_1_queens(N_1_queens.QUEEN_NUM),a=i.createProblem(new Problem),n=Date.now(),r=new FuzzyForwardChecking(a);r.setTimeLimit(1e4);const o=r.solve(),l=Date.now()-n,h=a.worstSatisfactionDegree();console.log(`solver: ${r.name()}   ${o?"success":"failure"}`),console.log(`trial: ${s+1}   time: ${l}   degree: ${h}`),i.printResult(a),e+=l,t+=h}console.log(`average time: ${e/N_1_queens.COUNT}   average degree: ${t/N_1_queens.COUNT}`)}#t;constructor(e){super(),this.#t=e}getQueenSize(){return this.#t}setQueenSize(e){this.#t=e}isFuzzy(){return!0}createProblem(e){const t=[];for(let s=0;s<this.#t;++s)t.push(e.createVariable({name:`Queen ${s}`,domain:e.createDomain({min:1,max:this.#t-1}),value:1}));for(let s=0;s<this.#t;++s)for(let i=s+1;i<this.#t;++i)e.createConstraint({relation:new FuzzyQueenRelation(s,i,this.#t),variables:[t[s],t[i]]});return e}printResult(e){for(let t=0;t<this.#t;++t){let s="";if(e.variableAt(t).isEmpty())for(let e=0;e<this.#t;++e)s+="- ";else for(let i=0;i<this.#t;++i)e.variableAt(t).value()-1===i?s+="o ":s+="- ";console.log(s)}}}class FuzzyQueenRelation extends FuzzyRelation{#s;#t;constructor(e,t,s){super(),this.#s=t-e,this.#t=s}satisfactionDegree(e,t){return e!==t&&e!==t+this.#s&&e!==t-this.#s?1:(this.#s-1)/(this.#t-1)}}class RandomBinary extends ProblemFactory{static COUNT=10;static VAR_NUM=10;static DENSITY=.5;static AVE_TIGHTNESS=.5;static main(){let e=0,t=0;for(let s=0;s<RandomBinary.COUNT;++s){const i=new RandomBinary(RandomBinary.VAR_NUM,RandomBinary.DENSITY,RandomBinary.AVE_TIGHTNESS).createProblem(new Problem),a=Date.now(),n=new FuzzyForwardChecking(i);n.setTimeLimit(1e4);const r=n.solve(),o=Date.now()-a,l=i.worstSatisfactionDegree();console.log(`solver: ${n.name()}   ${r?"success":"failure"}`),console.log(`trial: ${s+1}   time: ${o}   degree: ${l}`),e+=o,t+=l}console.log(`average time: ${e/RandomBinary.COUNT}   average degree: ${t/RandomBinary.COUNT}`)}static nextInt(e){return Math.floor(Math.random()*Math.floor(e))}#t;#i;#a;#n;constructor(e,t,s,i=null){super(),this.#t=e,this.#i=t,this.#a=s,this.#n=i??e}getVariableCount(){return this.#t}setVariableCount(e){this.#t=e}getDensity(){return this.#i}setDensity(e){this.#i=e}getAverageTightness(){return this.#a}setAverageTightness(e){this.#a=e}getDomainSize(){return this.#n}setDomainSize(e){this.#n=e}isFuzzy(){return!0}createProblem(e){const t=this.#i*((this.#t*this.#t-this.#t)/2)|0,s=[];for(let t=0;t<this.#t;++t)s.push(e.createVariable({domain:e.createDomain({min:0,max:this.#n-1}),value:0}));const i=[];for(;e.constraintSize()<t;){const t=RandomBinary.nextInt(this.#t),a=RandomBinary.nextInt(this.#t);t!==a&&(e.constraintsBetween(s[t],s[a],i),0===i.length&&e.createConstraint({relation:new TableRelation(this.#r()),variables:[s[t],s[a]]}))}return e}#r(){const e=[];for(let t=0;t<this.#n;++t)e.push(new Array(this.#n));for(let t=0;t<this.#n;++t)for(let s=0;s<this.#n;++s){const i=0===this.#a?Number.MAX_VALUE:(1-this.#a)/this.#a;e[t][s]=Beta.random(1,i)}return e}}class TableRelation extends FuzzyRelation{#o;constructor(e){super(),this.#o=e}satisfactionDegree(e,t){return this.#o[e][t]}}
//# sourceMappingURL=sample.min.js.map