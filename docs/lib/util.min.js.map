{"version":3,"sources":["util.js"],"names":["Problems","static","p","v","length","baseLength","vo","vn","c","vi","index","Number","MAX_VALUE","push","add","averagePathLength","ls","Array","variableSize","fill","vs","Set","connectedSize","sum","i","variables","ds","domain","degrees","constraints","size","at","origVal","value","val","assign","satisfactionDegree","variableAt","setDomain","threshold","cp","CrispFuzzyProblem","createVariable","r","crispRelation","isFuzzy","CrispFuzzyRelation","fuzzyRelation","createConstraint","relation","CrispProblem","iv","ImaginaryVariable","this","addVariable","CrispRelation","th","fr","constructor","isSatisfied","Variable","orig","super","owner","setName","name","dom","ProblemFactory","createProblem","Assignment","variable","args","assignment","apply","toString","AssignmentList","al","setVariables","as","setProblem","problem","addProblem","setAssignmentList","addAssignment","get","a","arbitraryAssignment","Math","floor","random","differenceSize","diff","clear","isEmpty","LoopDetector","indices","values","cur","loopLength","iterCount","initArrays","assignToVariable","checkLooping","key","out","offset","fi","j","checkLoop","variableIndex","iterationCount","clone","variableIndices"],"mappings":"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","file":"util.min.js","sourcesContent":["/**\n * Utility class for constraint satisfaction problems.\n *\n * @author Takuto Yanagida\n * @version 2023-04-11\n */\n\nclass Problems {\n\n\tstatic #averagePathLength(p, v, length, baseLength, vo) {\n\t\tconst vn = [];\n\n\t\tfor (const c of v) {\n\t\t\tfor (const vi of c) {\n\t\t\t\tif (length[vi.index()] === Number.MAX_VALUE) {\n\t\t\t\t\tvn.push(vi);\n\t\t\t\t\tlength[vi.index()] = baseLength + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (const vi of vn) vo.add(vi);\n\t\tfor (const vi of vn) {\n\t\t\tProblems.#averagePathLength(p, vi, length, baseLength + 1, vo);\n\t\t}\n\t}\n\n\t/**\n\t * Calculates the average path length for a given variable.\n\t * @param p A problem.\n\t * @param v A variable of the problem.\n\t * @return Average path length.\n\t */\n\tstatic averagePathLength(p, v) {\n\t\tconst ls = new Array(p.variableSize());\n\t\tls.fill(Number.MAX_VALUE);\n\n\t\tconst vs = new Set();\n\t\tvs.add(v);\n\n\t\tls[v.index()] = 0;\n\t\tProblems.#averagePathLength(p, v, ls, 0, vs);\n\n\t\tlet connectedSize = 0;\n\t\tlet sum           = 0;\n\n\t\tfor (let i = 0; i < ls.length; ++i) {\n\t\t\tif (ls[i] !== Number.MAX_VALUE && i !== v.index()) {\n\t\t\t\t++connectedSize;\n\t\t\t\tsum += ls[i];\n\t\t\t}\n\t\t}\n\t\tif (connectedSize === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn sum / connectedSize;\n\t}\n\n\t/**\n\t * Calculates the average path length.\n\t * @param p A problem.\n\t * @return Average path length.\n\t */\n\tstatic averagePathLengths(p) {\n\t\tconst ls = new Array(p.variableSize());\n\n\t\tfor (const v of p.variables()) {\n\t\t\tls[v.index()] = Problems.averagePathLength(p, v);\n\t\t}\n\t\treturn ls;\n\t}\n\n\t/**\n\t * Gets an array containing all domains.\n\t * @param p A problem.\n\t * @return Array of domains.\n\t */\n\tstatic domains(p) {\n\t\tconst ds = [];\n\n\t\tfor (const v of p.variables()) {\n\t\t\tds.push(v.domain());\n\t\t}\n\t\treturn ds;\n\t}\n\n\t/**\n\t * Returns the array of possible satisfaction degree values for all unary constraints.\n\t * @param p A problem.\n\t * @param degrees Array of degree values.\n\t * @return The array.\n\t */\n\tstatic possibleSatisfactionDegreesOfUnaryConstraints(p, degrees) {\n\t\tfor (const c of p.constraints()) {\n\t\t\tif (c.size() !== 1) continue;\n\t\t\tconst v       = c.at(0);\n\t\t\tconst origVal = v.value();  // Save the value.\n\n\t\t\tfor (const val of v.domain()) {\n\t\t\t\tv.assign(val);\n\t\t\t\tdegrees.add(c.satisfactionDegree());\n\t\t\t}\n\t\t\tv.assign(origVal);  // Restore the value.\n\t\t}\n\t\treturn degrees;\n\t}\n\n\t/**\n\t * Set up all domains.\n\t * @param p A problem.\n\t * @param ds Array of domains.\n\t */\n\tstatic setDomains(p, ds) {\n\t\tfor (let i = 0; i < ds.length; ++i) {\n\t\t\tp.variableAt(i).setDomain(ds[i]);\n\t\t}\n\t}\n\n\t/**\n\t * Returns a view of the fuzzy constraint satisfaction problem as a crisp constraint satisfaction problem.\n\t * The relations and domains of the specified fuzzy constraint satisfaction problem are reused, but the other elements are newly generated.\n\t * Note: Assignments to variables and changes to domains of the view are reflected in the variables of the original problem.\n\t * @param p A fuzzy constraint satisfaction problem.\n\t * @param threshold The threshold of constraint satisfaction degree. A constraint is considered satisfied when the constraint satisfaction degree is greater than or equal to this value.\n\t * @return A crisp constraint satisfaction problem.\n\t */\n\tstatic toViewAsCrispProblem(p, threshold) {\n\t\tconst cp = new CrispFuzzyProblem();\n\n\t\tfor (const v of p.variables()) {\n\t\t\tcp.createVariable(v);\n\t\t}\n\t\tfor (c of p.constraints()) {\n\t\t\tconst vs = [];\n\n\t\t\tfor (const v of c) {\n\t\t\t\tvs.push(cp.variableAt(v.index()));\n\t\t\t}\n\t\t\tconst r = c.crispRelation();\n\n\t\t\tif (c.isFuzzy()) {\n\t\t\t\tr = new CrispFuzzyRelation(c.fuzzyRelation(), threshold);\n\t\t\t}\n\t\t\tcp.createConstraint({ relation: r, variables: vs });\n\t\t}\n\t\treturn cp;\n\t}\n\n}\n\nclass CrispFuzzyProblem extends CrispProblem {\n\n\tcreateVariable(v) {\n\t\tconst iv = new ImaginaryVariable(v);\n\t\tthis.addVariable(iv);\n\t\treturn v;\n\t}\n\n}\n\nclass CrispFuzzyRelation extends CrispRelation {\n\n\t#th;\n\t#fr;\n\n\tconstructor(fr, th) {\n\t\tthis.#fr = fr;\n\t\tthis.#th = th;\n\t}\n\n\tisSatisfied(...vs) {\n\t\treturn this.#fr.satisfactionDegree(vs) >= this.#th;\n\t}\n\n}\n\nclass ImaginaryVariable extends Variable {\n\n\t#orig;\n\n\tconstructor(v) {\n\t\tsuper(v.owner(), v.domain());\n\t\tthis.#orig = v;\n\t\tsetName(v.name());\n\t\tassign(v.value());\n\t}\n\n\tassign(value) {\n\t\tthis.#orig.assign(value);\n\t}\n\n\tdomain() {\n\t\treturn this.#orig.domain();\n\t}\n\n\tsetDomain(dom) {\n\t\tthis.#orig.setDomain(dom);\n\t}\n\n\tvalue() {\n\t\treturn this.#orig.value();\n\t}\n\n}\n\n/**\n * An interface that provides a factory method to generate constraint satisfaction problems.\n *\n * @author Takuto Yanagida\n * @version 2023-03-25\n */\n\nclass ProblemFactory {\n\n\t/**\n\t * Generates a constraint satisfaction problems.\n\t * @param p Objects to include the problem to be generated\n\t * @return A generated problem.\n\t */\n\tcreateProblem(p) {}\n\n\n\t/**\n\t * Returns whether the generated problem is a fuzzy constraint satisfaction problem, i.e., whether it contains fuzzy constraints.\n\t * @return If it is a fuzzy constraint satisfaction problem, true\n\t */\n\tisFuzzy() {}\n\n}\n\n\n/**\n * The class represents a pair of variables and the values to be assigned to them.\n *\n * @author Takuto Yanagida\n * @version 2023-03-25\n */\n\nclass Assignment {\n\n\t#variable;\n\t#value;\n\n\tconstructor(args) {\n\t\tif (args.assignment) {\n\t\t\tthis.#variable = args.assignment.variable();\n\t\t\tthis.#value    = args.assignment.value();\n\t\t} else if (args.variable) {\n\t\t\tthis.#variable = args.variable;\n\t\t\tthis.#value    = args.value ?? args.variable.value();\n\t\t}\n\t}\n\n\t/**\n\t * Assigns a value to a stored variable.\n\t */\n\tapply() {\n\t\tthis.#variable.assign(this.#value);\n\t}\n\n\t/**\n\t * Returns a string representation.\n\t * @return A string representation.\n\t */\n\ttoString() {\n\t\treturn `v${this.#variable.index()} <- ${this.#value}`;\n\t}\n\n\t/**\n\t * Gets the value.\n\t * @return Value.\n\t */\n\tvalue() {\n\t\treturn this.#value;\n\t}\n\n\t/**\n\t * Gets the variable.\n\t * @return Variable.\n\t */\n\tvariable() {\n\t\treturn this.#variable;\n\t}\n\n}\n\n/**\n * The class represents multiple variables and their assignments.\n *\n * @author Takuto Yanagida\n * @version 2023-03-25\n */\n\nclass AssignmentList {\n\n\tstatic fromVariables(vs) {\n\t\tconst al = new AssignmentList();\n\t\tal.setVariables(vs);\n\t\treturn al;\n\t}\n\n\t#as = [];\n\n\tconstructor() {\n\t}\n\n\tsetProblem(problem) {\n\t\tthis.#as.length = 0;\n\t\tthis.addProblem(problem);\n\t}\n\n\tsetAssignmentList(al) {\n\t\tthis.#as.length = 0;\n\t\tfor (let i = 0; i < al.size(); ++i) {\n\t\t\tthis.addAssignment(al.get(i));\n\t\t}\n\t}\n\n\tsetVariables(vs) {\n\t\tthis.#as.length = 0;\n\t\tfor (const v of vs) {\n\t\t\tthis.#as.push(new Assignment({ variable: v, value: v.value() }));\n\t\t}\n\t}\n\n\taddProblem(problem) {\n\t\tfor (const v of problem.variables()) {\n\t\t\tthis.#as.push(new Assignment({ variable: v, value: v.value() }));\n\t\t}\n\t}\n\n\taddVariable(variable, value = null) {\n\t\tthis.#as.push(new Assignment({ variable, value }));\n\t}\n\n\taddAssignment(a) {\n\t\tthis.#as.push(new Assignment({ variable: a.variable(), value: a.value() }));\n\t}\n\n\tapply() {\n\t\tfor (const a of this.#as) a.apply();\n\t}\n\n\tarbitraryAssignment() {\n\t\treturn this.#as[Math.floor(Math.random() * this.#as.length)];\n\t}\n\n\tdifferenceSize() {\n\t\tlet diff = 0;\n\t\tfor (const a of this.#as) {\n\t\t\tif (a.variable().value() !== a.value()) ++diff;\n\t\t}\n\t\treturn diff;\n\t}\n\n\tsize() {\n\t\treturn this.#as.length;\n\t}\n\n\tclear() {\n\t\tthis.#as.length = 0;\n\t}\n\n\tget(index) {\n\t\treturn this.#as[index];\n\t}\n\n\tadd(a) {\n\t\tthis.#as.push(a);\n\t}\n\n\tisEmpty() {\n\t\treturn this.#as.length === 0;\n\t}\n\n}\n\n\n/**\n * This class detects that a solver's operation is looping.\n *\n * @author Takuto Yanagida\n * @version 2023-03-26\n */\n\nclass LoopDetector {\n\n\t#indices    = [];\n\t#values     = [];\n\t#cur        = null;\n\t#loopLength = null;\n\t#iterCount  = null;\n\n\tconstructor(loopLength = 30, iterCount = 3) {\n\t\tthis.#loopLength = loopLength;\n\t\tthis.#iterCount  = iterCount;\n\t\tthis.#initArrays();\n\t}\n\n\t#assignToVariable(index, value) {\n\t\tthis.#indices[this.#cur] = index;\n\t\tthis.#values[this.#cur]  = value;\n\t\tif(--this.#cur === -1) {\n\t\t\tthis.#cur = this.#indices.length - 1;\n\t\t}\n\t}\n\n\t#checkLooping() {\n\t\tconst key = new Array(this.#loopLength);\n\t\tconst val = new Array(this.#loopLength);\n\t\tout: for (let length = 1; length <= this.#loopLength; ++length) {\n\t\t\tlet offset = this.#cur + 1;\n\t\t\tfor (let i = 0; i < length; ++i) {\n\t\t\t\tif (i + offset === this.#indices.length) {\n\t\t\t\t\toffset -= this.#indices.length;\n\t\t\t\t}\n\t\t\t\tkey[i] = this.#indices[i + offset];\n\t\t\t\tval[i] = this.#values[i + offset];\n\t\t\t}\n\t\t\tlet fi = length;\n\t\t\tfor (let i = 0; i < this.#iterCount - 1; ++i) {\n\t\t\t\toffset = this.#cur + 1;\n\t\t\t\tfor (let j = 0; j < length; ++j) {\n\t\t\t\t\tif (fi + j + offset >= this.#indices.length) {\n\t\t\t\t\t\toffset -= this.#indices.length;\n\t\t\t\t\t}\n\t\t\t\t\tif (this.#indices[fi + j + offset] !== key[j] || this.#values[fi + j + offset] !== val[j] ) {\n\t\t\t\t\t\tcontinue out;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfi += length;\n\t\t\t}\n\t\t\treturn length;\n\t\t}\n\t\treturn 0;\n\t}\n\n\t#initArrays() {\n\t\tthis.#indices = new Array(this.#loopLength * this.#iterCount);\n\t\tthis.#values  = new Array(this.#loopLength * this.#iterCount);\n\t\tthis.#indices.fill(-1);\n\t\tthis.#values.fill(-1);\n\t\tthis.#cur = this.#indices.length - 1;\n\t}\n\n\tcheckLoop(variableIndex, value) {\n\t\tthis.#assignToVariable(variableIndex, value);\n\t\treturn this.#checkLooping();\n\t}\n\n\tclear() {\n\t\tthis.#indices.fill(-1);\n\t\tthis.#values.fill(-1);\n\t}\n\n\titerationCount() {\n\t\treturn this.#iterCount;\n\t}\n\n\tloopLength() {\n\t\treturn this.#loopLength;\n\t}\n\n\tvalues() {\n\t\treturn this.#values.clone();\n\t}\n\n\tvariableIndices() {\n\t\treturn this.#indices.clone();\n\t}\n\n}\n\n"]}