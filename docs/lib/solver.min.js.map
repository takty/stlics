{"version":3,"sources":["solver.js"],"names":["Solver","_debug","_pro","_iterLimit","_timeLimit","_targetDeg","listener","constructor","pro","this","name","exec","setIterationLimit","count","setTimeLimit","msec","setTargetRate","rate","solve","addListener","l","add","removeListener","splice","indexOf","foundSolution","solution","worstDegree","finish","DomainPruner","static","hiddenLevels","hiddenSize","size","Array","fill","UNHIDDEN","hide","index","level","isEmpty","length","isValueHidden","reveal","i","revealAll","Breakout","weights","p","super","constraintSize","findCandidates","vioVars","canList","maxDiff","v","v_val","value","v_c","constraints","nowVio","c","isSatisfied","out","d","domain","assign","diff","clear","addVariable","listViolatingVariables","vioCons","vvs","Set","at","from","endTime","Number","MAX_VALUE","Date","now","iterCount","variables","AssignmentList","vc","violatingConstraints","satisfiedConstraintRate","console","log","e","arbitraryAssignment","apply","ForwardChecking","vars","sol","relCons","useMRV","solverObject","initializeRelatedConstraintTable","j","push","constraintsBetween","getConstraintsBetween","checkForward","currentIndex","v_i","d_i","dc_i","cs","emptyVariableSize","k","n","indexOfVariableWithMRV","s","branch","variableSize","setProblem","vc_index","dc","clearAllVariables","r","a","get","variable","setUsingMinimumRemainingValuesHeuristics","flag","MaxForwardChecking","maxVioCount","vioCount","checkedCons","cons","vcs","violatingConstraintSize","dom","getAdditionalViolationCount","future","revise","avc","has","v1","deleted","GENET","max","Math","floor","random","clusters","connections","createNetwork","Exception","Cluster","cl","origVal","_value","Connection","v2","cl_f","cl_s","origVal1","origVal2","_neurons","lockConnections","shuffle","is","nextInt","temp","order","cur","modified","setActivityMaximumInput","clu","applyToVariable","con","refreshWeight","var","maxNeurons","val","Neuron","setActivity","_isActive","neurons","NEGATIVE_INFINITY","alreadyOn","input","getInput","first","second","_weight","addConnection","getNeuron","self","conTemp","ret","LocalChanges","s1","s2","sn","delete","globalReturn","unassignAll","createNewV3","V1_V2","newV3","va","isConsistent","A","lcValue","V1","V2","setPlusSet","V3","T","setMinusSet","vv","setPlusElement","lcVariables","lcVariable","values","next","al","fromVariables","setMinusElement","notFixed","unassigned","LocalChangesEx","CrispSRS3","closedList","openList","nodes","neighborConstraints","isRandom","TreeNode","getNeighborConstraints","neighbors","repair","c0","candidates","shrink","node","c_stars","parent","getDescendants","getObject","spread","tnc","srs","setRandomness","children","obj","tn","tns","FuzzyBreakout","lastSolDeg","worstVars","satisfactionDegree","listWorstVariables","worstCons","wvs","deg","worstSatisfactionDegree","wsd","constraintsWithWorstSatisfactionDegree","FuzzyForwardChecking","solWorstDeg","degInc","sequence","unaryCons","pruneIntensively","vi_index","vj_index","pruneUnaryConstraints","orgVal","checkForwardConsistency","vi","di","dci","checkForwardConsistency2","vj","dj","dcj","loop_i","ni","nj","checkForwardConsistency3","vk","dk","dck","nk","checkForwardConsistencyN","emptySize","emp","indexes","comLoop","hidden","checkBackwardConsistency","Constraint","UNDEFINED","refresh","index_vi","bc","CONTINUE","TERMINATE","nextLevel","branchLast","success","MIN_VALUE","setIncrementStepOfWorstSatisfactionDegree","degree","setIntensivePruning","FuzzyForwardCheckingBc","setAssignmentList","FuzzyGENET","worstDeg","fuzzyRelation","FlexibleLocalChanges","lt","lb","computeHighestAndLowestConsistencyDegree","choose","x2","cr","res","Map","isDefined","set","vs","sort","o1","o2","res1","res2","remain","low","high","lowestConsistencyDegree","h","highestConsistencyDegree","flcRepair","X1","X2","xi","consX1xi","consX12","rc","X3p","X1p","X2p","flcVariables","min","flcVariable","consX1","bestCons","bestX2","bestDij","x2Store","dij","consX1_xi","testX1","crNew","consX12_xi","testX12","repairCons","X3","consX12xi","initTest","X","sd","cd","csd","initCons","initSol","result","FlexibleLocalChangesEx","SRS3","minDeg0","maxDeg0","deg0","REPAIR_THRESHOLD","removeCStar","cn","wsdcs","setParent","solutionWorstDeg","SRS3_PF","uvs","PostStabilization","AC3","v_j","val_i","val_j","vals","checkConsistency","nd","createDomain","setDomain","remove","v_k","v_m","reviseDomain","c1","NodeConsistency","threshold","elms","removeConstraint","orig","stabilized","C_min","variableAt","org"],"mappings":"AAOA,MAAMA,OAELC,QAAS,EAKTC,KAKAC,WAAa,KAKbC,WAAa,KAKbC,WAAa,GAKbC,GAAY,GAMZC,YAAYC,GACXC,KAAKP,KAAOM,CACb,CAMAE,OACC,MAAO,EACR,CAOAC,OACC,OAAO,CACR,CAOAC,kBAAkBC,EAAQ,MACzBJ,KAAKN,WAAaU,CACnB,CAOAC,aAAaC,EAAO,MACnBN,KAAKL,WAAaW,CACnB,CAOAC,cAAcC,EAAO,MACpBR,KAAKJ,WAAaY,CACnB,CAOAC,QACC,OAAOT,KAAKE,MACb,CAEAQ,YAAYC,GACXX,MAAKH,EAAUe,IAAID,EACpB,CAEAE,eAAeF,GACdX,MAAKH,EAAUiB,OAAOd,MAAKH,EAAUkB,QAAQJ,GAAI,EAClD,CAEAK,cAAcC,EAAUC,GACvB,IAAIC,GAAS,EAEb,IAAK,MAAMR,KAAKX,MAAKH,EAChBc,EAAEK,cAAcC,EAAUC,KAC7BC,GAAS,GAGX,OAAOA,CACR,EAWD,MAAMC,aAELC,UAAoB,EAEpBC,GACAC,GAAc,EAMdzB,YAAY0B,GACXxB,MAAKsB,EAAgB,IAAIG,MAAMD,GAC/BxB,MAAKsB,EAAcI,KAAKN,cAAaO,EACtC,CAMAJ,aACC,OAAOvB,MAAKuB,CACb,CAOAK,KAAKC,EAAOC,GACP9B,MAAKsB,EAAcO,KAAWT,cAAaO,KAC5C3B,MAAKuB,EAERvB,MAAKsB,EAAcO,GAASC,CAC7B,CAOAC,UACC,OAAO/B,MAAKsB,EAAcU,SAAWhC,MAAKuB,CAC3C,CAOAU,cAAcJ,GACb,OAAO7B,MAAKsB,EAAcO,KAAWT,cAAaO,CACnD,CAMAO,OAAOJ,GACN,IAAK,IAAIK,EAAI,EAAGA,EAAInC,MAAKsB,EAAcU,OAAQG,IAC1CnC,MAAKsB,EAAca,KAAOL,IAC7B9B,MAAKsB,EAAca,GAAKf,cAAaO,IACnC3B,MAAKuB,EAGV,CAKAa,YACCpC,MAAKsB,EAAcI,KAAKN,cAAaO,GACrC3B,MAAKuB,EAAc,CACpB,EAaD,MAAMc,iBAAiB9C,OAEtB+C,GAEAxC,YAAYyC,GACXC,MAAMD,GACNvC,MAAKsC,EAAW,IAAIb,MAAMzB,KAAKP,KAAKgD,kBACpCzC,MAAKsC,EAASZ,KAAK,EACpB,CAEAzB,OACC,MAAO,UACR,CAEAyC,GAAgBC,EAASC,GACxB,IAAIC,EAAU,EAEd,IAAK,MAAMC,KAAKH,EAAS,CACxB,MAAMI,EAAQD,EAAEE,QACVC,EAAQH,EAAEI,cAEhB,IAAIC,EAAS,EACb,IAAK,MAAMC,KAAKH,EACfE,IAAW,EAAIC,EAAEC,eAAiBrD,MAAKsC,EAASc,EAAEvB,SAEnDyB,EAAK,IAAK,MAAMC,KAAKT,EAAEU,SAAU,CAChC,GAAIT,IAAUQ,EAAG,SACjBT,EAAEW,OAAOF,GACT,IAAIG,EAAOP,EACX,IAAK,MAAMC,KAAKH,EAGf,GAFAS,IAAS,EAAIN,EAAEC,eAAiBrD,MAAKsC,EAASc,EAAEvB,SAE5C6B,EAAOb,EACV,SAASS,EAGPI,EAAOb,GACVA,EAAUa,EACVd,EAAQe,QACRf,EAAQgB,YAAYd,EAAGS,IACD,IAAZV,GACVD,EAAQgB,YAAYd,EAAGS,EAEzB,CACAT,EAAEW,OAAOV,EACV,CACD,CAEAc,GAAwBC,GACvB,MAAMC,EAAM,IAAIC,IAChB,IAAK,MAAMZ,KAAKU,EACf,IAAK,IAAI3B,EAAI,EAAGA,EAAIiB,EAAE5B,SAAUW,EAC/B4B,EAAInD,IAAIwC,EAAEa,GAAG9B,IAGf,OAAOV,MAAMyC,KAAKH,EACnB,CAEA7D,OACC,MAAMiE,EAA+B,OAApBnE,KAAKL,WAAuByE,OAAOC,UAAaC,KAAKC,MAAQvE,KAAKL,WACnF,IAAI6E,EAAY,EAEhB,IAAK,MAAM1B,KAAK9C,KAAKP,KAAKgF,YACrB3B,EAAEf,WAAWe,EAAEW,OAAOX,EAAEU,SAASS,GAAG,IAGzC,MAAMrB,EAAU,IAAI8B,eAEpB,OAAa,CACZ,MAAMC,EAAK3E,KAAKP,KAAKmF,uBACrB,IAAK5E,KAAKJ,YAAc,IAAMI,KAAKP,KAAKoF,0BAEvC,OADI7E,KAAKR,QAAQsF,QAAQC,IAAI,6CACtB,EAER,GAAI/E,KAAKN,YAAcM,KAAKN,WAAa8E,IAExC,OADIxE,KAAKR,QAAQsF,QAAQC,IAAI,qDACtB,EAER,GAAIZ,EAAUG,KAAKC,MAElB,OADIvE,KAAKR,QAAQsF,QAAQC,IAAI,sCACtB,EAMR,GAHI/E,KAAKR,QAAQsF,QAAQC,IAAIJ,EAAG3C,OAAS,eACzChC,MAAK0C,EAAgB1C,MAAK6D,EAAwBc,GAAK/B,GAEnD,EAAIA,EAAQpB,OAAQ,CACvB,MAAMwD,EAAIpC,EAAQqC,sBAClBD,EAAEE,QACFtC,EAAQe,QACJ3D,KAAKR,QAAQsF,QAAQC,IAAI,KAAOC,EACrC,KAAO,CACN,IAAK,IAAI7C,EAAI,EAAGA,EAAIwC,EAAG3C,SAAUG,EAAGnC,MAAKsC,EAASqC,EAAGxC,GAAGN,WACpD7B,KAAKR,QAAQsF,QAAQC,IAAI,WAC9B,CACD,CACD,EAeD,MAAMI,wBAAwB5F,OAE7B6F,GACAC,GAAO,IAAIX,eACXY,GAEAC,IAAU,EAEVf,GACAL,GAMArE,YAAYyC,GACXC,MAAMD,GACNvC,MAAKoF,EAAQ,IAAIpF,KAAKP,KAAKgF,aAC3B,IAAK,MAAM3B,KAAK9C,MAAKoF,EACpBtC,EAAE0C,aAAe,IAAIpE,aAAa0B,EAAEU,SAAShC,QAE9CxB,MAAKyF,GACN,CAEAxF,OACC,MAAO,kBACR,CAGAwF,KAECzF,MAAKsF,EAAW,GAEhB,IAAK,IAAII,EAAI,EAAGA,EAAI1F,MAAKoF,EAAMpD,SAAU0D,EAAG,CAC3C1F,MAAKsF,EAASK,KAAK,IAAIlE,MAAMzB,MAAKoF,EAAMpD,SAExC,IAAK,IAAIG,EAAI,EAAGA,EAAInC,MAAKoF,EAAMpD,SAAUG,EACpCA,EAAIuD,IACP1F,MAAKsF,EAASI,GAAGvD,GAAKnC,KAAKP,KAAKmG,mBAAmB5F,MAAKoF,EAAMjD,GAAInC,MAAKoF,EAAMM,IAGhF,CACD,CAGAG,GAAuB1D,EAAGuD,GACzB,OAAIvD,EAAIuD,EACA1F,MAAKsF,EAASI,GAAGvD,GAElBnC,MAAKsF,EAASnD,GAAGuD,EACzB,CAGAI,GAAchE,EAAOiE,GACpB,IAAK,MAAMC,KAAOhG,MAAKoF,EAAO,CAC7B,IAAKY,EAAIjE,UAAW,SACpB,MAAMkE,EAAOD,EAAIxC,SACX0C,EAAOF,EAAIR,aACXW,EAAOnG,MAAK6F,EAAuBE,EAAcC,EAAInE,SAE3D,IAAK,MAAMuB,KAAK+C,EACf,GAA8B,IAA1B/C,EAAEgD,oBAAN,CAEA,IAAK,IAAIC,EAAI,EAAGC,EAAIL,EAAIzE,OAAQ6E,EAAIC,IAAKD,EACpCH,EAAKjE,cAAcoE,KACvBL,EAAIvC,OAAOwC,EAAIhC,GAAGoC,IAEM,IAApBjD,EAAEC,eACL6C,EAAKtE,KAAKyE,EAAGvE,IAIf,GADAkE,EAAIrC,QACAuC,EAAKnE,UAAW,OAAO,CAXM,CAanC,CACA,OAAO,CACR,CAGAwE,KACC,IAAI1E,EAAQ,EACRL,EAAQ4C,OAAOC,UAEnB,IAAK,IAAIlC,EAAI,EAAGA,EAAInC,MAAKoF,EAAMpD,SAAUG,EAAG,CAC3C,MAAMW,EAAI9C,MAAKoF,EAAMjD,GACrB,IAAKW,EAAEf,UAAW,SAClB,MACMyE,EADI1D,EAAEU,SACAhC,OAASsB,EAAE0C,aAAajE,aAChCiF,EAAIhF,IACPA,EAAQgF,EACR3E,EAAQM,EAEV,CACA,OAAON,CACR,CAGA4E,GAAQ3E,GACP,GAAI9B,KAAKN,YAAcM,KAAKN,WAAaM,MAAKwE,IAE7C,OADIxE,KAAKR,QAAQsF,QAAQC,IAAI,qDACtB,EAER,GAAI/E,MAAKmE,EAAWG,KAAKC,MAExB,OADIvE,KAAKR,QAAQsF,QAAQC,IAAI,sCACtB,EAGR,GAAIjD,IAAU9B,KAAKP,KAAKiH,eAEvB,OADA1G,MAAKqF,EAAKsB,WAAW3G,KAAKP,OACnB,EAER,MAAMmH,EAAW5G,MAAKuF,EAAUvF,MAAKuG,IAA4BzE,EAC3D6C,EAAW3E,MAAKoF,EAAMwB,GACtBrD,EAAWoB,EAAGnB,SACdqD,EAAWlC,EAAGa,aACpB,IAAK,IAAIrD,EAAI,EAAGmE,EAAI/C,EAAE/B,OAAQW,EAAImE,IAAKnE,EACtC,IAAI0E,EAAG5E,cAAcE,GAArB,CAEA,GADAwC,EAAGlB,OAAOF,EAAEU,GAAG9B,IACXnC,MAAK8F,EAAchE,EAAO8E,IAAa5G,MAAKyG,EAAQ3E,EAAQ,GAAI,OAAO,EAC3E,IAAK,MAAMgB,KAAK9C,MAAKoF,EACpBtC,EAAE0C,aAAatD,OAAOJ,EAJE,CAQ1B,OADA6C,EAAGhB,SACI,CACR,CAGAzD,OACCF,MAAKmE,EAAkC,OAApBnE,KAAKL,WAAuByE,OAAOC,UAAaC,KAAKC,MAAQvE,KAAKL,WACrFK,MAAKwE,EAAa,EAElBxE,KAAKP,KAAKqH,oBACV,MAAMC,EAAI/G,MAAKyG,EAAQ,GAEvB,IAAK,IAAItE,EAAI,EAAGA,EAAInC,MAAKqF,EAAK7D,SAAUW,EAAG,CAC1C,MAAM6E,EAAIhH,MAAKqF,EAAK4B,IAAI9E,GACxB6E,EAAE9B,QACF8B,EAAEE,WAAW1B,aAAapD,WAC3B,CACA,OAAO2E,CACR,CAKAxG,gBACC,CASD4G,yCAAyCC,GACxCpH,MAAKuF,EAAU6B,CAChB,EAaD,MAAMC,2BAA2B9H,OAEhC6F,GACAC,GAAO,IAAIX,eAEX4C,GACAC,GACAC,GAAe,IAAIxD,IACnByD,GAAQ,GAERjD,GACAL,GAEArE,YAAYyC,GACXC,MAAMD,GACNvC,MAAKoF,EAAQ,IAAIpF,KAAKP,KAAKgF,aAC3B,IAAK,MAAM3B,KAAK9C,MAAKoF,EACpBtC,EAAE0C,aAAe,IAAIpE,aAAa0B,EAAEU,SAAShC,QAE9CxB,MAAKsH,EAAetH,KAAKP,KAAKgD,gBAC/B,CAEAxC,OACC,MAAO,+BACR,CAEAwG,GAAQ3E,EAAOyF,GACd,GAAIvH,KAAKN,YAAcM,KAAKN,WAAaM,MAAKwE,IAAc,OAAO,EACnE,GAAIxE,MAAKmE,EAAWG,KAAKC,MAAO,OAAO,EAEvC,GAAIzC,IAAU9B,KAAKP,KAAKiH,eAAgB,CACvC,MAAMgB,EAAM1H,KAAKP,KAAKkI,0BACtB,OAAID,EAAM1H,MAAKsH,IACdtH,MAAKsH,EAAeI,EACpB1H,MAAKqF,EAAKsB,WAAW3G,KAAKP,MACtBO,KAAKR,QAAQsF,QAAQC,IAAK,gBAAe/E,MAAKsH,MAC7CtH,KAAKJ,YAAc,IAAMI,KAAKP,KAAKoF,0BAG1C,CACA,MAAMF,EAAM3E,MAAKoF,EAAMtD,GACjB8F,EAAMjD,EAAGnB,SACTqD,EAAMlC,EAAGa,aAEf,IAAK,IAAIrD,EAAI,EAAGA,EAAIyF,EAAIpG,SAAUW,EACjC,KAAI0E,EAAG5E,cAAcE,KACrBwC,EAAGlB,OAAOmE,EAAI3D,GAAG9B,IACjBnC,MAAKuH,EAAYA,EAAWvH,MAAK6H,EAA6B/F,EAAO6C,GACjE3E,MAAKuH,EAAYvH,MAAKsH,IAA1B,CACA,GAAItH,MAAK8F,EAAchE,IAAU9B,MAAKyG,EAAQ3E,EAAQ,EAAG9B,MAAKuH,GAAY,OAAO,EACjF,IAAK,MAAMzE,KAAK9C,MAAKoF,EACpBtC,EAAE0C,aAAatD,OAAOJ,EAHiB,CAOzC,OADA6C,EAAGhB,SACI,CACR,CAGAmC,GAAchE,GACb,MAAM6C,EAAK3E,MAAKoF,EAAMtD,GAEtB,IAAK,IAAIK,EAAIL,EAAQ,EAAGK,EAAInC,MAAKoF,EAAMpD,SAAUG,EAAG,CACnD,MAAM2F,EAAS9H,MAAKoF,EAAMjD,GAC1BnC,MAAKyH,EAAQzH,KAAKP,KAAKmG,mBAAmBjB,EAAImD,GAE9C,IAAK,MAAM1E,KAAKpD,MAAKyH,EACpB,GAA8B,IAA1BrE,EAAEgD,qBACFpG,MAAK+H,EAAQD,EAAQ1E,EAAGtB,IACvBgG,EAAOtC,aAAazD,UAAW,OAAO,CAG7C,CACA,OAAO,CACR,CAGA8F,GAA6B/F,EAAO6C,GACnC,IAAIqD,EAAM,EACVhI,MAAKwH,EAAa7D,QAClB,IAAK,IAAIxB,EAAI,EAAGA,EAAIL,IAASK,EAAG,CAC/BnC,MAAKyH,EAAQzH,KAAKP,KAAKmG,mBAAmBjB,EAAI3E,MAAKoF,EAAMjD,IAEzD,IAAK,MAAMiB,KAAKpD,MAAKyH,EAChBzH,MAAKwH,EAAaS,IAAI7E,KACF,IAApBA,EAAEC,iBAAuB2E,EAC7BhI,MAAKwH,EAAa5G,IAAIwC,GAExB,CACA,OAAO4E,CACR,CAGAD,GAAQG,EAAI9E,EAAGtB,GACd,IAAIqG,GAAU,EAEd,MAAMP,EAAMM,EAAG1E,SACTqD,EAAMqB,EAAG1C,aAEf,IAAK,IAAIrD,EAAI,EAAGA,EAAIyF,EAAIpG,SAAUW,EAC7B0E,EAAG5E,cAAcE,KACrB+F,EAAGzE,OAAOmE,EAAI3D,GAAG9B,IAEO,IAApBiB,EAAEC,eAAuBrD,MAAKuH,EAAY,EAAIvH,MAAKsH,IACtDT,EAAGjF,KAAKO,EAAGL,GACXqG,GAAU,IAGZ,OAAOA,CACR,CAEAjI,OACCF,MAAKmE,EAAkC,OAApBnE,KAAKL,WAAuByE,OAAOC,UAAaC,KAAKC,MAAQvE,KAAKL,WACrFK,MAAKwE,EAAa,EAElBxE,KAAKP,KAAKqH,oBACV,MAAMC,EAAI/G,MAAKyG,EAAQ,EAAG,GACtBzG,KAAKR,SACJuH,EACHjC,QAAQC,IAAI,6CAER/E,KAAKN,YAAcM,KAAKN,WAAaM,MAAKwE,GAC7CM,QAAQC,IAAI,oDAET/E,MAAKmE,EAAWG,KAAKC,OACxBO,QAAQC,IAAI,uCAKf,IAAK,IAAI5C,EAAI,EAAGA,EAAInC,MAAKqF,EAAK7D,SAAUW,EAAG,CAC1C,MAAM6E,EAAIhH,MAAKqF,EAAK4B,IAAI9E,GACxB6E,EAAE9B,QACF8B,EAAEE,WAAW1B,aAAapD,WAC3B,CACA,OAAO2E,CACR,EAaD,MAAMqB,cAAc7I,OAEnB8B,eAAegH,GACd,OAAOC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMF,GAC9C,CAEAI,GAAY,GACZC,GAEA5I,YAAYyC,GAEX,GADAC,MAAMD,IACDvC,MAAK2I,IACT,MAAM,IAAIC,SAEZ,CAEA3I,OACC,MAAO,OACR,CAEA0I,KACK3I,KAAKR,QAAQsF,QAAQC,IAAI,0BAC7B,MAAM0C,EAAO,GAEb,IAAK,MAAM3E,KAAK9C,KAAKP,KAAKgF,YAAa,CACtC,GAA0B,IAAtB3B,EAAEU,SAAShC,OAAc,OAAO,EACpCxB,MAAKyI,EAAU9C,KAAK,IAAIyC,MAAMS,QAAQ/F,GACvC,CACA,IAAK,MAAMM,KAAKpD,KAAKP,KAAKyD,cACzB,GAAiB,IAAbE,EAAE5B,OAAc,CACnB,MAAMsB,EAAKM,EAAEa,GAAG,GACV6E,EAAK9I,MAAKyI,EAAUrF,EAAEa,GAAG,GAAGpC,SAElC,IAAK,IAAIM,EAAI,EAAGA,EAAI2G,EAAGtH,SAAUW,EAAG,CACnC,MAAM4G,EAAUjG,EAAEE,QAClBF,EAAEW,OAAOqF,EAAG7B,IAAI9E,GAAG6G,QAEK,IAApB5F,EAAEC,eACLoE,EAAK9B,KAAK,IAAIyC,MAAMa,WAAWH,EAAG7B,IAAI9E,KAEvCW,EAAEW,OAAOsF,EACV,CACD,KAAO,CACN,MAAMb,EAAO9E,EAAEa,GAAG,GACZiF,EAAO9F,EAAEa,GAAG,GACZkF,EAAOnJ,MAAKyI,EAAUrF,EAAEa,GAAG,GAAGpC,SAC9BuH,EAAOpJ,MAAKyI,EAAUrF,EAAEa,GAAG,GAAGpC,SAEpC,IAAK,IAAIM,EAAI,EAAGA,EAAIgH,EAAK3H,SAAUW,EAAG,CACrC,MAAMkH,EAAWnB,EAAGlF,QACpBkF,EAAGzE,OAAO0F,EAAKlC,IAAI9E,GAAG6G,QAEtB,IAAK,IAAItD,EAAI,EAAGA,EAAI0D,EAAK5H,SAAUkE,EAAG,CACrC,MAAM4D,EAAWJ,EAAGlG,QACpBkG,EAAGzF,OAAO2F,EAAKnC,IAAIvB,GAAGsD,QAEE,IAApB5F,EAAEC,eACLoE,EAAK9B,KAAK,IAAIyC,MAAMa,WAAWE,EAAKlC,IAAI9E,GAAIiH,EAAKnC,IAAIvB,KAEtDwD,EAAGzF,OAAO6F,EACX,CACApB,EAAGzE,OAAO4F,EACX,CACD,CAED,IAAK,MAAMP,KAAM9I,MAAKyI,EACrB,IAAK,MAAMnC,KAAKwC,EAAGS,SAAUjD,EAAEkD,kBAIhC,OAFAxJ,MAAK0I,EAAejB,EAChBzH,KAAKR,QAAQsF,QAAQC,IAAI,8BACtB,CACR,CAEA0E,GAASC,GACR,IAAK,IAAIvH,EAAIuH,EAAG1H,OAAQG,EAAI,IAAKA,EAAG,CACnC,MAAMuD,EAAO0C,MAAMuB,QAAQxH,GACrByH,EAAOF,EAAGvH,EAAI,GACpBuH,EAAGvH,EAAI,GAAKuH,EAAGhE,GACfgE,EAAGhE,GAASkE,CACb,CACA,OAAOF,CACR,CAEAxJ,OACC,MAAMiE,EAA+B,OAApBnE,KAAKL,WAAuByE,OAAOC,UAAaC,KAAKC,MAAQvE,KAAKL,WACnF,IAAI6E,EAAY,EAEhB,MAAMa,EAAQ,IAAIX,eACZmF,EAAQ,GACd,IAAK,IAAI1H,EAAI,EAAGA,EAAInC,MAAKyI,EAAUzG,OAAQG,IAC1C0H,EAAMlE,KAAKxD,GAGZ,IAAI2H,EAAM9J,KAAKP,KAAKoF,0BAEpB,OAAa,CACZ,GAAI7E,KAAKN,YAAcM,KAAKN,WAAa8E,IAAa,CACjDxE,KAAKR,QAAQsF,QAAQC,IAAI,oDAC7B,KACD,CACA,GAAIZ,EAAUG,KAAKC,MAAO,CACrBvE,KAAKR,QAAQsF,QAAQC,IAAI,qCAC7B,KACD,CAEA,IAAIgF,GAAW,EACf,IAAK,MAAM5H,KAAKnC,MAAKyJ,EAASI,GACzB7J,MAAKyI,EAAUtG,GAAG6H,4BACrBD,GAAW,GAGb,GAAKA,EAIE,CACN,IAAK,MAAME,KAAOjK,MAAKyI,EACtBwB,EAAIC,kBAEL,MAAM3G,EAAIvD,KAAKP,KAAKoF,0BACpB,GAAIiF,EAAMvG,IACTuG,EAAMvG,EACFvD,KAAKR,QAAQsF,QAAQC,IAAK,8BAA6BxB,KAC3D8B,EAAIsB,WAAW3G,KAAKP,MAChBO,KAAKJ,YAAc,GAAKkK,GAG3B,OAFI9J,KAAKR,QAAQsF,QAAQC,IAAI,4CAC7BM,EAAIH,SACG,CAGV,MAlBC,IAAK,MAAMiF,KAAOnK,MAAK0I,EACtByB,EAAIC,eAkBP,CAEA,OADA/E,EAAIH,SACG,CACR,EAID,CAEC,MAAM2D,EAELxH,eAAegH,GACd,OAAOC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMF,GAC9C,CAEAgC,GACAxI,GACAyI,GAAc,GACdf,SAAc,GAEdzJ,YAAYgD,GACX9C,MAAKqK,EAAOvH,EAEZ,IAAK,MAAMyH,KAAOzH,EAAEU,SACnBxD,KAAKuJ,SAAS5D,KAAK,IAAI6E,EAAOD,IAE/BvK,MAAKyK,EAAa5B,EAAQc,QAAQ3J,KAAKuJ,SAASvH,QACjD,CAEAyI,GAAa5I,GACZ,IAAK,MAAMyE,KAAKtG,KAAKuJ,SACpBjD,EAAEoE,WAAY,EAEf1K,KAAKuJ,SAAS1H,GAAO6I,WAAY,EACjC1K,MAAK6B,EAASA,CACf,CAEAqI,kBACClK,MAAKqK,EAAK5G,OAAOzD,KAAKuJ,SAASvJ,MAAK6B,GAAQmH,OAC7C,CAEA/B,IAAIpF,GACH,OAAO7B,KAAKuJ,SAAS1H,EACtB,CAEA8I,UACC,OAAO3K,KAAKuJ,QACb,CAGAS,0BACChK,MAAKsK,EAAYtI,OAAS,EAE1B,IAAIqG,EAAYjE,OAAOwG,kBACnBC,GAAY,EAEhB,IAAK,IAAI1I,EAAI,EAAGA,EAAInC,KAAKuJ,SAASvH,SAAUG,EAAG,CAC9C,MAAM2I,EAAQ9K,KAAKuJ,SAASpH,GAAG4I,WAE3B1C,GAAOyC,IACNzC,EAAMyC,IACTzC,EAAMyC,EACN9K,MAAKsK,EAAYtI,OAAS,EAC1B6I,GAAY,GAEb7K,MAAKsK,EAAY3E,KAAKxD,GAClBnC,MAAK6B,IAAWM,IACnB0I,GAAY,GAGf,CACA,OAAIA,GAAyC,IAA5B7K,MAAKsK,EAAYtI,SAGlChC,MAAKyK,EAAazK,MAAKsK,EAAYzB,EAAQc,QAAQ3J,MAAKsK,EAAYtI,WAC7D,EACR,CAEAR,OACC,OAAOxB,KAAKuJ,SAASvH,MACtB,EAGDoG,MAAMS,QAAUA,EAEhB,MAAMI,EAEL+B,GACAC,GACAC,QAGApL,YAAYkL,EAAOC,EAAS,MAC3BjL,KAAKkL,SAAW,EAEhBlL,MAAKgL,EAASA,EACdhL,MAAKgL,EAAOG,cAAcnL,MAC1BA,MAAKiL,EAAUA,EACM,OAAjBjL,MAAKiL,GACRjL,MAAKiL,EAAQE,cAAcnL,KAE7B,CAEAoL,UAAUC,GACT,OAAIA,IAASrL,MAAKgL,EAAgBhL,MAAKiL,EACnCI,IAASrL,MAAKiL,EAAgBjL,MAAKgL,EAChC,IACR,CAEAZ,gBACMpK,MAAKgL,EAAON,YAA+B,OAAjB1K,MAAKiL,GAAqBjL,MAAKiL,EAAQP,aAGtE1K,KAAKkL,UAAY,EAClB,EAGD9C,MAAMa,WAAaA,EAEnB,MAAMuB,EAELc,GAAW,GACX5C,GACAM,OACA0B,WAAY,EAEZ5K,YAAYkD,GACXhD,KAAKgJ,OAAShG,CACf,CAEAmI,cAAc/H,GACbpD,MAAKsL,EAAS3F,KAAKvC,EACpB,CAEAoG,kBACCxJ,MAAK0I,EAAe,IAAI1I,MAAKsL,GAC7BtL,MAAKsL,EAAe,IACrB,CAEAP,WACC,IAAIQ,EAAM,EACV,IAAK,MAAMnI,KAAKpD,MAAK0I,EAAc,CAClC,MAAMpC,EAAIlD,EAAEgI,UAAUpL,MACtBuL,GAAOnI,EAAE8H,SAAkB,OAAN5E,GAAcA,EAAEoE,UAAa,EAAI,EACvD,CACA,OAAOa,CACR,EAGDnD,MAAMoC,OAASA,CAEhB,CASA,MAAMgB,qBAAqBjM,OAE1B8B,SAAmBoK,EAAIC,GACtB,MAAMC,EAAK,IAAI3H,IAAIyH,GACnB,IAAK,MAAM3I,KAAK4I,EAAIC,EAAG/K,IAAIkC,GAC3B,OAAO6I,CACR,CAEAtK,SAAoBoK,EAAIC,GACvB,MAAMC,EAAK,IAAI3H,IAAIyH,GACnB,IAAK,MAAM3I,KAAK4I,EAAIC,EAAGC,OAAO9I,GAC9B,OAAO6I,CACR,CAEAtK,SAAuBmF,EAAGxB,GACzB,MAAM2G,EAAK,IAAI3H,IAAIwC,GAEnB,OADAmF,EAAG/K,IAAIoE,GACA2G,CACR,CAEAtK,SAAwBmF,EAAGxB,GAC1B,MAAM2G,EAAK,IAAI3H,IAAIwC,GAEnB,OADAmF,EAAGC,OAAO5G,GACH2G,CACR,CAEAnH,GACAL,GACA0H,GAEA/L,YAAYyC,EAAGuJ,GAAc,GAC5BtJ,MAAMD,GACFuJ,GACH9L,KAAKP,KAAKqH,mBAEZ,CAEA7G,OACC,MAAO,eACR,CAEA8L,GAAaC,EAAOlJ,EAAGyH,GACtB,MAAM0B,EAAQ,IAAIjI,IACZmC,EAAQ,IAAInC,IAElB,IAAK,MAAMkI,KAAMF,EAAO,CACvB,MAAMpC,EAAO5J,KAAKP,KAAKmG,mBAAmB9C,EAAGoJ,GAC7C,IAAK,MAAM9I,KAAKwG,EAAMzD,EAAGvF,IAAIwC,EAC9B,CACA,MAAM2F,EAAUjG,EAAEE,QAClBF,EAAEW,OAAO8G,GAET,IAAK,MAAMnH,KAAK+C,EACf,GAAwB,IAApB/C,EAAEC,cACL,IAAK,IAAIlB,EAAI,EAAGA,EAAIiB,EAAE5B,SAAUW,EAC/B8J,EAAMrL,IAAIwC,EAAEa,GAAG9B,IAMlB,OAFAW,EAAEW,OAAOsF,GACTkD,EAAML,OAAO9I,GACNmJ,CACR,CAEAE,GAAcC,EAAGtJ,EAAGyH,GACnB,MAAMpE,EAAK,IAAInC,IAEf,IAAK,MAAMkI,KAAME,EAAG,CACnB,MAAMxC,EAAO5J,KAAKP,KAAKmG,mBAAmB9C,EAAGoJ,GAC7C,IAAK,MAAM9I,KAAKwG,EAAMzD,EAAGvF,IAAIwC,EAC9B,CACA,MAAM2F,EAAUjG,EAAEE,QAClBF,EAAEW,OAAO8G,GAET,IAAK,MAAMnH,KAAK+C,EACf,GAAwB,IAApB/C,EAAEC,cAEL,OADAP,EAAEW,OAAOsF,IACF,EAIT,OADAjG,EAAEW,OAAOsF,IACF,CACR,CAEAsD,GAASC,EAAIC,EAAIzJ,EAAGyH,GACnB,IAAKvK,MAAKmM,EAAcG,EAAIxJ,EAAGyH,GAC9B,OAAO,EAER,MAAMyB,EAAQR,cAAagB,EAAYF,EAAIC,GAC3C,GAAIvM,MAAKmM,EAAcH,EAAOlJ,EAAGyH,GAChC,OAAO,EAER,MAAMkC,EAAKzM,MAAK+L,EAAaC,EAAOlJ,EAAGyH,GAEjCmC,EAAIlB,cAAamB,EAAaX,EAAOS,GACtCzM,MAAKmM,EAAcO,EAAG5J,EAAGyH,IACzBvK,KAAKR,QAAQsF,QAAQC,IAAI,OAG9B,IAAK,MAAM6H,KAAMH,EAChBG,EAAGjJ,QAIJ,OAFA2I,EAAKd,cAAaqB,EAAgBP,EAAIxJ,GACtCyJ,EAAKf,cAAamB,EAAaJ,EAAIE,GAC5BzM,MAAK8M,EAAaR,EAAIC,EAAIE,EAClC,CAEAM,GAAYT,EAAIC,EAAIzJ,EAAGS,GACtB,GAAe,IAAXA,EAAE/B,KACL,OAAO,EAER,MAAM+I,EAAMhH,EAAEyJ,SAASC,OAAOjK,MACvBkK,EAAKxI,eAAeyI,cAAcZ,GACzCzJ,EAAEW,OAAO8G,GAET,MAAMgB,EAAMvL,MAAKqM,EAASC,EAAIC,EAAIzJ,EAAGyH,GACrC,OAAIgB,GAAOvL,MAAK6L,EACRN,GAGRzI,EAAEa,QACFuJ,EAAGhI,QAEIlF,MAAK+M,EAAYT,EAAIC,EAAIzJ,EAAG0I,cAAa4B,EAAiB7J,EAAGgH,IACrE,CAEAuC,GAAaR,EAAIC,EAAIE,GAIpB,GAHIzM,KAAKR,QACRsF,QAAQC,IAAK,MAAKuH,EAAG9K,aAAa+K,EAAG/K,aAAaiL,EAAGjL,SAEjDxB,KAAKJ,YAAc,IAAMI,KAAKP,KAAKoF,0BAGvC,OAFI7E,KAAKR,QAAQsF,QAAQC,IAAI,4CAC7B/E,MAAK6L,GAAgB,GACd,EAER,GAAI7L,KAAKN,YAAcM,KAAKN,WAAaM,MAAKwE,IAG7C,OAFIxE,KAAKR,QAAQsF,QAAQC,IAAI,oDAC7B/E,MAAK6L,GAAgB,GACd,EAER,GAAI7L,MAAKmE,EAAWG,KAAKC,MAGxB,OAFIvE,KAAKR,QAAQsF,QAAQC,IAAI,qCAC7B/E,MAAK6L,GAAgB,GACd,EAGR,GAAgB,IAAZY,EAAGjL,KACN,OAAO,EAER,MAAMsB,EAAI2J,EAAGO,SAASC,OAAOjK,MACvBO,EAAI,IAAIS,IACd,IAAK,MAAMuG,KAAOzH,EAAEU,SACnBD,EAAE3C,IAAI2J,GAGP,MAAMgB,EAAMvL,MAAK+M,EAAYT,EAAIC,EAAIzJ,EAAGS,GACxC,OAAKgI,GAAOvL,MAAK6L,EACTN,GAERgB,EAAKf,cAAaqB,EAAgBN,EAAIzJ,GACtC2J,EAAKjB,cAAa4B,EAAiBX,EAAI3J,GAChC9C,MAAK8M,EAAaR,EAAIC,EAAIE,GAClC,CAEAvM,OACCF,MAAKmE,EAAqC,OAApBnE,KAAKL,WAAuByE,OAAOC,UAAaC,KAAKC,MAAQvE,KAAKL,WACxFK,MAAKwE,EAAgB,EACrBxE,MAAK6L,GAAgB,EAEiB,IAAlC7L,KAAKP,KAAK2G,qBACbpG,KAAKP,KAAKqH,oBAEX,MAAMuG,EAAa,IAAIrJ,IACjBsJ,EAAa,IAAItJ,IACvB,IAAK,MAAMlB,KAAK9C,KAAKP,KAAKgF,aACvB3B,EAAEf,UAAuBuL,EAAXD,GAAuBzM,IAAIkC,GAE5C,OAAO9C,MAAK8M,EAAa,IAAI9I,IAAOqJ,EAAUC,EAC/C,EAYD,MAAMC,uBAAuBhO,OAE5B8B,SAAmBoK,EAAIC,GACtB,MAAMC,EAAK,IAAI3H,IAAIyH,GACnB,IAAK,MAAM3I,KAAK4I,EAAIC,EAAG/K,IAAIkC,GAC3B,OAAO6I,CACR,CAEAtK,SAAoBoK,EAAIC,GACvB,MAAMC,EAAK,IAAI3H,IAAIyH,GACnB,IAAK,MAAM3I,KAAK4I,EAAIC,EAAGC,OAAO9I,GAC9B,OAAO6I,CACR,CAEAtK,SAAuBmF,EAAGxB,GACzB,MAAM2G,EAAK,IAAI3H,IAAIwC,GAEnB,OADAmF,EAAG/K,IAAIoE,GACA2G,CACR,CAEAtK,SAAwBmF,EAAGxB,GAC1B,MAAM2G,EAAK,IAAI3H,IAAIwC,GAEnB,OADAmF,EAAGC,OAAO5G,GACH2G,CACR,CAEAnH,GACAL,GACA0H,GAEA/L,YAAYyC,EAAGuJ,GAAc,GAC5BtJ,MAAMD,GACFuJ,GACH9L,KAAKP,KAAKqH,mBAEZ,CAEA7G,OACC,MAAO,kBACR,CAEA8L,GAAaC,EAAOlJ,EAAGyH,GACtB,MAAM0B,EAAQ,IAAIjI,IACZmC,EAAQ,IAAInC,IAElB,IAAK,MAAMkI,KAAMF,EAAO,CACvB,MAAMpC,EAAO5J,KAAKP,KAAKmG,mBAAmB9C,EAAGoJ,GAC7C,IAAK,MAAM9I,KAAKwG,EAAMzD,EAAGvF,IAAIwC,EAC9B,CACA,MAAM2F,EAAUjG,EAAEE,QAClBF,EAAEW,OAAO8G,GAET,IAAK,MAAMnH,KAAK+C,EACf,GAAwB,IAApB/C,EAAEC,cACL,IAAK,IAAIlB,EAAI,EAAGA,EAAIiB,EAAE5B,SAAUW,EAC/B8J,EAAMrL,IAAIwC,EAAEa,GAAG9B,IAMlB,OAFAW,EAAEW,OAAOsF,GACTkD,EAAML,OAAO9I,GACNmJ,CACR,CAEAE,GAAcC,EAAGtJ,EAAGyH,GACnB,MAAMpE,EAAK,IAAInC,IAEf,IAAK,MAAMkI,KAAME,EAAG,CACnB,MAAMxC,EAAO5J,KAAKP,KAAKmG,mBAAmB9C,EAAGoJ,GAC7C,IAAK,MAAM9I,KAAKwG,EAAMzD,EAAGvF,IAAIwC,EAC9B,CACA,MAAM2F,EAAUjG,EAAEE,QAClBF,EAAEW,OAAO8G,GAET,IAAK,MAAMnH,KAAK+C,EACf,GAAwB,IAApB/C,EAAEC,cAEL,OADAP,EAAEW,OAAOsF,IACF,EAIT,OADAjG,EAAEW,OAAOsF,IACF,CACR,CAEAsD,GAASC,EAAIC,EAAIzJ,GAChB,IAAK9C,MAAKmM,EAAcG,EAAIxJ,EAAGA,EAAEE,SAChC,OAAO,EAER,MAAMgJ,EAAQuB,gBAAef,EAAYF,EAAIC,GAC7C,GAAIvM,MAAKmM,EAAcH,EAAOlJ,EAAGA,EAAEE,SAClC,OAAO,EAER,MAAMyJ,EAAKzM,MAAK+L,EAAaC,EAAOlJ,EAAGA,EAAEE,SAIzC,OAFAuJ,EAAKgB,gBAAeZ,EAAaJ,EAAIE,GACrCH,EAAKiB,gBAAeV,EAAgBP,EAAIxJ,GACjC9C,MAAK8M,EAAaR,EAAIC,EAAIE,EAClC,CAEAM,GAAYT,EAAIC,EAAIzJ,GACnB,IAAK,MAAMyH,KAAOzH,EAAEU,SAAU,CAC7B,MAAMgD,EAAI9B,eAAeyI,cAAcZ,GACvCzJ,EAAEW,OAAO8G,GAET,MAAMgB,EAAMvL,MAAKqM,EAASC,EAAIC,EAAIzJ,GAClC,GAAIyI,GAAOvL,MAAK6L,EACf,OAAON,EAGRzI,EAAEa,QACF6C,EAAEtB,OACH,CACA,OAAO,CACR,CAEA4H,GAAaR,EAAIC,EAAIE,GAIpB,IAHAF,EAAK,IAAIvI,IAAIuI,GACbE,EAAK,IAAIzI,IAAIyI,KAEA,CAIZ,GAHIzM,KAAKR,QACRsF,QAAQC,IAAK,MAAKuH,EAAG9K,aAAa+K,EAAG/K,aAAaiL,EAAGjL,SAEjDxB,KAAKJ,YAAc,IAAMI,KAAKP,KAAKoF,0BAGvC,OAFI7E,KAAKR,QAAQsF,QAAQC,IAAI,4CAC7B/E,MAAK6L,GAAgB,GACd,EAER,GAAI7L,KAAKN,YAAcM,KAAKN,WAAaM,MAAKwE,IAG7C,OAFIxE,KAAKR,QAAQsF,QAAQC,IAAI,oDAC7B/E,MAAK6L,GAAgB,GACd,EAER,GAAI7L,MAAKmE,EAAWG,KAAKC,MAGxB,OAFIvE,KAAKR,QAAQsF,QAAQC,IAAI,qCAC7B/E,MAAK6L,GAAgB,GACd,EAGR,GAAgB,IAAZY,EAAGjL,KACN,OAAO,EAER,MAAMsB,EAAM2J,EAAGO,SAASC,OAAOjK,MACzBuI,EAAMvL,MAAK+M,EAAYT,EAAIC,EAAIzJ,GAErC,IAAKyI,GAAOvL,MAAK6L,EAChB,OAAON,EAERgB,EAAG3L,IAAIkC,GACP2J,EAAGb,OAAO9I,EACX,CACD,CAEA5C,OACCF,MAAKmE,EAAqC,OAApBnE,KAAKL,WAAuByE,OAAOC,UAAaC,KAAKC,MAAQvE,KAAKL,WACxFK,MAAKwE,EAAgB,EACrBxE,MAAK6L,GAAgB,EAEiB,IAAlC7L,KAAKP,KAAK2G,qBACbpG,KAAKP,KAAKqH,oBAEX,MAAMuG,EAAa,IAAIrJ,IACjBsJ,EAAa,IAAItJ,IACvB,IAAK,MAAMlB,KAAK9C,KAAKP,KAAKgF,aACvB3B,EAAEf,UAAuBuL,EAAXD,GAAuBzM,IAAIkC,GAE5C,OAAO9C,MAAK8M,EAAa,IAAI9I,IAAOqJ,EAAUC,EAC/C,EAaD,MAAME,kBAAkBjO,OAEvBkO,GAAuB,IAAIzJ,IAC3B0J,GAAuB,IAAI1J,IAC3B2J,GAAuB,GACvBC,GAAuB,GAEvBC,IAAY,EAEZ/N,YAAYyC,GACXC,MAAMD,GACN,IAAK,MAAMa,KAAKpD,KAAKP,KAAKyD,cACzBlD,MAAK2N,EAAOhI,KAAK,IAAI6H,UAAUM,SAAS1K,IACxCpD,MAAK4N,EAAqBjI,KAAK,KAEjC,CAEA1F,OACC,MAAO,sBACR,CAEA8N,GAAwB3K,GACvB,MAAMvB,EAAQuB,EAAEvB,QAKhB,OAHyC,OAArC7B,MAAK4N,EAAqB/L,KAC7B7B,MAAK4N,EAAqB/L,GAASuB,EAAE4K,aAE/BhO,MAAK4N,EAAqB/L,EAClC,CAEAoM,GAAQC,GACHlO,KAAKR,QAAQsF,QAAQC,IAAI,UAE7B,MAAMoJ,EAAa,IAAIzJ,eACvB,IAAI7B,EAAU,EAEd,IAAK,IAAIV,EAAI,EAAGA,EAAI+L,EAAG1M,SAAUW,EAAG,CACnC,MAAMW,EAAQoL,EAAGjK,GAAG9B,GACdY,EAAQD,EAAEE,QACVC,EAAQH,EAAEI,cAEhB,IAAIC,EAAS,EACb,IAAK,MAAMC,KAAKH,EACfE,GAAW,EAAIC,EAAEC,cAElBC,EAAK,IAAK,MAAMC,KAAKT,EAAEU,SAAU,CAChC,GAAIT,IAAUQ,EAAG,SAEjB,GADAT,EAAEW,OAAOF,GACgB,IAArB2K,EAAG7K,cAAqB,SAE5B,IAAIK,EAAOP,EACX,IAAK,MAAMmD,KAAKrD,EAEf,GADAS,GAAS,EAAI4C,EAAEjD,cACXK,EAAOb,EAAS,SAASS,EAE1BI,EAAOb,GACVA,EAAUa,EACVyK,EAAWxK,QACXwK,EAAWvK,YAAYd,EAAGS,IACJ,IAAZV,GACVsL,EAAWvK,YAAYd,EAAGS,EAE5B,CACAT,EAAEW,OAAOV,EACV,CACA,GAAIoL,EAAW3M,OAAS,EAAG,CAC1B,MAAMwD,EAAIhF,MAAK6N,EAAYM,EAAWlJ,sBAAwBkJ,EAAWlH,IAAI,GAG7E,OAFAjC,EAAEE,QACElF,KAAKR,QAAQsF,QAAQC,IAAI,KAAOC,IAC7B,CACR,CACA,OAAO,CACR,CAEAoJ,GAAQC,EAAMC,GACb,MAAM1E,EAAO,GACb,IAAIE,EAAMuE,EAEV,OAAa,CACZvE,EAAMA,EAAIyE,SACV3E,EAAK5H,OAAS,EACd8H,EAAI0E,eAAe5E,GACnBE,EAAInG,QAEJ,IAAK,MAAM2C,KAAKgI,EACftO,MAAK0N,EAAU9B,OAAOtF,GACtBtG,MAAKyN,EAAY7B,OAAOtF,GAGzB,GAAIgI,EAAQ1C,OAAO9B,GAClB,MAGD,GADA9J,MAAK0N,EAAU9M,IAAIkJ,GACE,OAAjBA,EAAIyE,WAAsBvO,MAAKiO,EAAQnE,EAAIyE,SAASE,aACvD,KAEF,CACD,CAEAC,GAAQL,GACHrO,KAAKR,QAAQsF,QAAQC,IAAI,UAC7B/E,MAAKyN,EAAY7M,IAAIyN,GAErB,IAAK,MAAMjL,KAAKpD,MAAK+N,EAAwBM,EAAKI,aAAc,CAC/D,MAAME,EAAM3O,MAAK2N,EAAOvK,EAAEvB,SAErB7B,MAAKyN,EAAYxF,IAAI0G,IAAS3O,MAAK0N,EAAUzF,IAAI0G,KACrDA,EAAIhL,QACJ0K,EAAKzN,IAAI+N,GACT3O,MAAK0N,EAAU9M,IAAI+N,GAErB,CACD,CAEAC,IAAKN,GACAtO,KAAKR,QAAQsF,QAAQC,IAAI,OAC7B,MAAMZ,EAA+B,OAApBnE,KAAKL,WAAuByE,OAAOC,UAAaC,KAAKC,MAAQvE,KAAKL,WACnF,IAAI6E,EAAY,EAEhBxE,MAAKyN,EAAY9J,QACjB3D,MAAK0N,EAAU/J,QACf,IAAK,MAAM2C,KAAKgI,EACftO,MAAK0N,EAAU9M,IAAI0F,GAGpB,KAAOgI,EAAQ9M,MAAQxB,MAAK0N,EAAUlM,MAAM,CAC3C,IAAKxB,KAAKJ,YAAc,IAAMI,KAAKP,KAAKoF,0BAEvC,OADI7E,KAAKR,QAAQsF,QAAQC,IAAI,6CACtB,EAER,GAAI/E,KAAKN,YAAcM,KAAKN,WAAa8E,IAExC,OADIxE,KAAKR,QAAQsF,QAAQC,IAAI,qDACtB,EAER,GAAIZ,EAAUG,KAAKC,MAElB,OADIvE,KAAKR,QAAQsF,QAAQC,IAAI,sCACtB,EAGR,MAAMsJ,EAAOrO,MAAK0N,EAAUV,SAASC,OAAOjK,MAC5ChD,MAAK0N,EAAU9B,OAAOyC,GAElBrO,MAAKiO,EAAQI,EAAKI,aAChBH,EAAQ1C,OAAOyC,KACG,OAAlBA,EAAKE,UAAqBvO,MAAKiO,EAAQI,EAAKE,SAASE,aACxDzO,MAAKoO,EAAQC,EAAMC,GAEnBtO,MAAK0O,EAAQL,IAIfrO,MAAK0O,EAAQL,EAEf,CACA,OAAO,CACR,CAEAnO,OACC,MAAMwH,EAAU1H,KAAKP,KAAKmF,uBACpB0J,EAAU,IAAItK,IAEpB,IAAK,MAAMZ,KAAKsE,EAAK,CACpB,MAAMiH,EAAM3O,MAAK2N,EAAOvK,EAAEvB,SAC1ByM,EAAQ1N,IAAI+N,EACb,CACA,QAAI3O,MAAK4O,GAAKN,IAGY,IAAnBA,EAAQtM,MAChB,CAOA6M,cAAczH,GACbpH,MAAK6N,EAAYzG,CAClB,EAID,CAEC,MAAM0G,EAELgB,IAAY,GACZP,IACAQ,IAEAjP,YAAYiP,GACX/O,MAAK+O,GAAOA,CACb,CAEAnO,IAAIoO,GACHA,GAAGT,GAAUvO,KACbA,MAAK8O,GAAUnJ,KAAKqJ,EACrB,CAEArL,QACC,IAAK,MAAMqL,KAAMhP,MAAK8O,GACrBE,GAAGT,GAAU,KAEdvO,MAAK8O,GAAU9M,OAAS,CACzB,CAEAwM,eAAeS,GACdA,EAAItJ,KAAK3F,MAET,IAAK,MAAMgP,KAAMhP,MAAK8O,GACrBE,EAAGR,eAAeS,EAEpB,CAEAR,YACC,OAAOzO,MAAK+O,EACb,CAEAR,SACC,OAAOvO,MAAKuO,EACb,EAGDf,UAAUM,SAAWA,CAEtB,CAUA,MAAMoB,sBAAsB3P,OAE3B+C,GACA6M,IAEAtB,IAAY,EAEZ/N,YAAYyC,GACXC,MAAMD,GACNvC,MAAKsC,EAAW,IAAIb,MAAMzB,KAAKP,KAAKgD,kBACpCzC,MAAKsC,EAASZ,KAAK,EACpB,CAEAzB,OACC,MAAO,gBACR,CAEAe,gBACC,OAAO,CACR,CAEA0B,GAAgB0M,EAAWxM,GAC1B,IAAIC,EAAU,EAEd,IAAK,MAAMC,KAAKsM,EAAW,CAC1B,MAAMrM,EAAQD,EAAEE,QACVC,EAAQH,EAAEI,cAEhB,IAAIC,EAAS,EACb,IAAK,MAAMC,KAAKH,EACfE,IAAW,EAAIC,EAAEiM,sBAAwBrP,MAAKsC,EAASc,EAAEvB,SAE1DyB,EAAK,IAAK,MAAMC,KAAKT,EAAEU,SAAU,CAChC,GAAIT,IAAUQ,EAAG,SACjBT,EAAEW,OAAOF,GACT,IAAIG,EAAOP,EACX,IAAK,MAAMC,KAAKH,EAGf,GAFAS,IAAS,EAAIN,EAAEiM,sBAAwBrP,MAAKsC,EAASc,EAAEvB,SAEnD6B,EAAOb,EACV,SAASS,EAGPI,EAAOb,GACVA,EAAUa,EACVd,EAAQe,QACRf,EAAQgB,YAAYd,EAAGS,IACD,IAAZV,GACVD,EAAQgB,YAAYd,EAAGS,EAEzB,CACAT,EAAEW,OAAOV,EACV,CACD,CAEAuM,IAAoBC,GACnB,MAAMC,EAAM,IAAIxL,IAChB,IAAK,IAAI7B,EAAI,EAAGA,EAAIoN,EAAUvN,SAAUG,EAAG,CAC1C,MAAMiB,EAAImM,EAAUpN,GACpB,IAAK,IAAIuD,EAAI,EAAGA,EAAItC,EAAE5B,SAAUkE,EAAG8J,EAAI5O,IAAIwC,EAAEa,GAAGyB,GACjD,CACA,OAAOjE,MAAMyC,KAAKsL,EACnB,CAEAtP,OACC,MAAMiE,EAA+B,OAApBnE,KAAKL,WAAuByE,OAAOC,UAAaC,KAAKC,MAAQvE,KAAKL,WACnF,IAAI6E,EAAY,EAEhB,IAAK,MAAM1B,KAAK9C,KAAKP,KAAKgF,YACrB3B,EAAEf,WAAWe,EAAEW,OAAOX,EAAEU,SAASS,GAAG,IAGzC,MAAMwL,EAAUzP,KAAKP,KAAKiQ,0BACpB9M,EAAU,IAAI8B,eAEdW,EAAM,IAAIX,eAEhB,OAAa,CACZ,MAAOC,EAAIgL,GAAO3P,KAAKP,KAAKmQ,yCAC5B,GAAwB,OAApB5P,KAAKJ,YAAuBI,KAAKJ,YAAc+P,EAElD,OADI3P,KAAKR,QAAQsF,QAAQC,IAAI,6CACtB,EAER,GAAI/E,KAAKN,YAAcM,KAAKN,WAAa8E,IAAa,CACjDxE,KAAKR,QAAQsF,QAAQC,IAAI,oDAC7B,KACD,CACA,GAAIZ,EAAUG,KAAKC,MAAO,CACrBvE,KAAKR,QAAQsF,QAAQC,IAAI,qCAC7B,KACD,CAIA,GAFI/E,KAAKR,QAAQsF,QAAQC,IAAI,8BAAgC4K,GAEzD3P,MAAKmP,GAAcQ,IACtBtK,EAAIsB,WAAW3G,KAAKP,MACpBO,MAAKmP,GAAcQ,EACf3O,cAAcqE,EAAKrF,MAAKmP,KAC3B,OAAO,EAMT,GAFAnP,MAAK0C,EAAgB1C,MAAKsP,GAAoB3K,GAAK/B,GAE/C,EAAIA,EAAQpB,OAAQ,CACvB,MAAMwD,EAAIhF,MAAK6N,EAAYjL,EAAQqC,sBAAwBrC,EAAQqE,IAAI,GACvEjC,EAAEE,QACFtC,EAAQe,QACJ3D,KAAKR,QAAQsF,QAAQC,IAAI,KAAOC,EACrC,KAAO,CACN,IAAK,IAAI7C,EAAI,EAAGA,EAAIwC,EAAG3C,SAAUG,EAAGnC,MAAKsC,EAASqC,EAAGxC,GAAGN,WACpD7B,KAAKR,QAAQsF,QAAQC,IAAI,WAC9B,CACD,CACA,OAAwB,OAApB/E,KAAKJ,YAAuB6P,EAAMzP,KAAKP,KAAKiQ,yBAEjD,CAOAb,cAAczH,GACbpH,MAAK6N,EAAYzG,CAClB,EAcD,MAAMyI,6BAA6BtQ,OAElC8B,gBAAmB,EACnBA,iBAAmB,EAEnB+D,GACAC,GAAO,IAAIX,eACXY,GAEAwK,IAAe,EAEftL,GACAL,GACAoB,IAAU,EACVwK,IAAU,EAEVC,IACAC,IACAzI,GACA0I,KAAoB,EAOpBpQ,YAAYyC,EAAGmN,EAA0B,MACxClN,MAAMD,GACNvC,MAAKoF,EAAQ,IAAIpF,KAAKP,KAAKgF,aAC3BzE,MAAKgQ,GAAY,IAAIvO,MAAMzB,KAAKP,KAAKiH,gBACrC1G,MAAKyF,IACLzF,MAAKwH,EAAe,IAAI/F,MAAMzB,KAAKP,KAAKgD,kBAExC,MAAMmH,EAAO,GACb,IAAK,MAAMxG,KAAKpD,KAAKP,KAAKyD,cACR,IAAbE,EAAE5B,QAAcoI,EAAKjE,KAAKvC,GAE/BpD,MAAKiQ,GAAa,IAAIrG,GAClB8F,IACH1P,MAAK8P,GAAeJ,EAEtB,CAEAzP,OACC,MAAO,iCACR,CAGAwF,KACCzF,MAAKsF,EAAW,GAEhB,IAAK,IAAII,EAAI,EAAGA,EAAI1F,MAAKoF,EAAMpD,SAAU0D,EAAG,CAC3C1F,MAAKsF,EAASK,KAAK,IAAIlE,MAAMzB,MAAKoF,EAAMpD,SAExC,IAAK,IAAIG,EAAI,EAAGA,EAAInC,MAAKoF,EAAMpD,OAAQG,IAClCA,EAAIuD,IACP1F,MAAKsF,EAASI,GAAGvD,GAAKnC,KAAKP,KAAKmG,mBAAmB5F,MAAKoF,EAAMjD,GAAInC,MAAKoF,EAAMM,IAGhF,CACD,CAGAG,GAAuBsK,EAAUC,GAChC,OAAID,EAAWC,EACPpQ,MAAKsF,EAAS8K,GAAUD,GAEzBnQ,MAAKsF,EAAS6K,GAAUC,EAChC,CAGAC,MACC,IAAK,MAAMjN,KAAKpD,MAAKiQ,GAAY,CAChC,MAAMnN,EAASM,EAAEa,GAAG,GACdqM,EAASxN,EAAEE,QACXO,EAAST,EAAEU,SACXqD,EAAS/D,EAAE0C,aAEjB,IAAK,IAAIrD,EAAI,EAAGmE,EAAI/C,EAAE/B,OAAQW,EAAImE,IAAKnE,EACtCW,EAAEW,OAAOF,EAAEU,GAAG9B,IACViB,EAAEiM,sBAAwBrP,MAAK8P,IAClCjJ,EAAGjF,KAAKO,GAAI,GAId,GADAW,EAAEW,OAAO6M,GACLzJ,EAAG9E,UAAW,OAAO,CAC1B,CACA,OAAO,CACR,CAGAwO,IAAyBzO,EAAO0O,EAAIpN,GACnC,MAAMqN,EAAMD,EAAGhN,SACTkN,EAAMF,EAAGhL,aAEf,IAAK,IAAIrD,EAAI,EAAGmE,EAAImK,EAAGjP,OAAQW,EAAImE,IAAKnE,EACnCuO,EAAIzO,cAAcE,KACtBqO,EAAG/M,OAAOgN,EAAGxM,GAAG9B,IACZiB,EAAEiM,sBAAwBrP,MAAK8P,IAClCY,EAAI9O,KAAKO,EAAGL,IAId,OADA0O,EAAG7M,SACK+M,EAAI3O,SACb,CAGA4O,IAA0B7O,EAAO0O,EAAIpN,GACpC,MAAMqN,EAAMD,EAAGhN,SACTkN,EAAMF,EAAGhL,aACToL,EAAM,KAEZ,IAAK,IAAIzO,EAAI,EAAGmE,EAAIlD,EAAE5B,OAAQW,EAAImE,IAAKnE,EAAG,CACzC,MAAMW,EAAIM,EAAEa,GAAG9B,GACf,GAAIW,EAAEf,WAAae,IAAM0N,EAAI,CAC5BI,EAAK9N,EACL,KACD,CACD,CACA,MAAM+N,EAAMD,EAAGpN,SACTsN,EAAMF,EAAGpL,aACfuL,EAAQ,IAAK,IAAI5O,EAAI,EAAG6O,EAAKP,EAAGjP,OAAQW,EAAI6O,IAAM7O,EACjD,IAAIuO,EAAIzO,cAAcE,GAAtB,CACAqO,EAAG/M,OAAOgN,EAAGxM,GAAG9B,IAChB,IAAK,IAAIuD,EAAI,EAAGuL,EAAKJ,EAAGrP,OAAQkE,EAAIuL,IAAMvL,EAAG,CAC5C,GAAIoL,EAAI7O,cAAcyD,GAAI,SAC1BkL,EAAGnN,OAAOoN,EAAG5M,GAAGyB,IAEhB,GADUtC,EAAEiM,qBACJrP,MAAK8P,GAAc,SAASiB,CACrC,CACAL,EAAI9O,KAAKO,EAAGL,EARc,CAY3B,OAFA8O,EAAGjN,QACH6M,EAAG7M,SACK+M,EAAI3O,SACb,CAGAmP,IAA0BpP,EAAO0O,EAAIpN,GACpC,MAAMqN,EAAMD,EAAGhN,SACTkN,EAAMF,EAAGhL,aAEf,IAAIoL,EAAK,KACLO,EAAK,KAET,IAAI,IAAIhP,EAAI,EAAGmE,EAAIlD,EAAE5B,OAAQW,EAAImE,IAAKnE,EAAG,CACxC,IAAIW,EAAIM,EAAEa,GAAG9B,GACb,GAAIW,EAAEf,WAAae,IAAM0N,EAAI,CAC5B,GAAW,OAAPI,EAEG,CACNO,EAAKrO,EACL,KACD,CAJC8N,EAAK9N,CAKP,CACD,CACA,MAAM+N,EAAMD,EAAGpN,SACT4N,EAAMD,EAAG3N,SACTsN,EAAMF,EAAGpL,aACT6L,EAAMF,EAAG3L,aAEfuL,EAAQ,IAAI,IAAI5O,EAAI,EAAG6O,EAAKP,EAAGjP,OAAQW,EAAI6O,IAAM7O,EAChD,IAAIuO,EAAIzO,cAAcE,GAAtB,CACAqO,EAAG/M,OAAOgN,EAAGxM,GAAG9B,IAChB,IAAK,IAAIuD,EAAI,EAAGuL,EAAKJ,EAAGrP,OAAQkE,EAAIuL,IAAMvL,EACzC,IAAIoL,EAAI7O,cAAcyD,GAAtB,CACAkL,EAAGnN,OAAOoN,EAAG5M,GAAGyB,IAChB,IAAK,IAAIW,EAAI,EAAGiL,EAAKF,EAAG5P,OAAQ6E,EAAIiL,IAAMjL,EAAG,CAC5C,GAAIgL,EAAIpP,cAAcoE,GAAI,SAC1B8K,EAAG1N,OAAO2N,EAAGnN,GAAGoC,IAEhB,GADUjD,EAAEiM,qBACJrP,MAAK8P,GAAc,SAASiB,CACrC,CAP0B,CAS3BL,EAAI9O,KAAKO,EAAGL,EAZc,CAiB3B,OAHAqP,EAAGxN,QACHiN,EAAGjN,QACH6M,EAAG7M,SACK+M,EAAI3O,SACb,CAGAwP,IAA0BzP,EAAO0O,EAAIpN,EAAGoO,GACvC,MAAMf,EAAMD,EAAGhN,SACTkN,EAAMF,EAAGhL,aACTiM,EAAM,IAAIhQ,MAAM+P,EAAY,GAClC,IAAI9L,EAAI,EAER,IAAK,IAAIvD,EAAI,EAAGmE,EAAIlD,EAAE5B,OAAQW,EAAImE,IAAKnE,EAAG,CACzC,MAAMW,EAAIM,EAAEa,GAAG9B,GACZW,EAAEf,WAAae,IAAM0N,IAAIiB,EAAI/L,KAAO5C,EACxC,CACA,MAAM4O,EAAU,IAAIjQ,MAAMgQ,EAAIzP,QAE9B+O,EAAQ,IAAK,IAAI5O,EAAI,EAAGmE,EAAImK,EAAGjP,OAAQW,EAAImE,IAAKnE,EAC/C,IAAIuO,EAAIzO,cAAcE,GAAtB,CACAqO,EAAG/M,OAAOgN,EAAGxM,GAAG9B,IAChBuP,EAAQhQ,KAAK,GAEbiQ,EAAS,OAAa,CACrB,IAAIC,GAAS,EACb,IAAK,IAAIvL,EAAI,EAAGA,EAAIoL,EAAIzP,SAAUqE,EAAG,CACpC,MAAM+K,EAAMK,EAAIpL,GAAG7C,SAEnB,GADYiO,EAAIpL,GAAGb,aACXvD,cAAcyP,EAAQrL,IAAK,CAClCuL,GAAS,EACT,KACD,CACAH,EAAIpL,GAAG5C,OAAO2N,EAAGnN,GAAGyN,EAAQrL,IAC7B,CACA,IAAKuL,EAAQ,CAEZ,GADUxO,EAAEiM,qBACJrP,MAAK8P,GAAc,SAASiB,CACrC,CACA,IAAK,IAAI1K,EAAI,EAAGA,EAAIoL,EAAIzP,SACvB0P,EAAQrL,OACJqL,EAAQrL,GAAKoL,EAAIpL,GAAG7C,SAAShC,WAFA6E,EAIjC,GADAqL,EAAQrL,GAAK,EACTA,IAAMoL,EAAIzP,OAAS,EAAG,MAAM2P,CAElC,CACAjB,EAAI9O,KAAKO,EAAGL,EA1Bc,CA4B3B,IAAK,MAAMgB,KAAK2O,EAAK3O,EAAEa,QAEvB,OADA6M,EAAG7M,SACK+M,EAAI3O,SACb,CAGA+D,GAAchE,EAAOD,GACpB,IAAK,MAAMmE,KAAQhG,MAAKoF,EAAO,CAC9B,IAAKY,EAAIjE,UAAW,SAEpB,MAAMoE,EAAKnG,MAAK6F,EAAuBhE,EAAOmE,EAAInE,SAElD,IAAK,MAAMuB,KAAK+C,EAAI,CACnB,MAAMqL,EAAYpO,EAAEgD,oBACpB,GAAkB,IAAdoL,GACH,IAAKxR,MAAKuQ,GAAyBzO,EAAOkE,EAAK5C,GAAI,OAAO,OACpD,GAAIpD,MAAKkQ,GACf,GAAkB,IAAdsB,GACH,IAAIxR,MAAK2Q,GAA0B7O,EAAOkE,EAAK5C,GAAI,OAAO,OACpD,GAAiB,IAAdoO,GACT,IAAIxR,MAAKkR,GAA0BpP,EAAOkE,EAAK5C,GAAI,OAAO,OACpD,GAAGoO,EAAY,IACjBxR,MAAKuR,GAA0BzP,EAAOkE,EAAK5C,EAAGoO,GAAY,OAAO,CAGxE,CACD,CACA,OAAO,CACR,CAGAK,IAA0BlN,GACzB3E,MAAKwH,EAAa9F,MAAK,GAEvB,IAAK,IAAIS,EAAI,EAAGA,EAAInC,MAAKoF,EAAMpD,SAAUG,EAAG,CAC3C,MAAMqO,EAAKxQ,MAAKoF,EAAMjD,GACtB,GAAIqO,IAAO7L,GAAM6L,EAAGzO,UAAW,SAC/B,MAAMoE,EAAKnG,MAAK6F,EAAuBlB,EAAG9C,QAASM,GAEnD,IAAK,MAAMiB,KAAK+C,EAAI,CACnB,GAAInG,MAAKwH,EAAapE,EAAEvB,SAAU,SAClC,MAAM2E,EAAIpD,EAAEiM,qBACZ,GAAI7I,IAAMsL,WAAWC,WAAavL,GAAKxG,MAAK8P,GAC3C,OAAO,EAER9P,MAAKwH,EAAapE,EAAEvB,UAAW,CAChC,CACD,CACA,OAAO,CACR,CAEAmQ,MACC,IAAI,IAAI7P,EAAI,EAAGA,EAAInC,MAAKgQ,GAAUhO,SAAUG,EAAG,CAC9C,MAAM8P,EAAWjS,MAAKgQ,GAAU7N,GAAGN,QAEnC,IAAK,IAAI6D,EAAIvD,EAAI,EAAGuD,EAAI1F,MAAKgQ,GAAUhO,SAAU0D,EAAG,CACnD,MAAMkL,EAAK5Q,MAAKgQ,GAAUtK,GACpBS,EAAKnG,MAAK6F,EAAuBoM,EAAUrB,EAAG/O,SAEpD,IAAK,MAAMuB,KAAK+C,EAAI,CACnB,MAAMmK,EAASM,EAAG5N,QACZ6N,EAASD,EAAGpN,SACZsN,EAASF,EAAGpL,aAElB,IAAK,IAAIa,EAAI,EAAGC,EAAIuK,EAAGrP,OAAQ6E,EAAIC,IAAKD,EACnCyK,EAAI7O,cAAcoE,KACtBuK,EAAGnN,OAAOoN,EAAG5M,GAAGoC,IACZjD,EAAEiM,sBAAwBrP,MAAK8P,IAClCgB,EAAIlP,KAAKyE,EAAGlE,IAGdyO,EAAGnN,OAAO6M,EACX,CACD,CACD,CACD,CAGA/J,KACC,IAAI1E,EAAQ,EACRL,EAAQ4C,OAAOC,UAEnB,IAAK,IAAIlC,EAAI,EAAGA,EAAInC,MAAKoF,EAAMpD,SAAUG,EAAG,CAC3C,MAAMW,EAAI9C,MAAKoF,EAAMjD,GACrB,IAAKW,EAAEf,UAAW,SAClB,MACMyE,EADI1D,EAAEU,SACAhC,OAASsB,EAAE0C,aAAajE,aAChCiF,EAAIhF,IACPA,EAAQgF,EACR3E,EAAQM,EAEV,CACA,OAAON,CACR,CAGA4E,GAAQ3E,GACP,IAAIoQ,EAAKrC,qBAAqBsC,SAC9B,MAAMvL,EAAW5G,MAAKuF,EAAUvF,MAAKuG,IAA4BzE,EAC3D6C,EAAW3E,MAAKoF,EAAMwB,GACtBrD,EAAWoB,EAAGnB,SACdqD,EAAWlC,EAAGa,aACpBxF,MAAKgQ,GAAUlO,GAAS6C,EAExB,IAAK,IAAIxC,EAAI,EAAGmE,EAAI/C,EAAE/B,OAAQW,EAAImE,IAAKnE,EAAG,CACzC,GAAI0E,EAAG5E,cAAcE,GAAI,SACzB,GAAKnC,KAAKN,YAAcM,KAAKN,WAAaM,MAAKwE,KAAiBxE,MAAKmE,EAAWG,KAAKC,MAAO,CAC3F2N,EAAKrC,qBAAqBuC,UAC1B,KACD,CACAzN,EAAGlB,OAAOF,EAAEU,GAAG9B,IAEf,IAAK,MAAMW,KAAK9C,MAAKoF,EAAOtC,EAAE0C,aAAatD,OAAOJ,GAClD,IAAK9B,MAAK6R,GAA0BlN,GAAK,SACzC,IAAK3E,MAAK8F,EAAchE,EAAO8E,GAAW,SAE1C,MAAMyL,EAAYvQ,EAAQ,EAE1B,GADAoQ,EAAMG,IAAcrS,MAAKoF,EAAMpD,OAAS,EAAKhC,MAAKsS,GAAYD,GAAarS,MAAKyG,EAAQ4L,GACpFH,IAAOrC,qBAAqBuC,UAAW,KAC5C,CACA,GAAIF,IAAOrC,qBAAqBsC,SAC/B,IAAK,MAAMrP,KAAK9C,MAAKoF,EAAOtC,EAAE0C,aAAatD,OAAOJ,GAGnD,OADA6C,EAAGhB,QACIuO,CACR,CAGAI,IAAYxQ,GACX,IAAIoQ,EAAKrC,qBAAqBsC,SAC9B,MAAMxN,EAAK3E,MAAKoF,EAAMpF,MAAKuF,EAAUvF,MAAKuG,IAA4BzE,GAChEyB,EAAKoB,EAAGnB,SACRqD,EAAKlC,EAAGa,aACdxF,MAAKgQ,GAAUlO,GAAS6C,EAExB,IAAK,IAAIxC,EAAI,EAAGmE,EAAI/C,EAAE/B,OAAQW,EAAImE,IAAKnE,EAAG,CACzC,GAAI0E,EAAG5E,cAAcE,GAAI,SACzB,GAAKnC,KAAKN,YAAcM,KAAKN,WAAaM,MAAKwE,KAAiBxE,MAAKmE,EAAWG,KAAKC,MAAO,CAC3F2N,EAAKrC,qBAAqBuC,UAC1B,KACD,CACAzN,EAAGlB,OAAOF,EAAEU,GAAG9B,IAEf,MAAMsN,EAAMzP,KAAKP,KAAKiQ,0BACtB,GAAID,EAAMzP,MAAK8P,GAAc,CAI5B,GAHA9P,MAAK8P,GAAeL,EACpBzP,MAAKqF,EAAKsB,WAAW3G,KAAKP,MAC1ByS,EAAKrC,qBAAqBuC,UACD,OAArBpS,KAAKJ,YAAwBI,KAAKJ,YAAcI,MAAK8P,GACxD,MAED9P,MAAKqQ,KACLrQ,MAAKgS,IACN,CACD,CAEA,OADArN,EAAGhB,QACIuO,CACR,CAGAhS,OACCF,MAAKmE,EAAkC,OAApBnE,KAAKL,WAAuByE,OAAOC,UAAaC,KAAKC,MAAQvE,KAAKL,WACrFK,MAAKwE,EAAa,EAElB,IAAK,MAAM1B,KAAK9C,MAAKoF,EACpBtC,EAAE0C,aAAe,IAAIpE,aAAa0B,EAAEU,SAAShC,QAG9C,GADAxB,KAAKP,KAAKqH,qBACL9G,MAAKqQ,KAA0B,OAAO,EAE3C,IAAIkC,GAAU,EACd,OAAa,CAEZ,GADWvS,MAAKyG,EAAQ,KACboJ,qBAAqBuC,UAAW,CAC1C,GAAIpS,KAAKN,YAAcM,KAAKN,WAAaM,MAAKwE,IAAc,CACvDxE,KAAKR,QAAQsF,QAAQC,IAAI,oDAC7B,KACD,CACA,GAAI/E,MAAKmE,EAAWG,KAAKC,MAAO,CAC3BvE,KAAKR,QAAQsF,QAAQC,IAAI,qCAC7B,KACD,CACD,CACA,GAAI/E,MAAKqF,EAAKtD,UACb,MAKD,GAHI/B,KAAKR,QACRsF,QAAQC,IAAK,uBAAsB/E,MAAK8P,MAErC9P,KAAKgB,cAAchB,MAAKqF,EAAMrF,MAAK8P,IAAe,CACrDyC,GAAU,EACV,KACD,CACA,GAAwB,OAApBvS,KAAKJ,WACR2S,GAAU,EACVvS,MAAK8P,IAAgB9P,MAAK+P,QACpB,GAAI/P,KAAKJ,YAAcI,MAAK8P,GAAc,CAC5C9P,KAAKR,QAAQsF,QAAQC,IAAI,4CAC7BwN,GAAU,EACV,KACD,CACA,IAAK,MAAMzP,KAAK9C,MAAKoF,EAAOtC,EAAE0C,aAAapD,WAC5C,CACApC,MAAKqF,EAAKH,QACV,IAAK,MAAMpC,KAAK9C,MAAKoF,EAAOtC,EAAE0C,aAAe,KAC7C,OAAO+M,CACR,CAQAhS,cAAcC,EAAO,MAEpB,GADAR,KAAKJ,WAAaY,EACM,OAApBR,KAAKJ,WACRI,MAAK8P,GAAe,MACd,CAEN,IAAI9K,EAAIZ,OAAOoO,UAEf,IADAxS,MAAK8P,GAAe9P,KAAKJ,WAAaoF,EAC/BhF,MAAK8P,IAAgB9P,KAAKJ,YAChCoF,GAAK,GACLhF,MAAK8P,GAAe9P,KAAKJ,WAAaoF,CAExC,CACD,CAQAmC,yCAAyCC,GACxCpH,MAAKuF,EAAU6B,CAChB,CAMAqL,0CAA0CC,GACzC1S,MAAK+P,GAAU2C,CAChB,CAQAC,oBAAoBvL,GACnBpH,MAAKkQ,GAAoB9I,CAC1B,EAYD,MAAMwL,+BAA+BrT,OAEpC8B,gBAAmB,EACnBA,iBAAmB,EAEnB+D,GACAC,GAAO,IAAIX,eACXY,GAEAwK,IAAe,EAEftL,GACAL,GACAoB,IAAU,EACVwK,IAAU,EAOVjQ,YAAYyC,EAAGmN,EAA0B,MACxClN,MAAMD,GACNvC,MAAKoF,EAAQ,IAAIpF,KAAKP,KAAKgF,aAC3BzE,MAAKyF,IAELzF,MAAK8P,GAAexH,KAAKD,IAAI,EAAG9F,EAAEmN,2BAC9BA,IACH1P,MAAK8P,GAAeJ,EAEtB,CAEAzP,OACC,MAAO,uDACR,CAEAe,gBACC,OAAO,CACR,CAGAyE,KACCzF,MAAKsF,EAAW,GAEhB,IAAK,IAAII,EAAI,EAAGA,EAAI1F,MAAKoF,EAAMpD,SAAU0D,EAAG,CAC3C1F,MAAKsF,EAASK,KAAK,IAAIlE,MAAMzB,MAAKoF,EAAMpD,SAExC,IAAK,IAAIG,EAAI,EAAGA,EAAInC,MAAKoF,EAAMpD,OAAQG,IAClCA,EAAIuD,IACP1F,MAAKsF,EAASI,GAAGvD,GAAKnC,KAAKP,KAAKmG,mBAAmB5F,MAAKoF,EAAMjD,GAAInC,MAAKoF,EAAMM,IAGhF,CACD,CAGAG,GAAuBsK,EAAUC,GAChC,OAAID,EAAWC,EACPpQ,MAAKsF,EAAS8K,GAAUD,GAEzBnQ,MAAKsF,EAAS6K,GAAUC,EAChC,CAGAG,IAAyBzO,EAAO0O,EAAIpN,GACnC,MAAMqN,EAAMD,EAAGhN,SACTkN,EAAMF,EAAGhL,aAEf,IAAK,IAAIrD,EAAI,EAAGmE,EAAImK,EAAGjP,OAAQW,EAAImE,IAAKnE,EACnCuO,EAAIzO,cAAcE,KACtBqO,EAAG/M,OAAOgN,EAAGxM,GAAG9B,IACZiB,EAAEiM,sBAAwBrP,MAAK8P,IAClCY,EAAI9O,KAAKO,EAAGL,IAId,OADA0O,EAAG7M,SACK+M,EAAI3O,SACb,CAGA+D,GAAchE,EAAOD,GACpB,IAAK,MAAMmE,KAAQhG,MAAKoF,EAAO,CAC9B,IAAKY,EAAIjE,UAAW,SAEpB,MAAMoE,EAAKnG,MAAK6F,EAAuBhE,EAAOmE,EAAInE,SAClD,IAAK,MAAMuB,KAAK+C,EACf,GAAiB,IAAb/C,EAAE5B,SACAxB,MAAKuQ,GAAyBzO,EAAOkE,EAAK5C,GAAI,OAAO,CAG7D,CACA,OAAO,CACR,CAGAmD,KACC,IAAI1E,EAAQ,EACRL,EAAQ4C,OAAOC,UAEnB,IAAK,IAAIlC,EAAI,EAAGA,EAAInC,MAAKoF,EAAMpD,SAAUG,EAAG,CAC3C,MAAMW,EAAI9C,MAAKoF,EAAMjD,GACrB,IAAKW,EAAEf,UAAW,SAClB,MACMyE,EADI1D,EAAEU,SACAhC,OAASsB,EAAE0C,aAAajE,aAChCiF,EAAIhF,IACPA,EAAQgF,EACR3E,EAAQM,EAEV,CACA,OAAON,CACR,CAGA4E,GAAQ3E,GACP,IAAIoQ,EAAKU,uBAAuBT,SAChC,MAAMvL,EAAW5G,MAAKuF,EAAUvF,MAAKuG,IAA4BzE,EAC3D6C,EAAW3E,MAAKoF,EAAMwB,GACtBrD,EAAWoB,EAAGnB,SACdqD,EAAWlC,EAAGa,aAEpB,IAAK,IAAIrD,EAAI,EAAGmE,EAAI/C,EAAE/B,OAAQW,EAAImE,IAAKnE,EAAG,CACzC,GAAI0E,EAAG5E,cAAcE,GAAI,SACzB,GAAKnC,KAAKN,YAAcM,KAAKN,WAAaM,MAAKwE,KAAiBxE,MAAKmE,EAAWG,KAAKC,MAAO,CAC3F2N,EAAKU,uBAAuBR,UAC5B,KACD,CACAzN,EAAGlB,OAAOF,EAAEU,GAAG9B,IAEf,IAAK,MAAMW,KAAK9C,MAAKoF,EAAOtC,EAAE0C,aAAatD,OAAOJ,GAClD,IAAK9B,MAAK8F,EAAchE,EAAO8E,GAAW,SAE1C,MAAMyL,EAAYvQ,EAAQ,EAE1B,GADAoQ,EAAMG,IAAcrS,MAAKoF,EAAMpD,OAAS,EAAKhC,MAAKsS,GAAYD,GAAarS,MAAKyG,EAAQ4L,GACpFH,IAAOU,uBAAuBR,UAAW,KAC9C,CACA,GAAIF,IAAOU,uBAAuBT,SACjC,IAAK,MAAMrP,KAAK9C,MAAKoF,EAAOtC,EAAE0C,aAAatD,OAAOJ,GAGnD,OADA6C,EAAGhB,QACIuO,CACR,CAGAI,IAAYxQ,GACX,IAAIoQ,EAAKU,uBAAuBT,SAChC,MAAMxN,EAAK3E,MAAKoF,EAAMpF,MAAKuF,EAAUvF,MAAKuG,IAA4BzE,GAChEyB,EAAKoB,EAAGnB,SACRqD,EAAKlC,EAAGa,aAEd,IAAK,IAAIrD,EAAI,EAAGmE,EAAI/C,EAAE/B,OAAQW,EAAImE,IAAKnE,EAAG,CACzC,GAAI0E,EAAG5E,cAAcE,GAAI,SACzB,GAAKnC,KAAKN,YAAcM,KAAKN,WAAaM,MAAKwE,KAAiBxE,MAAKmE,EAAWG,KAAKC,MAAO,CAC3F2N,EAAKU,uBAAuBR,UAC5B,KACD,CACAzN,EAAGlB,OAAOF,EAAEU,GAAG9B,IAEf,MAAMsN,EAAMzP,KAAKP,KAAKiQ,0BACtB,GAAID,EAAMzP,MAAK8P,KACd9P,MAAK8P,GAAeL,EACpBzP,MAAKqF,EAAKsB,WAAW3G,KAAKP,MAC1ByS,EAAKU,uBAAuBR,UACJ,OAApBpS,KAAKJ,YAAuBI,KAAKJ,YAAcI,MAAK8P,IACvD,KAGH,CAEA,OADAnL,EAAGhB,QACIuO,CACR,CAGAhS,OACCF,MAAKmE,EAAkC,OAApBnE,KAAKL,WAAuByE,OAAOC,UAAaC,KAAKC,MAAQvE,KAAKL,WACrFK,MAAKwE,EAAa,EAElB,IAAK,MAAM1B,KAAK9C,MAAKoF,EACpBtC,EAAE0C,aAAe,IAAIpE,aAAa0B,EAAEU,SAAShC,QAE9CxB,KAAKP,KAAKqH,oBAEV,MAAMzB,EAAM,IAAIX,eAEhB,IAAI6N,GAAU,EACd,OAAa,CAEZ,GADWvS,MAAKyG,EAAQ,KACbmM,uBAAuBR,UAAW,CAC5C,GAAIpS,KAAKN,YAAcM,KAAKN,WAAaM,MAAKwE,IAAc,CACvDxE,KAAKR,QAAQsF,QAAQC,IAAI,oDAC7B,KACD,CACA,GAAI/E,MAAKmE,EAAWG,KAAKC,MAAO,CAC3BvE,KAAKR,QAAQsF,QAAQC,IAAI,qCAC7B,KACD,CACD,CACA,GAAI/E,MAAKqF,EAAKtD,UACb,MAQD,GANAsD,EAAIwN,kBAAkB7S,MAAKqF,GAC3BrF,MAAKqF,EAAK1B,QAEN3D,KAAKR,QACRsF,QAAQC,IAAK,uBAAsB/E,MAAK8P,MAErC9P,KAAKgB,cAAcqE,EAAKrF,MAAK8P,IAAe,CAC/CyC,GAAU,EACV,KACD,CACA,GAAwB,OAApBvS,KAAKJ,WAAqB,CAE7B,GADA2S,GAAU,EACNvS,MAAK8P,GAAe9P,MAAK+P,GAAU,EAAG,MAC1C/P,MAAK8P,IAAkB9P,MAAK8P,GAAe9P,MAAK+P,GAAU,EAAK,EAAI/P,MAAK+P,EACzE,MAAO,GAAI/P,KAAKJ,YAAcI,MAAK8P,GAAc,CAC5C9P,KAAKR,QAAQsF,QAAQC,IAAK,4CAC9BwN,GAAU,EACV,KACD,CACA,IAAK,MAAMzP,KAAK9C,MAAKoF,EAAOtC,EAAE0C,aAAapD,WAC5C,CACAiD,EAAIH,QACJ,IAAK,MAAMpC,KAAK9C,MAAKoF,EAAOtC,EAAE0C,aAAe,KAC7C,OAAO+M,CACR,CAQAhS,cAAcC,EAAO,MAEpB,GADAR,KAAKJ,WAAaY,EACM,OAApBR,KAAKJ,WACRI,MAAK8P,GAAe,MACd,CAEN,IAAI9K,EAAIZ,OAAOoO,UAEf,IADAxS,MAAK8P,GAAe9P,KAAKJ,WAAaoF,EAC/BhF,MAAK8P,IAAgB9P,KAAKJ,YAChCoF,GAAK,GACLhF,MAAK8P,GAAe9P,KAAKJ,WAAaoF,CAExC,CACD,CAQAmC,yCAAyCC,GACxCpH,MAAKuF,EAAU6B,CAChB,CAMAqL,0CAA0CC,GACzC1S,MAAK+P,GAAU2C,CAChB,EAYD,MAAMI,mBAAmBvT,OAExB8B,eAAegH,GACd,OAAOC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMF,GAC9C,CAEAI,GAAY,GACZC,GAEA5I,YAAYyC,EAAGmN,EAA0B,GAExC,GADAlN,MAAMD,IACDvC,MAAK2I,EAAe+G,GACxB,MAAM,IAAI9G,SAEZ,CAEA3I,OACC,MAAO,aACR,CAEA0I,GAAeoK,GACV/S,KAAKR,QAAQsF,QAAQC,IAAI,0BAC7B,MAAM0C,EAAO,GAEb,IAAK,MAAM3E,KAAK9C,KAAKP,KAAKgF,YAAa,CACtC,GAA0B,IAAtB3B,EAAEU,SAAShC,OAAc,OAAO,EACpCxB,MAAKyI,EAAU9C,KAAK,IAAImN,WAAWjK,QAAQ/F,GAC5C,CACA,IAAK,MAAMM,KAAKpD,KAAKP,KAAKyD,cACzB,GAAiB,IAAbE,EAAE5B,OAAc,CACnB,MAAMsB,EAAKM,EAAEa,GAAG,GACV6E,EAAK9I,MAAKyI,EAAUrF,EAAEa,GAAG,GAAGpC,SAElC,IAAK,IAAIM,EAAI,EAAGA,EAAI2G,EAAGtH,SAAUW,EAAG,CACnC,MAAM4G,EAAUjG,EAAEE,QAClBF,EAAEW,OAAOqF,EAAG7B,IAAI9E,GAAG6G,QAEf5F,EAAEiM,sBAAwB0D,GAC7BtL,EAAK9B,KAAK,IAAImN,WAAW7J,WAAW7F,EAAG0F,EAAG7B,IAAI9E,KAE/CW,EAAEW,OAAOsF,EACV,CACD,KAAO,CACN,MAAMb,EAAO9E,EAAEa,GAAG,GACZiF,EAAO9F,EAAEa,GAAG,GACZkF,EAAOnJ,MAAKyI,EAAUrF,EAAEa,GAAG,GAAGpC,SAC9BuH,EAAOpJ,MAAKyI,EAAUrF,EAAEa,GAAG,GAAGpC,SAEpC,IAAK,IAAIM,EAAI,EAAGA,EAAIgH,EAAK3H,SAAUW,EAAG,CACrC,MAAMkH,EAAWnB,EAAGlF,QACpBkF,EAAGzE,OAAO0F,EAAKlC,IAAI9E,GAAG6G,QAEtB,IAAK,IAAItD,EAAI,EAAGA,EAAI0D,EAAK5H,SAAUkE,EAAG,CACrC,MAAM4D,EAAWJ,EAAGlG,QACpBkG,EAAGzF,OAAO2F,EAAKnC,IAAIvB,GAAGsD,QAElB5F,EAAEiM,sBAAwB0D,GAC7BtL,EAAK9B,KAAK,IAAImN,WAAW7J,WAAW7F,EAAG+F,EAAKlC,IAAI9E,GAAIiH,EAAKnC,IAAIvB,KAE9DwD,EAAGzF,OAAO6F,EACX,CACApB,EAAGzE,OAAO4F,EACX,CACD,CAED,IAAK,MAAMP,KAAM9I,MAAKyI,EACrB,IAAK,MAAMnC,KAAKwC,EAAGS,SAAUjD,EAAEkD,kBAIhC,OAFAxJ,MAAK0I,EAAejB,EAChBzH,KAAKR,QAAQsF,QAAQC,IAAI,8BACtB,CACR,CAEA0E,GAASC,GACR,IAAK,IAAIvH,EAAIuH,EAAG1H,OAAQG,EAAI,IAAKA,EAAG,CACnC,MAAMuD,EAAO0C,MAAMuB,QAAQxH,GACrByH,EAAOF,EAAGvH,EAAI,GACpBuH,EAAGvH,EAAI,GAAKuH,EAAGhE,GACfgE,EAAGhE,GAASkE,CACb,CACA,OAAOF,CACR,CAEAxJ,OACC,MAAMiE,EAA+B,OAApBnE,KAAKL,WAAuByE,OAAOC,UAAaC,KAAKC,MAAQvE,KAAKL,WACnF,IAAI6E,EAAY,EAEhB,MAAMa,EAAQ,IAAIX,eACZmF,EAAQ,GACd,IAAK,IAAI1H,EAAI,EAAGA,EAAInC,MAAKyI,EAAUzG,OAAQG,IAC1C0H,EAAMlE,KAAKxD,GAGZ,IAAI2H,EAAU9J,KAAKP,KAAKiQ,0BACpB6C,GAAU,EAEd,OAAa,CACZ,GAAIvS,KAAKN,YAAcM,KAAKN,WAAa8E,IAAa,CACjDxE,KAAKR,QAAQsF,QAAQC,IAAI,oDAC7B,KACD,CACA,GAAIZ,EAAUG,KAAKC,MAAO,CACrBvE,KAAKR,QAAQsF,QAAQC,IAAI,qCAC7B,KACD,CAEA,IAAIgF,GAAW,EACf,IAAK,MAAM5H,KAAKnC,MAAKyJ,EAASI,GACzB7J,MAAKyI,EAAUtG,GAAG6H,4BACrBD,GAAW,GAGb,GAAKA,EAKE,CACN,IAAK,MAAME,KAAOjK,MAAKyI,EACtBwB,EAAIC,kBAEL,MAAM3G,EAAIvD,KAAKP,KAAKiQ,0BACpB,GAAI5F,EAAMvG,EAAG,CAIZ,GAHAuG,EAAMvG,EACFvD,KAAKR,QAAQsF,QAAQC,IAAK,8BAA6BxB,KAC3D8B,EAAIsB,WAAW3G,KAAKP,MAChBO,KAAKgB,cAAcqE,EAAK9B,GAAI,CAC/BgP,GAAU,EACV,KACD,CACA,GAAwB,OAApBvS,KAAKJ,WACR2S,GAAU,OACJ,GAAIvS,KAAKJ,YAAckK,EAAK,CAC9B9J,KAAKR,QAAQsF,QAAQC,IAAI,4CAC7BwN,GAAU,EACV,KACD,CACD,CACD,MAzBC,IAAK,MAAMpI,KAAOnK,MAAK0I,EACtByB,EAAIC,eAyBP,CAEA,OADA/E,EAAIH,QACGqN,CACR,EAID,CAEC,MAAM1J,EAELxH,eAAegH,GACd,OAAOC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMF,GAC9C,CAEAgC,GACAxI,GACAyI,GAAc,GACdf,SAAc,GAEdzJ,YAAYgD,GACX9C,MAAKqK,EAAOvH,EAEZ,IAAK,MAAMyH,KAAOzH,EAAEU,SACnBxD,KAAKuJ,SAAS5D,KAAK,IAAI6E,EAAOD,IAE/BvK,MAAKyK,EAAa5B,EAAQc,QAAQ3J,KAAKuJ,SAASvH,QACjD,CAEAyI,GAAa5I,GACZ,IAAK,MAAMyE,KAAKtG,KAAKuJ,SACpBjD,EAAEoE,WAAY,EAEf1K,KAAKuJ,SAAS1H,GAAO6I,WAAY,EACjC1K,MAAK6B,EAASA,CACf,CAEAqI,kBACClK,MAAKqK,EAAK5G,OAAOzD,KAAKuJ,SAASvJ,MAAK6B,GAAQmH,OAC7C,CAEA/B,IAAIpF,GACH,OAAO7B,KAAKuJ,SAAS1H,EACtB,CAEA8I,UACC,OAAO3K,KAAKuJ,QACb,CAGAS,0BACChK,MAAKsK,EAAYtI,OAAS,EAE1B,IAAIqG,EAAYjE,OAAOwG,kBACnBC,GAAY,EAEhB,IAAK,IAAI1I,EAAI,EAAGA,EAAInC,KAAKuJ,SAASvH,SAAUG,EAAG,CAC9C,MAAM2I,EAAQ9K,KAAKuJ,SAASpH,GAAG4I,WAE3B1C,GAAOyC,IACNzC,EAAMyC,IACTzC,EAAMyC,EACN9K,MAAKsK,EAAYtI,OAAS,EAC1B6I,GAAY,GAEb7K,MAAKsK,EAAY3E,KAAKxD,GAClBnC,MAAK6B,IAAWM,IACnB0I,GAAY,GAGf,CACA,OAAIA,GAAyC,IAA5B7K,MAAKsK,EAAYtI,SAGlChC,MAAKyK,EAAazK,MAAKsK,EAAYzB,EAAQc,QAAQ3J,MAAKsK,EAAYtI,WAC7D,EACR,CAEAR,OACC,OAAOxB,KAAKuJ,SAASvH,MACtB,EAGD8Q,WAAWjK,QAAUA,EAErB,MAAMI,EAEL7F,IACA4H,GACAC,GACAC,QAGApL,YAAYsD,EAAG4H,EAAOC,EAAS,MAC9BjL,KAAKkL,QAAU9H,EAAEiM,qBAAuB,EACxCrP,MAAKoD,GAAUA,EAEfpD,MAAKgL,EAASA,EACdhL,MAAKgL,EAAOG,cAAcnL,MAC1BA,MAAKiL,EAAUA,EACM,OAAjBjL,MAAKiL,GACRjL,MAAKiL,EAAQE,cAAcnL,KAE7B,CAEAoL,UAAUC,GACT,OAAIA,IAASrL,MAAKgL,EAAgBhL,MAAKiL,EACnCI,IAASrL,MAAKiL,EAAgBjL,MAAKgL,EAChC,IACR,CAEAZ,gBACMpK,MAAKgL,EAAON,YAA+B,OAAjB1K,MAAKiL,GAAqBjL,MAAKiL,EAAQP,aAG/C,IAAnB1K,MAAKoD,GAAG5B,OACXxB,KAAKkL,SAAYlL,MAAKoD,GAAG4P,gBAAgB3D,mBAAmBrP,MAAKgL,EAAOhC,QAAU,EAElFhJ,KAAKkL,SAAYlL,MAAKoD,GAAG4P,gBAAgB3D,mBAAmBrP,MAAKgL,EAAOhC,OAAQhJ,MAAKiL,EAAQjC,QAAU,EAEzG,EAGD8J,WAAW7J,WAAaA,EAExB,MAAMuB,EAELc,GAAW,GACX5C,GACAM,OACA0B,WAAY,EAEZ5K,YAAYkD,GACXhD,KAAKgJ,OAAShG,CACf,CAEAmI,cAAc/H,GACbpD,MAAKsL,EAAS3F,KAAKvC,EACpB,CAEAoG,kBACCxJ,MAAK0I,EAAe,IAAI1I,MAAKsL,GAC7BtL,MAAKsL,EAAe,IACrB,CAEAP,WACC,IAAIQ,EAAM,EACV,IAAK,MAAMnI,KAAKpD,MAAK0I,EAAc,CAClC,MAAMpC,EAAIlD,EAAEgI,UAAUpL,MACtBuL,GAAOnI,EAAE8H,SAAkB,OAAN5E,GAAcA,EAAEoE,UAAa,EAAI,EACvD,CACA,OAAOa,CACR,EAGDuH,WAAWtI,OAASA,CAErB,CASA,MAAMyI,6BAA6B1T,OAElC8B,SAAmBoK,EAAIC,GACtB,MAAMC,EAAK,IAAI3H,IAAIyH,GACnB,IAAK,MAAM3I,KAAK4I,EAAIC,EAAG/K,IAAIkC,GAC3B,OAAO6I,CACR,CAEAtK,SAAoBoK,EAAIC,GACvB,MAAMC,EAAK,IAAI3H,IAAIyH,GACnB,IAAK,MAAM3I,KAAK4I,EAAIC,EAAGC,OAAO9I,GAC9B,OAAO6I,CACR,CAEAtK,SAAuBmF,EAAGxB,GACzB,MAAM2G,EAAK,IAAI3H,IAAIwC,GAEnB,OADAmF,EAAG/K,IAAIoE,GACA2G,CACR,CAEAtK,SAAwBmF,EAAGxB,GAC1B,MAAM2G,EAAK,IAAI3H,IAAIwC,GAEnB,OADAmF,EAAGC,OAAO5G,GACH2G,CACR,CAEAuH,IACAC,IAEA3O,GACAL,GACA0H,GAEA/L,YAAYyC,GACXC,MAAMD,GACNvC,MAAKoT,IACN,CAEAnT,OACC,MAAO,wBACR,CAEAoT,IAAQC,EAAIC,GACX,MAAMC,EAAM,IAAIC,IAEhB,IAAK,MAAMrQ,KAAKmQ,EACf,GAAKnQ,EAAEsQ,YAGP,IAAK,IAAIvR,EAAI,EAAGA,EAAIiB,EAAE5B,SAAUW,EAAG,CAClC,MAAMW,EAAIM,EAAEa,GAAG9B,GACVqR,EAAIvL,IAAInF,GAGZ0Q,EAAIG,IAAI7Q,EAAG0Q,EAAIvM,IAAInE,GAAK,GAFxB0Q,EAAIG,IAAI7Q,EAAG,EAIb,CAED,MAAM8Q,EAAK,IAAIN,GACfM,EAAGC,MAAK,CAACC,EAAIC,KACZ,IAAIC,EAAO,EACPC,EAAO,EAIX,OAHIT,EAAIvL,IAAI6L,KAAKE,EAAOR,EAAIvM,IAAI6M,IAC5BN,EAAIvL,IAAI8L,KAAKE,EAAOT,EAAIvM,IAAI8M,IAE5BC,EAAOC,EAAa,EACpBD,EAAOC,GAAc,EAClB,CAAC,IAGT,MAAM1I,EAAM,IAAIvH,IAEhB,IAAK,MAAMlB,KAAK8Q,EAAI,CACnB,IAAIM,GAAS,EACb,IAAK,MAAM9Q,KAAKmQ,EACf,GAAInQ,EAAEsQ,YAAa,CAClBQ,GAAS,EACT,KACD,CAED,IAAKA,EAAQ,MACbpR,EAAEa,QACF4H,EAAI3K,IAAIkC,EACT,CACA,OAAOyI,CACR,CAEA6H,MACC,IAAIe,EAAO,EACPC,EAAO,EAEX,IAAK,MAAMtR,KAAK9C,KAAKP,KAAKgF,YACzB,IAAK,IAAItC,EAAI,EAAGA,EAAIW,EAAEtB,SAAUW,EAAG,CAClC,MAAMiB,EAAIN,EAAEmB,GAAG9B,GAETxB,EAAIyC,EAAEiR,0BACNC,EAAIlR,EAAEmR,2BACR5T,EAAIwT,IAAMA,EAAOxT,GACjB2T,EAAIF,IAAMA,EAAOE,EACtB,CAEDtU,MAAKmT,GAAMgB,EACXnU,MAAKkT,GAAMkB,CACZ,CAEAI,IAAWC,EAAIC,EAAIC,EAAIC,EAAUC,EAAStB,EAAIuB,GAC7C,MAAMC,EAAM/U,MAAKqT,GAAQqB,EAAInB,GACvByB,EAAM/B,sBAAqBpG,EAAgB4H,EAAIE,GAC/CM,EAAMhC,sBAAqBtG,EAAa+H,EAAIK,GAClD,OAAO/U,MAAKkV,GAAcF,EAAKC,EAAKF,EAAKH,EAAUtM,KAAK6M,IAAIN,EAASD,GAAWE,EACjF,CAEAM,IAAaX,EAAIC,EAAIC,EAAIU,EAAQR,EAASC,GACzC,IAAIQ,EAAWtV,MAAKmT,GACpB,GAA2B,IAAvBwB,EAAGnR,SAAShC,OACf,OAAO8T,EAER,IAAIC,EAAU7Q,eAAeyI,cAAcuH,GACvCc,EAAUb,EAAGnR,SAASS,GAAG,GAE7B,MAAMwR,EAAU/Q,eAAeyI,cAAcuH,GAE7C,IAAK,IAAIhP,EAAI,EAAGA,EAAIiP,EAAGnR,SAAShC,QAAU8T,EAAWT,IAAWnP,EAAG,CAClE,MAAMgQ,EAAMf,EAAGnR,SAASS,GAAGyB,GAC3BiP,EAAGlR,OAAOiS,GACV,MAAMC,EAAYrN,KAAK6M,IAAIE,EAAQrV,MAAK4V,GAAQnB,EAAIE,EAAIW,EAAUR,IAElE,GAAIa,EAAYrN,KAAKD,IAAIiN,EAAUR,GAAK,CACvC,MAAMe,EAAQ,IAAI7R,IACZ8R,EAAaxN,KAAK6M,IAAI7M,KAAK6M,IAAIQ,EAAWd,GAAU7U,MAAK+V,GAAStB,EAAIC,EAAIC,EAAIgB,EAAWd,EAASgB,IAOxG,GALIC,EAAaR,IAChBA,EAAWQ,EACXN,EAAWE,EACXH,EAAW7Q,eAAeyI,cAAcuH,IAErCmB,EAAMrU,KAAM,CACf,MAAMwU,EAAahW,MAAKwU,GAAWC,EAAIC,EAAIC,EAAIgB,EAAWd,EAASgB,EAAOvN,KAAKD,IAAIyM,EAAIQ,IACvF,IAA4B,IAAxBtV,MAAK6L,EACR,OAAOyJ,EAEJU,EAAaV,IAChBA,EAAWU,EACXR,EAAWE,EACXH,EAAW7Q,eAAeyI,cAAcuH,IAEzCe,EAAQvQ,OACT,CACD,CACD,CAGA,OAFAqQ,EAAOrQ,QACPyP,EAAGlR,OAAO+R,GACHF,CACR,CAEAJ,IAAcT,EAAIC,EAAIuB,EAAIZ,EAAQR,EAASC,GAI1C,GAHI9U,KAAKR,QACRsF,QAAQC,IAAK,MAAK0P,EAAGjT,aAAakT,EAAGlT,aAAayU,EAAGzU,QAE9B,OAApBxB,KAAKJ,YAAuBI,KAAKJ,YAAcI,KAAKP,KAAKiQ,0BAG5D,OAFI1P,KAAKR,QAAQsF,QAAQC,IAAI,4CAC7B/E,MAAK6L,EAAgB,EACdgJ,EAER,GAAI7U,KAAKN,YAAcM,KAAKN,WAAaM,MAAKwE,IAG7C,OAFIxE,KAAKR,QAAQsF,QAAQC,IAAI,oDAC7B/E,MAAK6L,EAAgB,EACdgJ,EAER,GAAI7U,MAAKmE,EAAWG,KAAKC,MAGxB,OAFIvE,KAAKR,QAAQsF,QAAQC,IAAI,qCAC7B/E,MAAK6L,EAAgB,EACdgJ,EAER,GAAgB,IAAZoB,EAAGzU,KACN,OAAOqT,EAER,MAAMF,EAAYsB,EAAGjJ,SAASC,OAAOjK,MAC/BkT,EAAYlW,MAAKoV,GAAaX,EAAIC,EAAIC,EAAIU,EAAQR,EAASC,GAEjE,OAA4B,IAAxB9U,MAAK6L,EACDgJ,EAEJqB,EAAYpB,EACR9U,MAAKmT,IAEbuB,EAAKzB,sBAAqBpG,EAAgB6H,EAAIC,GAC9CsB,EAAKhD,sBAAqB7F,EAAiB6I,EAAItB,GACxC3U,MAAKkV,GAAcT,EAAIC,EAAIuB,EAAIZ,EAAQa,EAAWpB,GAC1D,CAEAqB,IAAUC,EAAG7C,GACZ,MAAMpN,EAAK,IAAInC,IACf,IAAK,MAAMlB,KAAKsT,EACf,IAAK,IAAIjU,EAAI,EAAGA,EAAIW,EAAEtB,SAAUW,EAC/BgE,EAAGvF,IAAIkC,EAAEmB,GAAG9B,IAGd,IAAIoJ,EAAM,EACV,IAAK,MAAMnI,KAAK+C,EAAI,CACnB,MAAMkQ,EAAKjT,EAAEiM,qBACTgH,IAAOvE,WAAWC,YAClBsE,EAAK9K,IAAKA,EAAM8K,GACrB,CACA,IAAK,MAAMjT,KAAKpD,KAAKP,KAAKyD,cAAe,CAC7BE,EAAEiR,0BACJrU,MAAKkT,IAAKK,EAAG3S,IAAIwC,EAC3B,CACA,OAAOmI,CACR,CAEAqK,IAAQnB,EAAIE,EAAIW,EAAUR,GACzB,IAAIwB,EAAK,EACT,MAAMnQ,EAAK,IAAInC,IAEf,IAAK,MAAMlB,KAAK2R,EAAI,CACnB,MAAM7K,EAAO5J,KAAKP,KAAKmG,mBAAmB9C,EAAG6R,GAC7C,IAAK,MAAMvR,KAAKwG,EAAMzD,EAAGvF,IAAIwC,EAC9B,CACA,IAAK,MAAMA,KAAK+C,EAAI,CACnB,MAAM5C,EAAIH,EAAEiM,qBACZ,GAAI9L,IAAMuO,WAAWC,YACjBxO,EAAI+S,IAAIA,EAAK/S,GACb+S,GAAMhB,GAAYgB,GAAMxB,GAAI,OAAOwB,CACxC,CACA,OAAOA,CACR,CAEAP,IAAStB,EAAIC,EAAIC,EAAIC,EAAUC,EAAStB,GACvC,IAAIgD,EAAM,EACV,MAAMpQ,EAAK,IAAInC,IAEf,IAAK,MAAMlB,KAAK2R,EAAI,CACnB,MAAM7K,EAAO5J,KAAKP,KAAKmG,mBAAmB9C,EAAG6R,GAC7C,IAAK,MAAMvR,KAAKwG,EAAMzD,EAAGvF,IAAIwC,EAC9B,CACA,IAAK,MAAMN,KAAK4R,EAAI,CACnB,MAAM9K,EAAO5J,KAAKP,KAAKmG,mBAAmB9C,EAAG6R,GAC7C,IAAK,MAAMvR,KAAKwG,EAAMzD,EAAGvF,IAAIwC,EAC9B,CACA,IAAK,MAAMA,KAAK+C,EAAI,CACnB,MAAMkQ,EAAKjT,EAAEiM,qBACTgH,IAAOvE,WAAWC,YAClBsE,EAAKE,IAAKA,EAAMF,GACrB,CACA,IAAK,MAAMjT,KAAK+C,EAAI,CACnB,MAAMkQ,EAAKjT,EAAEiM,qBACTgH,IAAOvE,WAAWC,aAClBsE,EAAKzB,GAAYyB,EAAKxB,IAAStB,EAAG3S,IAAIwC,GAC3C,CACA,OAAOmT,CACR,CAEArW,OACCF,MAAKmE,EAAqC,OAApBnE,KAAKL,WAAuByE,OAAOC,UAAaC,KAAKC,MAAQvE,KAAKL,WACxFK,MAAKwE,EAAgB,EACrBxE,MAAK6L,GAAiB,EAEtB,MAAM8D,EAAM3P,KAAKP,KAAKiQ,0BACgB,IAAlC1P,KAAKP,KAAK2G,qBACbpG,KAAKP,KAAKqH,oBAEX,MAAM2N,EAAK,IAAIzQ,IACT0Q,EAAK,IAAI1Q,IACTiS,EAAK,IAAIjS,IACf,IAAK,MAAMlB,KAAK9C,KAAKP,KAAKgF,aACvB3B,EAAEf,UAAiBkU,EAALvB,GAAS9T,IAAIkC,GAG9B,MAAMyQ,EAAW,IAAIvP,IACfwS,EAAWxW,MAAKmW,GAAUzB,EAAInB,GACpC,IAAIuB,EACA2B,EAAU,KAEE,IAAZR,EAAGzU,MACNsT,EAAU0B,EACVC,EAAU/R,eAAeyI,cAAcuH,IAEvCI,EAAK9U,MAAKmT,GAEX,MAAM4B,EAAM9B,sBAAqBzG,EAAYxM,MAAKqT,GAAQqB,EAAInB,GAAK0C,GAC7DhB,EAAMhC,sBAAqBtG,EAAa+H,EAAIK,GAClD,IAAI2B,EAAS1W,MAAKkV,GAAcT,EAAIQ,EAAKF,EAAK/U,MAAKkT,GAAKlT,MAAKkT,GAAK4B,GAOlE,OANI4B,EAAS5B,GACI,OAAZ2B,GACHA,EAAQvR,QAGVwR,EAAS1W,KAAKP,KAAKiQ,0BACZgH,EAAS/G,GAAO+G,EAAS,IAA6B,IAAvB1W,MAAK6L,GAA2C,OAApB7L,KAAKJ,WACxE,EAYD,MAAM+W,+BAA+BpX,OAEpC8B,SAAmBoK,EAAIC,GACtB,MAAMC,EAAK,IAAI3H,IAAIyH,GACnB,IAAK,MAAM3I,KAAK4I,EAAIC,EAAG/K,IAAIkC,GAC3B,OAAO6I,CACR,CAEAtK,SAAoBoK,EAAIC,GACvB,MAAMC,EAAK,IAAI3H,IAAIyH,GACnB,IAAK,MAAM3I,KAAK4I,EAAIC,EAAGC,OAAO9I,GAC9B,OAAO6I,CACR,CAEAtK,SAAuBmF,EAAGxB,GACzB,MAAM2G,EAAK,IAAI3H,IAAIwC,GAEnB,OADAmF,EAAG/K,IAAIoE,GACA2G,CACR,CAEAuH,IACAC,IAEA3O,GACAL,GACA0H,GAEA/L,YAAYyC,GACXC,MAAMD,GACNvC,MAAKoT,IACN,CAEAnT,OACC,MAAO,2BACR,CAEAoT,IAAQC,EAAIC,GACX,MAAMC,EAAM,IAAIC,IAEhB,IAAK,MAAMrQ,KAAKmQ,EACf,GAAKnQ,EAAEsQ,YAGP,IAAK,IAAIvR,EAAI,EAAGA,EAAIiB,EAAE5B,SAAUW,EAAG,CAClC,MAAMW,EAAIM,EAAEa,GAAG9B,GACVqR,EAAIvL,IAAInF,GAGZ0Q,EAAIG,IAAI7Q,EAAG0Q,EAAIvM,IAAInE,GAAK,GAFxB0Q,EAAIG,IAAI7Q,EAAG,EAIb,CAED,MAAM8Q,EAAK,IAAIN,GACfM,EAAGC,MAAK,CAACC,EAAIC,KACZ,IAAIC,EAAO,EACPC,EAAO,EAIX,OAHIT,EAAIvL,IAAI6L,KAAKE,EAAOR,EAAIvM,IAAI6M,IAC5BN,EAAIvL,IAAI8L,KAAKE,EAAOT,EAAIvM,IAAI8M,IAE5BC,EAAOC,EAAa,EACpBD,EAAOC,GAAc,EAClB,CAAC,IAGT,MAAM1I,EAAM,IAAIvH,IAEhB,IAAK,MAAMlB,KAAK8Q,EAAI,CACnB,IAAIM,GAAS,EACb,IAAK,MAAM9Q,KAAKmQ,EACf,GAAInQ,EAAEsQ,YAAa,CAClBQ,GAAS,EACT,KACD,CAED,IAAKA,EAAQ,MACbpR,EAAEa,QACF4H,EAAI3K,IAAIkC,EACT,CACA,OAAOyI,CACR,CAEA6H,MACC,IAAIe,EAAO,EACPC,EAAO,EAEX,IAAK,MAAMtR,KAAK9C,KAAKP,KAAKgF,YACzB,IAAK,IAAItC,EAAI,EAAGA,EAAIW,EAAEtB,SAAUW,EAAG,CAClC,MAAMiB,EAAIN,EAAEmB,GAAG9B,GAETxB,EAAIyC,EAAEiR,0BACNC,EAAIlR,EAAEmR,2BACR5T,EAAIwT,IAAMA,EAAOxT,GACjB2T,EAAIF,IAAMA,EAAOE,EACtB,CAEDtU,MAAKmT,GAAMgB,EACXnU,MAAKkT,GAAMkB,CACZ,CAEAI,IAAWC,EAAIC,EAAIC,EAAIC,EAAUC,EAAStB,EAAIuB,GAC7C,MAAMC,EAAM/U,MAAKqT,GAAQqB,EAAInB,GACvByB,EAAM2B,wBAAuB9J,EAAgB4H,EAAIE,GACjDM,EAAM0B,wBAAuBhK,EAAa+H,EAAIK,GACpD,OAAO/U,MAAKkV,GAAcF,EAAKC,EAAKF,EAAKH,EAAUtM,KAAK6M,IAAIN,EAASD,GAAWE,EACjF,CAEAM,IAAaX,EAAIC,EAAIC,EAAIU,EAAQR,EAASC,GACzC,IAAIQ,EAAWtV,MAAKmT,GACpB,GAA2B,IAAvBwB,EAAGnR,SAAShC,OACf,OAAO8T,EAER,IAAIC,EAAU7Q,eAAeyI,cAAcuH,GACvCc,EAAUb,EAAGnR,SAASS,GAAG,GAE7B,MAAMwR,EAAU/Q,eAAeyI,cAAcuH,GAE7C,IAAK,IAAIhP,EAAI,EAAGA,EAAIiP,EAAGnR,SAAShC,QAAU8T,EAAWT,IAAWnP,EAAG,CAClE,MAAMgQ,EAAMf,EAAGnR,SAASS,GAAGyB,GAC3BiP,EAAGlR,OAAOiS,GACV,MAAMC,EAAYrN,KAAK6M,IAAIE,EAAQrV,MAAK4V,GAAQnB,EAAIE,EAAIW,EAAUR,IAElE,GAAIa,EAAYrN,KAAKD,IAAIiN,EAAUR,GAAK,CACvC,MAAMe,EAAQ,IAAI7R,IACZ8R,EAAaxN,KAAK6M,IAAI7M,KAAK6M,IAAIQ,EAAWd,GAAU7U,MAAK+V,GAAStB,EAAIC,EAAIC,EAAIgB,EAAWd,EAASgB,IAOxG,GALIC,EAAaR,IAChBA,EAAWQ,EACXN,EAAWE,EACXH,EAAW7Q,eAAeyI,cAAcuH,IAErCmB,EAAMrU,KAAM,CACf,MAAMwU,EAAahW,MAAKwU,GAAWC,EAAIC,EAAIC,EAAIgB,EAAWd,EAASgB,EAAOvN,KAAKD,IAAIyM,EAAIQ,IACvF,IAA4B,IAAxBtV,MAAK6L,EACR,OAAOyJ,EAEJU,EAAaV,IAChBA,EAAWU,EACXR,EAAWE,EACXH,EAAW7Q,eAAeyI,cAAcuH,IAEzCe,EAAQvQ,OACT,CACD,CACD,CAGA,OAFAqQ,EAAOrQ,QACPyP,EAAGlR,OAAO+R,GACHF,CACR,CAEAJ,IAAcT,EAAIC,EAAIuB,EAAIZ,EAAQR,EAASC,GAI1C,IAHAJ,EAAK,IAAI1Q,IAAI0Q,GACbuB,EAAK,IAAIjS,IAAIiS,KAEA,CAIZ,GAHIjW,KAAKR,QACRsF,QAAQC,IAAK,MAAK0P,EAAGjT,aAAakT,EAAGlT,aAAayU,EAAGzU,QAE9B,OAApBxB,KAAKJ,YAAuBI,KAAKJ,YAAcI,KAAKP,KAAKiQ,0BAG5D,OAFI1P,KAAKR,QAAQsF,QAAQC,IAAI,4CAC7B/E,MAAK6L,EAAgB,EACdgJ,EAER,GAAI7U,KAAKN,YAAcM,KAAKN,WAAaM,MAAKwE,IAG7C,OAFIxE,KAAKR,QAAQsF,QAAQC,IAAI,oDAC7B/E,MAAK6L,EAAgB,EACdgJ,EAER,GAAI7U,MAAKmE,EAAWG,KAAKC,MAGxB,OAFIvE,KAAKR,QAAQsF,QAAQC,IAAI,qCAC7B/E,MAAK6L,EAAgB,EACdgJ,EAER,GAAgB,IAAZoB,EAAGzU,KACN,OAAOqT,EAER,MAAMF,EAAYsB,EAAGjJ,SAASC,OAAOjK,MAC/BkT,EAAYlW,MAAKoV,GAAaX,EAAIC,EAAIC,EAAIU,EAAQR,EAASC,GAEjE,IAA4B,IAAxB9U,MAAK6L,EACR,OAAOgJ,EAER,GAAIqB,EAAYpB,EACf,OAAO9U,MAAKmT,GAEbuB,EAAG9T,IAAI+T,GACPsB,EAAGrK,OAAO+I,GACVE,EAAUqB,CACX,CACD,CAEAC,IAAUC,EAAG7C,GACZ,MAAMpN,EAAK,IAAInC,IACf,IAAK,MAAMlB,KAAKsT,EACf,IAAK,IAAIjU,EAAI,EAAGA,EAAIW,EAAEtB,SAAUW,EAC/BgE,EAAGvF,IAAIkC,EAAEmB,GAAG9B,IAGd,IAAIoJ,EAAM,EACV,IAAK,MAAMnI,KAAK+C,EAAI,CACnB,MAAMkQ,EAAKjT,EAAEiM,qBACTgH,IAAOvE,WAAWC,YAClBsE,EAAK9K,IAAKA,EAAM8K,GACrB,CACA,IAAK,MAAMjT,KAAKpD,KAAKP,KAAKyD,cAAe,CAC7BE,EAAEiR,0BACJrU,MAAKkT,IAAKK,EAAG3S,IAAIwC,EAC3B,CACA,OAAOmI,CACR,CAEAqK,IAAQnB,EAAIE,EAAIW,EAAUR,GACzB,IAAIwB,EAAK,EACT,MAAMnQ,EAAK,IAAInC,IAEf,IAAK,MAAMlB,KAAK2R,EAAI,CACnB,MAAM7K,EAAO5J,KAAKP,KAAKmG,mBAAmB9C,EAAG6R,GAC7C,IAAK,MAAMvR,KAAKwG,EAAMzD,EAAGvF,IAAIwC,EAC9B,CACA,IAAK,MAAMA,KAAK+C,EAAI,CACnB,MAAM5C,EAAIH,EAAEiM,qBACZ,GAAI9L,IAAMuO,WAAWC,YACjBxO,EAAI+S,IAAIA,EAAK/S,GACb+S,GAAMhB,GAAYgB,GAAMxB,GAAI,OAAOwB,CACxC,CACA,OAAOA,CACR,CAEAP,IAAStB,EAAIC,EAAIC,EAAIC,EAAUC,EAAStB,GACvC,IAAIgD,EAAM,EACV,MAAMpQ,EAAK,IAAInC,IAEf,IAAK,MAAMlB,KAAK2R,EAAI,CACnB,MAAM7K,EAAO5J,KAAKP,KAAKmG,mBAAmB9C,EAAG6R,GAC7C,IAAK,MAAMvR,KAAKwG,EAAMzD,EAAGvF,IAAIwC,EAC9B,CACA,IAAK,MAAMN,KAAK4R,EAAI,CACnB,MAAM9K,EAAO5J,KAAKP,KAAKmG,mBAAmB9C,EAAG6R,GAC7C,IAAK,MAAMvR,KAAKwG,EAAMzD,EAAGvF,IAAIwC,EAC9B,CACA,IAAK,MAAMA,KAAK+C,EAAI,CACnB,MAAMkQ,EAAKjT,EAAEiM,qBACTgH,IAAOvE,WAAWC,YAClBsE,EAAKE,IAAKA,EAAMF,GACrB,CACA,IAAK,MAAMjT,KAAK+C,EAAI,CACnB,MAAMkQ,EAAKjT,EAAEiM,qBACTgH,IAAOvE,WAAWC,aAClBsE,EAAKzB,GAAYyB,EAAKxB,IAAStB,EAAG3S,IAAIwC,GAC3C,CACA,OAAOmT,CACR,CAEArW,OACCF,MAAKmE,EAAqC,OAApBnE,KAAKL,WAAuByE,OAAOC,UAAaC,KAAKC,MAAQvE,KAAKL,WACxFK,MAAKwE,EAAgB,EACrBxE,MAAK6L,GAAiB,EAEtB,MAAM8D,EAAM3P,KAAKP,KAAKiQ,0BACgB,IAAlC1P,KAAKP,KAAK2G,qBACbpG,KAAKP,KAAKqH,oBAEX,MAAM2N,EAAK,IAAIzQ,IACT0Q,EAAK,IAAI1Q,IACTiS,EAAK,IAAIjS,IACf,IAAK,MAAMlB,KAAK9C,KAAKP,KAAKgF,aACvB3B,EAAEf,UAAiBkU,EAALvB,GAAS9T,IAAIkC,GAG9B,MAAMyQ,EAAW,IAAIvP,IACfwS,EAAWxW,MAAKmW,GAAUzB,EAAInB,GACpC,IAAIuB,EACA2B,EAAU,KAEE,IAAZR,EAAGzU,MACNsT,EAAU0B,EACVC,EAAU/R,eAAeyI,cAAcuH,IAEvCI,EAAK9U,MAAKmT,GAEX,MAAM4B,EAAM4B,wBAAuBnK,EAAYxM,MAAKqT,GAAQqB,EAAInB,GAAK0C,GAC/DhB,EAAM0B,wBAAuBhK,EAAa+H,EAAIK,GACpD,IAAI2B,EAAS1W,MAAKkV,GAAcT,EAAIQ,EAAKF,EAAK/U,MAAKkT,GAAKlT,MAAKkT,GAAK4B,GAOlE,OANI4B,EAAS5B,GACI,OAAZ2B,GACHA,EAAQvR,QAGVwR,EAAS1W,KAAKP,KAAKiQ,0BACZgH,EAAS/G,GAAO+G,EAAS,IAA6B,IAAvB1W,MAAK6L,GAA2C,OAApB7L,KAAKJ,WACxE,EAWD,MAAMgX,aAAarX,OAGlB8B,wBAA0B,EAE1BoM,GAAuB,IAAIzJ,IAC3B0J,GAAuB,IAAI1J,IAC3B2J,GAAuB,GACvBC,GAAuB,GAEvBU,IAAW,IAAItK,IAEfQ,GACAL,GACA0J,IAAY,EAEZ/N,YAAYyC,GACXC,MAAMD,GACN,IAAK,MAAMa,KAAKpD,KAAKP,KAAKyD,cACzBlD,MAAK2N,EAAOhI,KAAK,IAAI6H,UAAUM,SAAS1K,IACxCpD,MAAK4N,EAAqBjI,KAAK,KAEjC,CAEA1F,OACC,MAAO,OACR,CAEAe,cAAcC,EAAUC,GACvB,OAAO,CACR,CAEA6M,GAAwB3K,GACvB,MAAMvB,EAAQuB,EAAEvB,QAKhB,OAHyC,OAArC7B,MAAK4N,EAAqB/L,KAC7B7B,MAAK4N,EAAqB/L,GAASuB,EAAE4K,aAE/BhO,MAAK4N,EAAqB/L,EAClC,CAEAoM,GAAQC,GACHlO,KAAKR,QAAQsF,QAAQC,IAAI,UAE7B,MAAMoJ,EAAa,IAAIzJ,eACjBmS,EAAa3I,EAAGmB,qBAChB8F,EAAanV,KAAKP,KAAKiQ,0BAC7B,IAAIoH,EAAU5I,EAAGmB,qBAIjB,IAAK,IAAIlN,EAAI,EAAGA,EAAI+L,EAAG1M,SAAUW,EAAG,CACnC,MAAMW,EAAQoL,EAAGjK,GAAG9B,GACdY,EAAQD,EAAEE,QACVC,EAAQH,EAAEI,cAEhBI,EAAK,IAAK,MAAMC,KAAKT,EAAEU,SAAU,CAChC,GAAIT,IAAUQ,EAAG,SACjBT,EAAEW,OAAOF,GACT,MAAMwT,EAAO7I,EAAGmB,qBAEhB,KAAIwH,EAAUE,GAAQD,EAAUC,EAAOH,KAAKI,kBAA5C,CAEA,IAAK,MAAM5T,KAAKH,EAAK,CACpB,GAAIG,IAAM8K,EAAI,SACd,MAAMuB,EAAMrM,EAAEiM,qBAEd,GAAII,IAAQqC,WAAWC,WAAatC,EAAM0F,EAAK,SAAS7R,CACzD,CACIyT,EAAOD,IACVA,EAAUC,EACV5I,EAAWxK,SAEZwK,EAAWvK,YAAYd,EAAGS,EAZoC,CAa/D,CACAT,EAAEW,OAAOV,EACV,CACA,GAAIoL,EAAW3M,OAAS,EAAG,CAC1B,MAAMwD,EAAIhF,MAAK6N,EAAYM,EAAWlJ,sBAAwBkJ,EAAWlH,IAAI,GAI7E,OAHAnC,QAAQC,IAAIC,GACZA,EAAEE,QACElF,KAAKR,QAAQsF,QAAQC,IAAI,KAAOC,IAC7B,CACR,CACA,OAAO,CACR,CAEAoJ,GAAQC,GACHrO,KAAKR,QAAQsF,QAAQC,IAAI,UAE7B,IAAIkS,GAAc,EAClB,OAAa,CAEZ,GADA5I,EAAOA,EAAKE,SACRvO,MAAKsO,GAAS1C,OAAOyC,GAAO,CAC/B4I,GAAc,EACd,KACD,CACA,IAAKjX,MAAKiO,EAAQI,EAAKE,SAASE,aAAc,KAC/C,CACA,MAAM7E,EAAO,GACbyE,EAAKG,eAAe5E,GAEpB,IAAK,MAAMtD,KAAKsD,EACftD,EAAE3C,QACF3D,MAAK0N,EAAU9B,OAAOtF,GACtBtG,MAAKyN,EAAY7B,OAAOtF,GAGpB2Q,GACJjX,MAAK0N,EAAU9M,IAAIyN,EAErB,CAEAK,GAAQL,GACHrO,KAAKR,QAAQsF,QAAQC,IAAI,UAC7B/E,MAAKyN,EAAY7M,IAAIyN,GAErB,IAAK,MAAMjL,KAAKpD,MAAK+N,EAAwBM,EAAKI,aAAc,CAC/D,MAAMyI,EAAKlX,MAAK2N,EAAOvK,EAAEvB,SAEpB7B,MAAKyN,EAAYxF,IAAIiP,IAAQlX,MAAK0N,EAAUzF,IAAIiP,KACpD7I,EAAKzN,IAAIsW,GACTlX,MAAK0N,EAAU9M,IAAIsW,GAErB,CACD,CAEAtI,MACK5O,KAAKR,QAAQsF,QAAQC,IAAI,OAE7B,MAAOoS,GAAUnX,KAAKP,KAAKmQ,yCAC3B,IAAK,MAAMxM,KAAK+T,EAAO,CACtB,MAAMD,EAAKlX,MAAK2N,EAAOvK,EAAEvB,SACzBqV,EAAGE,UAAU,MACbpX,MAAKsO,GAAS1N,IAAIsW,EACnB,CACAlX,MAAKyN,EAAY9J,QACjB3D,MAAK0N,EAAU/J,QACf,IAAK,MAAM2C,KAAKtG,MAAKsO,GACpBtO,MAAK0N,EAAU9M,IAAI0F,GAGpB,KAAOtG,MAAKsO,GAAS9M,MAAQxB,MAAK0N,EAAUlM,MAAM,CACjD,GAAIxB,KAAKN,YAAcM,KAAKN,WAAa8E,YAExC,OADIxE,KAAKR,QAAQsF,QAAQC,IAAI,qDACtB,EAER,GAAI/E,MAAKmE,EAAWG,KAAKC,MAExB,OADIvE,KAAKR,QAAQsF,QAAQC,IAAI,sCACtB,EAGR,MAAMsJ,EAAOrO,MAAK0N,EAAUV,SAASC,OAAOjK,MAG5C,GAFAhD,MAAK0N,EAAU9B,OAAOyC,GAElBrO,MAAKiO,EAAQI,EAAKI,aAAc,CACnC,GAAIzO,MAAKsO,GAAS1C,OAAOyC,GAAO,SAChC,GAAIrO,MAAKiO,EAAQI,EAAKE,SAASE,aAAc,CAC5CzO,MAAKoO,EAAQC,GACb,QACD,CACD,CACArO,MAAK0O,EAAQL,EACd,CACA,OAAO,CACR,CAEAnO,OAGC,GAFAF,MAAKmE,EAAkC,OAApBnE,KAAKL,WAAuByE,OAAOC,UAAaC,KAAKC,MAAQvE,KAAKL,WACrFK,MAAKwE,EAAa,EACdxE,KAAKJ,YAAcI,KAAKJ,YAAcI,KAAKP,KAAKiQ,0BACnD,OAAO,EAER,MAAMrK,EAAM,IAAIX,eAEhB,IAAI6N,GAAU,EACd,OAAa,CAEZ,IADYvS,MAAK4O,MACL5O,MAAKsO,GAAS9M,KACzB,MAED,MAAM6V,EAAmBrX,KAAKP,KAAKiQ,0BAMnC,GALI1P,KAAKR,QACRsF,QAAQC,IAAK,uBAAsBsS,MAAqBrX,KAAKJ,cAE9DyF,EAAIsB,WAAW3G,KAAKP,MAEhBO,KAAKgB,cAAcqE,EAAKgS,GAAmB,CAC9C9E,GAAU,EACV,KACD,CACA,GAAwB,OAApBvS,KAAKJ,WACR2S,GAAU,OACJ,GAAIvS,KAAKJ,YAAcyX,EAAkB,CAC3CrX,KAAKR,QAAQsF,QAAQC,IAAI,4CAC7BwN,GAAU,EACV,KACD,CACD,CACA,OAAOA,CACR,CAOA1D,cAAczH,GACbpH,MAAK6N,EAAYzG,CAClB,EAID,CAEC,MAAM0G,EAELgB,IAAY,GACZP,IACAQ,IAEAjP,YAAYiP,GACX/O,MAAK+O,GAAOA,CACb,CAEAnO,IAAIoO,GACHA,GAAGT,GAAUvO,KACbA,MAAK8O,GAAUnJ,KAAKqJ,EACrB,CAEArL,QACC,IAAK,MAAMqL,KAAMhP,MAAK8O,GACrBE,GAAGT,GAAU,KAEdvO,MAAK8O,GAAU9M,OAAS,CACzB,CAEAwM,eAAeS,GACdA,EAAItJ,KAAK3F,MAET,IAAK,MAAMgP,KAAMhP,MAAK8O,GACrBE,EAAGR,eAAeS,EAEpB,CAEAR,YACC,OAAOzO,MAAK+O,EACb,CAEAR,SACC,OAAOvO,MAAKuO,EACb,CAEA6I,UAAU7U,GACTvC,MAAKuO,GAAUhM,CAChB,EAGDiL,UAAUM,SAAWA,CAEtB,CASA,MAAMwJ,gBAAgBV,KAErB9W,YAAYyC,GACXC,MAAMD,EACP,CAEAtC,OACC,MAAO,YACR,CAEAC,OACC,IAAIuP,EAAM,EACN8H,EAAM,EACNvX,KAAKR,SACRiQ,EAAMzP,KAAKP,KAAKiQ,0BAChB6H,EAAMvX,KAAKP,KAAK2G,qBAEjB,MAAMnC,EAAK,IAAIS,eACfT,EAAG0C,WAAW3G,KAAKP,MAEnB,MAAM+T,EAAMhR,MAAMtC,OAUlB,OARIsT,GACHgE,kBAAkBtS,MAAMlF,KAAKP,KAAMwE,GAEhCjE,KAAKR,SACRsF,QAAQC,IAAK,YAAUyO,EAAM,UAAY,YACzC1O,QAAQC,IAAK,wBAAuB0K,QAAUzP,KAAKP,KAAKiQ,6BACxD5K,QAAQC,IAAK,qBAAoBwS,QAAUvX,KAAKP,KAAK2G,wBAE/CoN,CACR,EAYD,MAAMiE,IAELpW,UAAyB+B,EAAGsU,GAC3B,IAAK,MAAMnN,KAAOmN,EAAIlU,SAGrB,GAFAkU,EAAIjU,OAAO8G,GAEa,IAApBnH,EAAEC,cACL,OAAO,EAGT,OAAO,CACR,CAEAhC,UAAqBkB,EAAGyD,EAAK0R,GAC5B,MAAMC,EAAQ3R,EAAIhD,QACZ4U,EAAQF,EAAI1U,QACZiD,EAAQD,EAAIxC,SACZoG,EAAQ,GAERzD,EAAK5D,EAAEqD,mBAAmBI,EAAK0R,GAErCG,EAAM,IAAK,MAAMtN,KAAOtE,EAAK,CAC5BD,EAAIvC,OAAO8G,GAEX,IAAK,MAAMnH,KAAK+C,EACf,GAAiB,IAAb/C,EAAE5B,SACDiW,KAAIK,GAAkB1U,EAAGsU,GAAM,SAASG,EAE9CjO,EAAKjE,KAAK4E,EACX,CAIA,GAHAvE,EAAIvC,OAAOkU,GACXD,EAAIjU,OAAOmU,GAEPhO,EAAK5H,SAAWiE,EAAIzE,OAAQ,CAC/B,MAAMuW,EAAKxV,EAAEyV,aAAa,CAAEhL,OAAQpD,IAGpC,OAFA5D,EAAIiS,UAAUF,GACdjT,QAAQC,IAAIkB,EAAIzE,OAAS,OAASuW,EAAGvW,SAC9B,CACR,CACA,OAAO,CACR,CAEAH,aAAakB,GACZ,MAAM4D,EAAK,GAEX,IAAK,MAAM/C,KAAKb,EAAEW,cACA,IAAbE,EAAE5B,QAAc2E,EAAGvF,IAAIwC,GAE5B,MAAQ+C,EAAGpE,WAAW,CACrB,MAAMqB,EAAM+C,EAAG+R,OAAO/R,EAAG3E,OAAS,GAC5B2W,EAAM/U,EAAEa,GAAG,GACXmU,EAAMhV,EAAEa,GAAG,GAEjB,GAAIwT,KAAIY,GAAc9V,EAAG4V,EAAKC,GAC7B,IAAK,MAAME,KAAM/V,EAAEW,cACA,IAAdoV,EAAG9W,QAAgB8W,EAAGrU,GAAG,KAAOkU,GAAOG,EAAGrU,GAAG,KAAOmU,GACvDjS,EAAGvF,IAAI,EAAG0X,EAId,CACD,EAWD,MAAMC,gBASLlX,aAAakB,EAAGiW,GACf,IAAK,MAAM1V,KAAKP,EAAEkC,YAAa,CAC9B,MAAMlB,EAAUT,EAAEU,SACZuF,EAAUjG,EAAEE,QACZyV,EAAU,GAEhB,IAAK,IAAItW,EAAI,EAAGA,EAAIW,EAAEtB,SAAUW,EAAG,CAClC,MAAMiB,EAAIN,EAAEmB,GAAG9B,GACf,GAAiB,IAAbiB,EAAE5B,OAAN,CAEA,IAAK,MAAM+I,KAAOhH,EACjBT,EAAEW,OAAO8G,GAELnH,EAAEiM,sBAAwBmJ,GAC7BC,EAAK9S,KAAK4E,GAGZhI,EAAEmW,iBAAiBtV,EATC,CAUrB,CAEA,GADAN,EAAEW,OAAOsF,GACW,IAAhB0P,EAAKzW,OACR,OAAO,EAERc,EAAEmV,UAAU1V,EAAEyV,aAAa,CAAEhL,OAAQyL,IACtC,CACA,OAAO,CACR,CAQApX,aAAakB,GACZ,IAAK,MAAMO,KAAKP,EAAEkC,YAAa,CAC9B,MAAMlB,EAAUT,EAAEU,SACZuF,EAAUjG,EAAEE,QACZyV,EAAU,GAEhB,IAAK,IAAItW,EAAI,EAAGA,EAAIW,EAAEtB,SAAUW,EAAG,CAClC,MAAMiB,EAAIN,EAAEmB,GAAG9B,GACf,GAAiB,IAAbiB,EAAE5B,OAAN,CAEA,IAAK,MAAM+I,KAAOhH,EACjBT,EAAEW,OAAO8G,GAEe,IAApBnH,EAAEC,eACLoV,EAAK9S,KAAK4E,GAGZhI,EAAEmW,iBAAiBtV,EATC,CAUrB,CAEA,GADAN,EAAEW,OAAOsF,GACW,IAAhB0P,EAAKzW,OACR,OAAO,EAERc,EAAEmV,UAAU1V,EAAEyV,aAAa,CAAEhL,OAAQyL,IACtC,CACA,OAAO,CACR,EAWD,MAAMjB,kBAELnW,aAAakB,EAAGoW,GAGf,IAAIC,EAFJ9T,QAAQC,IAAI,4BAGZ,IAAI3E,EAAQ,EAEZ,EAAG,CACF0E,QAAQC,IAAI,6BAA+B3E,KAE3CwY,GAAa,EACb,IAAIC,EAAQtW,EAAEmN,0BAEd,IAAK,IAAIvN,EAAI,EAAGA,EAAII,EAAEmE,iBAAkBvE,EAAG,CAC1C,MAAMW,EAAIP,EAAEuW,WAAW3W,GACjB4W,EAAMjW,EAAEE,QAERgE,EAAI2R,EAAK1R,IAAI9E,GACf4W,IAAQ/R,EAAEhE,UAEdgE,EAAE9B,QACE3C,EAAEmN,2BAA6BmJ,EAClCD,GAAa,EAEb9V,EAAEW,OAAOsV,GAEX,CACD,OAASH,GAGT,OADA9T,QAAQC,IAAI,8BACL,CACR","file":"solver.min.js","sourcesContent":["/**\n * The interface of solvers for finding solutions to constraint satisfaction problems.\n *\n * @author Takuto Yanagida\n * @version 2023-03-25\n */\n\nclass Solver {\n\n\t_debug = true;\n\n\t/**\n\t * The crisp/fuzzy constraint satisfaction problem solved by the solver.\n\t */\n\t_pro;\n\n\t/**\n\t *  Limit number of iterations.\n\t */\n\t_iterLimit = null;\n\n\t/**\n\t * Time limit.\n\t */\n\t_timeLimit = null;\n\n\t/**\n\t * Target 'satisfied constraint rate' or 'constraint satisfaction degree'.\n\t */\n\t_targetDeg = 0.8;\n\n\t/**\n\t * Listeners of this solver.\n\t */\n\t#listener = [];\n\n\t/**\n\t * Generates a solver given a constraint satisfaction problem.\n\t * @param pro A constraint satisfaction problem.\n\t */\n\tconstructor(pro) {\n\t\tthis._pro = pro;\n\t}\n\n\t/**\n\t * Returns the name of the solver.\n\t * @return The name.\n\t */\n\tname() {\n\t\treturn '';\n\t}\n\n\t/**\n\t * Placeholder for implementing an algorithm.\n\t * The solve method calls this method and returns the return value of this method.\n\t * @return True if the algorithm succeeds,\n\t */\n\texec() {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Sets and limits the maximum number of iterations for the solver's behavior.\n\t * After the specified number of iterations, the solver stops as a failure. The specific behavior depends on the solver.\n\t * @param count Maximum value; null means not set.\n\t */\n\tsetIterationLimit(count = null) {\n\t\tthis._iterLimit = count;\n\t}\n\n\t/**\n\t * Sets a time limit on the solver's behavior.\n\t * If the specified time is exceeded, the solver stops as a failure. The specific behavior depends on the solver.\n\t * @param msec Time limit. null means not set.\n\t */\n\tsetTimeLimit(msec = null) {\n\t\tthis._timeLimit = msec;\n\t}\n\n\t/**\n\t * The goal to be achieved, which is the condition for stopping the solver, is set as the constraint satisfaction degree (fuzzy) or the percentage of constraints satisfied (crisp).\n\t * The solver stops as success if the specified percentage is reached or exceeded. The specific behavior depends on the solver.\n\t * @param rate Degree or rate. null indicates not set.\n\t */\n\tsetTargetRate(rate = null) {\n\t\tthis._targetDeg = rate;\n\t}\n\n\t/**\n\t * Computes the solution to a constraint satisfaction problem.\n\t * The specific meaning of the return value depends on the implementation of the algorithm.\n\t * @return True if the algorithm succeeds\n\t */\n\tsolve() {\n\t\treturn this.exec();\n\t}\n\n\taddListener(l) {\n\t\tthis.#listener.add(l);\n\t}\n\n\tremoveListener(l) {\n\t\tthis.#listener.splice(this.#listener.indexOf(l), 1);\n\t}\n\n\tfoundSolution(solution, worstDegree) {\n\t\tlet finish = false;\n\n\t\tfor (const l of this.#listener) {\n\t\t\tif (l.foundSolution(solution, worstDegree)) {\n\t\t\t\tfinish = true;\n\t\t\t}\n\t\t}\n\t\treturn finish;\n\t}\n\n}\n\n/**\n * This class holds the branch pruning states for a domain.\n *\n * @author Takuto Yanagida\n * @version 2023-03-25\n */\n\nclass DomainPruner {\n\n\tstatic #UNHIDDEN = -1;\n\n\t#hiddenLevels;\n\t#hiddenSize = 0;\n\n\t/**\n\t * Generates a class that holds branch pruning states for a domain.\n\t * @param size Size of the corresponding domain\n\t */\n\tconstructor(size) {\n\t\tthis.#hiddenLevels = new Array(size);\n\t\tthis.#hiddenLevels.fill(DomainPruner.#UNHIDDEN);\n\t}\n\n\t/**\n\t * Returns the size of the erased element.\n\t * @return Size of the erased element.\n\t */\n\thiddenSize() {\n\t\treturn this.#hiddenSize;\n\t}\n\n\t/**\n\t * Erases the element at the specified index.\n\t * @param index Index.\n\t * @param level Level.\n\t */\n\thide(index, level) {\n\t\tif (this.#hiddenLevels[index] === DomainPruner.#UNHIDDEN) {\n\t\t\t++this.#hiddenSize;\n\t\t}\n\t\tthis.#hiddenLevels[index] = level;\n\t}\n\n\t/**\n\t * Returns whether the element is empty or not.\n\t * Returns true if all elements have been erased.\n\t * @return True if empty.\n\t */\n\tisEmpty() {\n\t\treturn this.#hiddenLevels.length === this.#hiddenSize;\n\t}\n\n\t/**\n\t * Returns whether or not the element at the specified index has been erased.\n\t * @param index Index.\n\t * @return True if erased.\n\t */\n\tisValueHidden(index) {\n\t\treturn this.#hiddenLevels[index] !== DomainPruner.#UNHIDDEN;\n\t}\n\n\t/**\n\t * Restores the value that had been erased, by specifying a level.\n\t * @param level Level\n\t */\n\treveal(level) {\n\t\tfor (let i = 0; i < this.#hiddenLevels.length; i++) {\n\t\t\tif (this.#hiddenLevels[i] === level) {\n\t\t\t\tthis.#hiddenLevels[i] = DomainPruner.#UNHIDDEN;\n\t\t\t\t--this.#hiddenSize;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Restores all erased values.\n\t */\n\trevealAll() {\n\t\tthis.#hiddenLevels.fill(DomainPruner.#UNHIDDEN);\n\t\tthis.#hiddenSize = 0;\n\t}\n\n}\n\n\n/**\n * Class implements a solver using the breakout method.\n * Solves a problem as a maximum CSP.\n *\n * @author Takuto Yanagida\n * @version 2023-04-10\n */\n\nclass Breakout extends Solver {\n\n\t#weights;\n\n\tconstructor(p) {\n\t\tsuper(p);\n\t\tthis.#weights = new Array(this._pro.constraintSize());\n\t\tthis.#weights.fill(1);\n\t}\n\n\tname() {\n\t\treturn 'Breakout';\n\t}\n\n\t#findCandidates(vioVars, canList) {\n\t\tlet maxDiff = 0;\n\n\t\tfor (const v of vioVars) {\n\t\t\tconst v_val = v.value();  // Save the value\n\t\t\tconst v_c   = v.constraints();\n\n\t\t\tlet nowVio = 0;\n\t\t\tfor (const c of v_c) {\n\t\t\t\tnowVio += (1 - c.isSatisfied()) * this.#weights[c.index()];\n\t\t\t}\n\t\t\tout: for (const d of v.domain()) {\n\t\t\t\tif (v_val === d) continue;\n\t\t\t\tv.assign(d);\n\t\t\t\tlet diff = nowVio;\n\t\t\t\tfor (const c of v_c) {\n\t\t\t\t\tdiff -= (1 - c.isSatisfied()) * this.#weights[c.index()];\n\t\t\t\t\t// If the improvement is less than the previous improvement, try the next variable.\n\t\t\t\t\tif (diff < maxDiff) {\n\t\t\t\t\t\tcontinue out;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (diff > maxDiff) {  // Found assignments that are better than ever before.\n\t\t\t\t\tmaxDiff = diff;\n\t\t\t\t\tcanList.clear();\n\t\t\t\t\tcanList.addVariable(v, d);\n\t\t\t\t} else if (maxDiff !== 0) {  // Found assignments that can be improved to the same level as before.\n\t\t\t\t\tcanList.addVariable(v, d);\n\t\t\t\t}\n\t\t\t}\n\t\t\tv.assign(v_val);  // Restore the value.\n\t\t}\n\t}\n\n\t#listViolatingVariables(vioCons) {\n\t\tconst vvs = new Set();\n\t\tfor (const c of vioCons) {\n\t\t\tfor (let i = 0; i < c.size(); ++i) {\n\t\t\t\tvvs.add(c.at(i));\n\t\t\t}\n\t\t}\n\t\treturn Array.from(vvs);\n\t}\n\n\texec() {\n\t\tconst endTime = (this._timeLimit === null) ? Number.MAX_VALUE : (Date.now() + this._timeLimit);\n\t\tlet iterCount = 0;\n\n\t\tfor (const v of this._pro.variables()) {\n\t\t\tif (v.isEmpty()) v.assign(v.domain().at(0));\n\t\t}\n\n\t\tconst canList = new AssignmentList();\n\n\t\twhile (true) {\n\t\t\tconst vc = this._pro.violatingConstraints();\n\t\t\tif ((this._targetDeg ?? 1) <= this._pro.satisfiedConstraintRate()) {  // Success if violation rate improves from specified\n\t\t\t\tif (this._debug) console.log('stop: current degree is above the target');\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (this._iterLimit && this._iterLimit < iterCount++) {  // Failure if repeated a specified number\n\t\t\t\tif (this._debug) console.log('stop: number of iterations has reached the limit');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (endTime < Date.now()) {  // Failure if time limit is exceeded\n\t\t\t\tif (this._debug) console.log('stop: time limit has been reached');\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (this._debug) console.log(vc.length + ' violations');\n\t\t\tthis.#findCandidates(this.#listViolatingVariables(vc), canList);\n\n\t\t\tif (0 < canList.size()) {\n\t\t\t\tconst e = canList.arbitraryAssignment();\n\t\t\t\te.apply();\n\t\t\t\tcanList.clear();\n\t\t\t\tif (this._debug) console.log(\"\\t\" + e);\n\t\t\t} else {\n\t\t\t\tfor (let i = 0; i < vc.length; ++i) this.#weights[vc[i].index()]++;\n\t\t\t\tif (this._debug) console.log('breakout');\n\t\t\t}\n\t\t}\n\t}\n\n}\n\n/**\n * This class that implements the forward checking method.\n * The minimum-remaining-values (MRV) heuristic can also be used by specifying the option.\n * Searches for variable assignments that satisfy all constraints and fails if none are found.\n * Each variable must have its own domain because it hides domain elements as branch pruning.\n * Forward checking is also performed for problems with polynomial constraints.\n *\n * @author Takuto Yanagida\n * @version 2023-04-10\n */\n\nclass ForwardChecking extends Solver {\n\n\t#vars;\n\t#sol = new AssignmentList();\n\t#relCons;  // Table to cache constraints between two variables.\n\n\t#useMRV = false;\n\n\t#iterCount;\n\t#endTime;\n\n\t/**\n\t * Generates a solver given a constraint satisfaction problem.\n\t * @param p A problem.\n\t */\n\tconstructor(p) {\n\t\tsuper(p);\n\t\tthis.#vars = [...this._pro.variables()];\n\t\tfor (const v of this.#vars) {\n\t\t\tv.solverObject = new DomainPruner(v.domain().size());\n\t\t}\n\t\tthis.#initializeRelatedConstraintTable();\n\t}\n\n\tname() {\n\t\treturn 'Forward Checking';\n\t}\n\n\t// Initializes a table that caches constraints between two variables.\n\t#initializeRelatedConstraintTable() {\n\t\tconst temp     = [];\n\t\tthis.#relCons = [];\n\n\t\tfor (let j = 0; j < this.#vars.length; ++j) {\n\t\t\tthis.#relCons.push(new Array(this.#vars.length));\n\n\t\t\tfor (let i = 0; i < this.#vars.length; ++i) {\n\t\t\t\tif (i < j) {\n\t\t\t\t\tthis.#relCons[j][i] = this._pro.constraintsBetween(this.#vars[i], this.#vars[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Retrieves an array of constraints from a table that caches constraints between two variables.\n\t#getConstraintsBetween(i, j) {\n\t\tif (i < j) {\n\t\t\treturn this.#relCons[j][i];\n\t\t}\n\t\treturn this.#relCons[i][j];\n\t}\n\n\t// Checks for possible assignment to a future variable from the current variable assignment.\n\t#checkForward(level, currentIndex) {\n\t\tfor (const v_i of this.#vars) {\n\t\t\tif (!v_i.isEmpty()) continue;  // If it is a past or present variable.\n\t\t\tconst d_i  = v_i.domain();\n\t\t\tconst dc_i = v_i.solverObject;\n\t\t\tconst cs   = this.#getConstraintsBetween(currentIndex, v_i.index());\n\n\t\t\tfor (const c of cs) {\n\t\t\t\tif (c.emptyVariableSize() !== 1) continue;\n\n\t\t\t\tfor (let k = 0, n = d_i.size(); k < n; ++k) {\n\t\t\t\t\tif (dc_i.isValueHidden(k)) continue;\n\t\t\t\t\tv_i.assign(d_i.at(k));\n\n\t\t\t\t\tif (c.isSatisfied() === 0) {  // Do hide when in violation (not even undefined).\n\t\t\t\t\t\tdc_i.hide(k, level);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tv_i.clear();\n\t\t\t\tif (dc_i.isEmpty()) return false;  // Failure if the domain of one of the future variables is empty.\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t// Returns the index of the smallest domain variable.\n\t#indexOfVariableWithMRV() {\n\t\tlet index = 0;\n\t\tlet size  = Number.MAX_VALUE;\n\n\t\tfor (let i = 0; i < this.#vars.length; ++i) {\n\t\t\tconst v = this.#vars[i];\n\t\t\tif (!v.isEmpty()) continue;\n\t\t\tconst d = v.domain();\n\t\t\tconst s = d.size() - v.solverObject.hiddenSize();\n\t\t\tif (s < size) {\n\t\t\t\tsize  = s;\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\t\treturn index;\n\t}\n\n\t// Searches for one variable at a time.\n\t#branch(level) {\n\t\tif (this._iterLimit && this._iterLimit < this.#iterCount++) {  // Failure if repeated a specified number.\n\t\t\tif (this._debug) console.log('stop: number of iterations has reached the limit');\n\t\t\treturn false;\n\t\t}\n\t\tif (this.#endTime < Date.now()) {  // Failure if time limit is exceeded.\n\t\t\tif (this._debug) console.log('stop: time limit has been reached');\n\t\t\treturn false;\n\t\t}\n\n\t\tif (level === this._pro.variableSize()) {\n\t\t\tthis.#sol.setProblem(this._pro);\n\t\t\treturn true;\n\t\t}\n\t\tconst vc_index = this.#useMRV ? this.#indexOfVariableWithMRV() : level;\n\t\tconst vc       = this.#vars[vc_index];\n\t\tconst d        = vc.domain();\n\t\tconst dc       = vc.solverObject;\n\t\tfor (let i = 0, n = d.size(); i < n; ++i) {\n\t\t\tif (dc.isValueHidden(i)) continue;\n\t\t\tvc.assign(d.at(i));\n\t\t\tif (this.#checkForward(level, vc_index) && this.#branch(level + 1)) return true;\n\t\t\tfor (const v of this.#vars) {\n\t\t\t\tv.solverObject.reveal(level);\n\t\t\t}\n\t\t}\n\t\tvc.clear();\n\t\treturn false;\n\t}\n\n\t// Do search.\n\texec() {\n\t\tthis.#endTime   = (this._timeLimit === null) ? Number.MAX_VALUE : (Date.now() + this._timeLimit);\n\t\tthis.#iterCount = 0;\n\n\t\tthis._pro.clearAllVariables();\n\t\tconst r = this.#branch(0);\n\n\t\tfor (let i = 0; i < this.#sol.size(); ++i) {\n\t\t\tconst a = this.#sol.get(i);\n\t\t\ta.apply();\n\t\t\ta.variable().solverObject.revealAll();\n\t\t}\n\t\treturn r;\n\t}\n\n\t/**\n\t * The settings made by this method are invalid.\n\t */\n\tsetTargetRate() {\n\t\t// Do nothing.\n\t}\n\n\t/**\n\t * Specify whether to use the minimum-remaining-values (MRV) heuristic.\n\t * Use of MRV may increase processing time for some problems.\n\t * Default is false.\n\t * @param flag Use MRV if true.\n\t */\n\tsetUsingMinimumRemainingValuesHeuristics(flag) {\n\t\tthis.#useMRV = flag;\n\t}\n\n}\n\n/**\n * This class that implements the forward checking method.\n * Find the solution to the problem as the maximum CSP.\n * Each variable must have its own domain because it hides domain elements as branch pruning.\n *\n * @author Takuto Yanagida\n * @version 2023-03-31\n */\n\nclass MaxForwardChecking extends Solver {\n\n\t#vars;\n\t#sol = new AssignmentList();\n\n\t#maxVioCount;\n\t#vioCount;\n\t#checkedCons = new Set();\n\t#cons = [];\n\n\t#iterCount;\n\t#endTime;\n\n\tconstructor(p) {\n\t\tsuper(p);\n\t\tthis.#vars = [...this._pro.variables()];\n\t\tfor (const v of this.#vars) {\n\t\t\tv.solverObject = new DomainPruner(v.domain().size());\n\t\t}\n\t\tthis.#maxVioCount = this._pro.constraintSize();\n\t}\n\n\tname() {\n\t\treturn 'Forward Checking for Max CSPs';\n\t}\n\n\t#branch(level, vioCount) {\n\t\tif (this._iterLimit && this._iterLimit < this.#iterCount++) return false;  // Failure if repeated a specified number.\n\t\tif (this.#endTime < Date.now()) return false;  // Failure if time limit is exceeded.\n\n\t\tif (level === this._pro.variableSize()) {\n\t\t\tconst vcs = this._pro.violatingConstraintSize();\n\t\t\tif (vcs < this.#maxVioCount) {\n\t\t\t\tthis.#maxVioCount = vcs;\n\t\t\t\tthis.#sol.setProblem(this._pro);\n\t\t\t\tif (this._debug) console.log(`   refreshed ${this.#maxVioCount}`);\n\t\t\t\tif ((this._targetDeg ?? 1) <= this._pro.satisfiedConstraintRate()) return true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\tconst vc  = this.#vars[level];\n\t\tconst dom = vc.domain();\n\t\tconst dc  = vc.solverObject;\n\n\t\tfor (let i = 0; i < dom.size(); ++i) {\n\t\t\tif (dc.isValueHidden(i)) continue;\n\t\t\tvc.assign(dom.at(i));\n\t\t\tthis.#vioCount = vioCount + this.#getAdditionalViolationCount(level, vc);  // for max begin\n\t\t\tif (this.#vioCount > this.#maxVioCount) continue;  // for max end\n\t\t\tif (this.#checkForward(level) && this.#branch(level + 1, this.#vioCount)) return true;\n\t\t\tfor (const v of this.#vars) {\n\t\t\t\tv.solverObject.reveal(level);\n\t\t\t}\n\t\t}\n\t\tvc.clear();\n\t\treturn false;\n\t}\n\n\t// Checks for possible assignment to a future variable from the current variable assignment.\n\t#checkForward(level) {\n\t\tconst vc = this.#vars[level];\n\n\t\tfor (let i = level + 1; i < this.#vars.length; ++i) {\n\t\t\tconst future = this.#vars[i];\n\t\t\tthis.#cons = this._pro.constraintsBetween(vc, future);\n\n\t\t\tfor (const c of this.#cons) {\n\t\t\t\tif (c.emptyVariableSize() !== 1) continue;\n\t\t\t\tif (this.#revise(future, c, level)) {\n\t\t\t\t\tif (future.solverObject.isEmpty()) return false;  // Failure if the domain of one of the future variables is empty.\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t// Find the number of constraint violations that have increased due to the current value of the variable vc.\n\t#getAdditionalViolationCount(level, vc) {\n\t\tlet avc = 0;\n\t\tthis.#checkedCons.clear();  // Reuse.\n\t\tfor (let i = 0; i < level; ++i) {\n\t\t\tthis.#cons = this._pro.constraintsBetween(vc, this.#vars[i]);\n\n\t\t\tfor (const c of this.#cons) {\n\t\t\t\tif (this.#checkedCons.has(c)) continue;  // Because of the possibility of duplication in polynomial constraints\n\t\t\t\tif (c.isSatisfied() === 0) ++avc;  // Neither satisfied nor undefined.\n\t\t\t\tthis.#checkedCons.add(c);\n\t\t\t}\n\t\t}\n\t\treturn avc;\n\t}\n\n\t// Remove values from the domain of v1 that do not correspond to v2. That is, match v1 with v2.\n\t#revise(v1, c, level) {\n\t\tlet deleted = false;\n\n\t\tconst dom = v1.domain();\n\t\tconst dc  = v1.solverObject;\n\n\t\tfor (let i = 0; i < dom.size(); ++i) {\n\t\t\tif (dc.isValueHidden(i)) continue;\n\t\t\tv1.assign(dom.at(i));\n\n\t\t\tif (c.isSatisfied() === 0 && this.#vioCount + 1 > this.#maxVioCount) {\n\t\t\t\tdc.hide(i, level);\n\t\t\t\tdeleted = true;\n\t\t\t}\n\t\t}\n\t\treturn deleted;\n\t}\n\n\texec() {\n\t\tthis.#endTime   = (this._timeLimit === null) ? Number.MAX_VALUE : (Date.now() + this._timeLimit);\n\t\tthis.#iterCount = 0;\n\n\t\tthis._pro.clearAllVariables();\n\t\tconst r = this.#branch(0, 0);\n\t\tif (this._debug) {\n\t\t\tif (r) {\n\t\t\t\tconsole.log('stop: current degree is above the target');\n\t\t\t} else {\n\t\t\t\tif (this._iterLimit && this._iterLimit < this.#iterCount) {\n\t\t\t\t\tconsole.log('stop: number of iterations has reached the limit');\n\t\t\t\t}\n\t\t\t\tif (this.#endTime < Date.now()) {\n\t\t\t\t\tconsole.log('stop: time limit has been reached');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (let i = 0; i < this.#sol.size(); ++i) {\n\t\t\tconst a = this.#sol.get(i);\n\t\t\ta.apply();\n\t\t\ta.variable().solverObject.revealAll();\n\t\t}\n\t\treturn r;\n\t}\n\n}\n\n/**\n * This class implements GENET.\n * CSP (but only Binary CSP) is supported.\n * Find the solution to the problem as the maximum CSP.\n *\n * @author Takuto Yanagida\n * @version 2023-04-10\n */\n\nclass GENET extends Solver {\n\n\tstatic nextInt(max) {\n\t\treturn Math.floor(Math.random() * Math.floor(max));\n\t}\n\n\t#clusters = [];\n\t#connections;\n\n\tconstructor(p) {\n\t\tsuper(p);\n\t\tif (!this.#createNetwork()) {\n\t\t\tthrow new Exception();\n\t\t}\n\t}\n\n\tname() {\n\t\treturn 'GENET';\n\t}\n\n\t#createNetwork() {\n\t\tif (this._debug) console.log('network creation start');\n\t\tconst cons = [];\n\n\t\tfor (const v of this._pro.variables()) {\n\t\t\tif (v.domain().size() === 0) return false;\n\t\t\tthis.#clusters.push(new GENET.Cluster(v));\n\t\t}\n\t\tfor (const c of this._pro.constraints()) {\n\t\t\tif (c.size() === 1) {  // In the case of unary constraints.\n\t\t\t\tconst v  = c.at(0);\n\t\t\t\tconst cl = this.#clusters[c.at(0).index()];\n\n\t\t\t\tfor (let i = 0; i < cl.size(); ++i) {\n\t\t\t\t\tconst origVal = v.value();  // Save the value.\n\t\t\t\t\tv.assign(cl.get(i)._value);\n\n\t\t\t\t\tif (c.isSatisfied() === 0) {\n\t\t\t\t\t\tcons.push(new GENET.Connection(cl.get(i)));\n\t\t\t\t\t}\n\t\t\t\t\tv.assign(origVal);  // Restore the value.\n\t\t\t\t}\n\t\t\t} else {  // In the case of binary constraints.\n\t\t\t\tconst v1   = c.at(0);\n\t\t\t\tconst v2   = c.at(1);\n\t\t\t\tconst cl_f = this.#clusters[c.at(0).index()];\n\t\t\t\tconst cl_s = this.#clusters[c.at(1).index()];\n\n\t\t\t\tfor (let i = 0; i < cl_f.size(); ++i) {\n\t\t\t\t\tconst origVal1 = v1.value();  // Save the value.\n\t\t\t\t\tv1.assign(cl_f.get(i)._value);\n\n\t\t\t\t\tfor (let j = 0; j < cl_s.size(); ++j) {\n\t\t\t\t\t\tconst origVal2 = v2.value();  // Save the value.\n\t\t\t\t\t\tv2.assign(cl_s.get(j)._value);\n\n\t\t\t\t\t\tif (c.isSatisfied() === 0) {\n\t\t\t\t\t\t\tcons.push(new GENET.Connection(cl_f.get(i), cl_s.get(j)));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tv2.assign(origVal2);  // Restore the value.\n\t\t\t\t\t}\n\t\t\t\t\tv1.assign(origVal1);  // Restore the value.\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (const cl of this.#clusters) {\n\t\t\tfor (const n of cl._neurons) n.lockConnections();\n\t\t}\n\t\tthis.#connections = cons;\n\t\tif (this._debug) console.log('network creation complete');\n\t\treturn true;\n\t}\n\n\t#shuffle(is) {\n\t\tfor (let i = is.length; i > 1; --i) {\n\t\t\tconst j    = GENET.nextInt(i);\n\t\t\tconst temp = is[i - 1];\n\t\t\tis[i - 1] = is[j];\n\t\t\tis[j]     = temp;\n\t\t}\n\t\treturn is;\n\t}\n\n\texec() {\n\t\tconst endTime = (this._timeLimit === null) ? Number.MAX_VALUE : (Date.now() + this._timeLimit);\n\t\tlet iterCount = 0;\n\n\t\tconst sol   = new AssignmentList();\n\t\tconst order = [];\n\t\tfor (let i = 0; i < this.#clusters.length; i++) {\n\t\t\torder.push(i);\n\t\t}\n\n\t\tlet cur = this._pro.satisfiedConstraintRate();\n\n\t\twhile (true) {\n\t\t\tif (this._iterLimit && this._iterLimit < iterCount++) {  // Failure if repeated a specified number\n\t\t\t\tif (this._debug) console.log('stop: number of iterations has reached the limit');\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (endTime < Date.now()) {  // Failure if time limit is exceeded\n\t\t\t\tif (this._debug) console.log('stop: time limit has been reached');\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tlet modified = false;\n\t\t\tfor (const i of this.#shuffle(order)) {\n\t\t\t\tif (this.#clusters[i].setActivityMaximumInput()) {\n\t\t\t\t\tmodified = true;  // Turn on the node with the largest input in each cluster\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!modified) {  // When the local minimum solution is reached.\n\t\t\t\tfor (const con of this.#connections) {\n\t\t\t\t\tcon.refreshWeight();  // Update weights for all connections\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor (const clu of this.#clusters) {\n\t\t\t\t\tclu.applyToVariable();  // Apply to variable\n\t\t\t\t}\n\t\t\t\tconst d = this._pro.satisfiedConstraintRate();\n\t\t\t\tif (cur < d) {  // If it's a better assignment than ever, save it.\n\t\t\t\t\tcur = d;\n\t\t\t\t\tif (this._debug) console.log(`satisfied constraint rate: ${d}`);\n\t\t\t\t\tsol.setProblem(this._pro);\n\t\t\t\t\tif (this._targetDeg ?? 1 <= cur) {  // Success if violation rate improves from specified\n\t\t\t\t\t\tif (this._debug) console.log('stop: current degree is above the target');\n\t\t\t\t\t\tsol.apply();\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tsol.apply();  // Despite the failures, the best assignment so far is applied for now.\n\t\treturn false;\n\t}\n\n}\n\n{\n\n\tclass Cluster {\n\n\t\tstatic nextInt(max) {\n\t\t\treturn Math.floor(Math.random() * Math.floor(max));\n\t\t}\n\n\t\t#var;\n\t\t#index;\n\t\t#maxNeurons = [];\n\t\t_neurons    = [];\n\n\t\tconstructor(v) {\n\t\t\tthis.#var = v;\n\n\t\t\tfor (const val of v.domain()) {\n\t\t\t\tthis._neurons.push(new Neuron(val));\n\t\t\t}\n\t\t\tthis.#setActivity(Cluster.nextInt(this._neurons.length));\n\t\t}\n\n\t\t#setActivity(index) {\n\t\t\tfor (const n of this._neurons) {\n\t\t\t\tn._isActive = false;\n\t\t\t}\n\t\t\tthis._neurons[index]._isActive = true;\n\t\t\tthis.#index = index;\n\t\t}\n\n\t\tapplyToVariable() {\n\t\t\tthis.#var.assign(this._neurons[this.#index]._value);\n\t\t}\n\n\t\tget(index) {\n\t\t\treturn this._neurons[index];\n\t\t}\n\n\t\tneurons() {\n\t\t\treturn this._neurons;\n\t\t}\n\n\t\t// Turn on the node with the largest input.\n\t\tsetActivityMaximumInput() {\n\t\t\tthis.#maxNeurons.length = 0;\n\n\t\t\tlet max       = Number.NEGATIVE_INFINITY;\n\t\t\tlet alreadyOn = false;\n\n\t\t\tfor (let i = 0; i < this._neurons.length; ++i) {\n\t\t\t\tconst input = this._neurons[i].getInput();\n\n\t\t\t\tif (max <= input) {\n\t\t\t\t\tif (max < input) {\n\t\t\t\t\t\tmax = input;\n\t\t\t\t\t\tthis.#maxNeurons.length = 0;\n\t\t\t\t\t\talreadyOn = false;\n\t\t\t\t\t}\n\t\t\t\t\tthis.#maxNeurons.push(i);\n\t\t\t\t\tif (this.#index === i) {\n\t\t\t\t\t\talreadyOn = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (alreadyOn || this.#maxNeurons.length === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tthis.#setActivity(this.#maxNeurons[Cluster.nextInt(this.#maxNeurons.length)]);\n\t\t\treturn true;\n\t\t}\n\n\t\tsize() {\n\t\t\treturn this._neurons.length;\n\t\t}\n\n\t}\n\tGENET.Cluster = Cluster;\n\n\tclass Connection {\n\n\t\t#first;\n\t\t#second;\n\t\t_weight;  // Direct reference (read) allowed.\n\n\t\t// Order of neurons must be the same as the order of variables that the constraint has.\n\t\tconstructor(first, second = null) {\n\t\t\tthis._weight = -1;\n\n\t\t\tthis.#first = first;\n\t\t\tthis.#first.addConnection(this);\n\t\t\tthis.#second = second;\n\t\t\tif (this.#second !== null) {\n\t\t\t\tthis.#second.addConnection(this);\n\t\t\t}\n\t\t}\n\n\t\tgetNeuron(self) {\n\t\t\tif (self === this.#first)  return this.#second;\n\t\t\tif (self === this.#second) return this.#first;\n\t\t\treturn null;\n\t\t}\n\n\t\trefreshWeight() {\n\t\t\tif (!this.#first._isActive || (this.#second !== null && !this.#second._isActive)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._weight += -1;\n\t\t}\n\n\t}\n\tGENET.Connection = Connection;\n\n\tclass Neuron {\n\n\t\t#conTemp = [];\n\t\t#connections;\n\t\t_value;  // Direct reference (read) allowed.\n\t\t_isActive = false;  // Direct reference (read, write) allowed.\n\n\t\tconstructor(value) {\n\t\t\tthis._value = value;\n\t\t}\n\n\t\taddConnection(c) {\n\t\t\tthis.#conTemp.push(c);\n\t\t}\n\n\t\tlockConnections() {\n\t\t\tthis.#connections = [...this.#conTemp];\n\t\t\tthis.#conTemp     = null;  // No longer being used.\n\t\t}\n\n\t\tgetInput() {\n\t\t\tlet ret = 0;\n\t\t\tfor (const c of this.#connections) {\n\t\t\t\tconst n = c.getNeuron(this);  // If n is null, then the unary constraint.\n\t\t\t\tret += c._weight * ((n === null || n._isActive) ? 1 : 0);\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\n\t}\n\tGENET.Neuron = Neuron;\n\n}\n\n/**\n * Class implements the local changes method.\n *\n * @author Takuto Yanagida\n * @version 2023-04-10\n */\n\nclass LocalChanges extends Solver {\n\n\tstatic #setPlusSet(s1, s2) {\n\t\tconst sn = new Set(s1);\n\t\tfor (const v of s2) sn.add(v);\n\t\treturn sn;\n\t}\n\n\tstatic #setMinusSet(s1, s2) {\n\t\tconst sn = new Set(s1);\n\t\tfor (const v of s2) sn.delete(v);\n\t\treturn sn;\n\t}\n\n\tstatic #setPlusElement(s, e) {\n\t\tconst sn = new Set(s);\n\t\tsn.add(e);\n\t\treturn sn;\n\t}\n\n\tstatic #setMinusElement(s, e) {\n\t\tconst sn = new Set(s);\n\t\tsn.delete(e);\n\t\treturn sn;\n\t}\n\n\t#iterCount;\n\t#endTime;\n\t#globalReturn;\n\n\tconstructor(p, unassignAll = false) {\n\t\tsuper(p);\n\t\tif (unassignAll) {\n\t\t\tthis._pro.clearAllVariables();\n\t\t}\n\t}\n\n\tname() {\n\t\treturn 'Local Changes';\n\t}\n\n\t#createNewV3(V1_V2, v, val) {\n\t\tconst newV3 = new Set();\n\t\tconst cs    = new Set();\n\n\t\tfor (const va of V1_V2) {\n\t\t\tconst temp = this._pro.constraintsBetween(v, va);\n\t\t\tfor (const c of temp) cs.add(c);\n\t\t}\n\t\tconst origVal = v.value();  // Save the value.\n\t\tv.assign(val);\n\n\t\tfor (const c of cs) {\n\t\t\tif (c.isSatisfied() === 0) {\n\t\t\t\tfor (let i = 0; i < c.size(); ++i) {\n\t\t\t\t\tnewV3.add(c.at(i));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tv.assign(origVal);  // Restore the value.\n\t\tnewV3.delete(v);\n\t\treturn newV3;\n\t}\n\n\t#isConsistent(A, v, val) {\n\t\tconst cs = new Set();\n\n\t\tfor (const va of A) {\n\t\t\tconst temp = this._pro.constraintsBetween(v, va);\n\t\t\tfor (const c of temp) cs.add(c);\n\t\t}\n\t\tconst origVal = v.value();  // Save the value.\n\t\tv.assign(val);\n\n\t\tfor (const c of cs) {\n\t\t\tif (c.isSatisfied() === 0) {\n\t\t\t\tv.assign(origVal);  // Restore the value.\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tv.assign(origVal);  // Restore the value.\n\t\treturn true;\n\t}\n\n\t#lcValue(V1, V2, v, val) {\n\t\tif (!this.#isConsistent(V1, v, val)) {\n\t\t\treturn false;\n\t\t}\n\t\tconst V1_V2 = LocalChanges.#setPlusSet(V1, V2);\n\t\tif (this.#isConsistent(V1_V2, v, val)) {\n\t\t\treturn true;\n\t\t}\n\t\tconst V3 = this.#createNewV3(V1_V2, v, val);\n\n\t\tconst T = LocalChanges.#setMinusSet(V1_V2, V3);\n\t\tif (!this.#isConsistent(T, v, val)) {\n\t\t\tif (this._debug) console.log('bug');\n\t\t}\n\n\t\tfor (const vv of V3) {\n\t\t\tvv.clear();\n\t\t}\n\t\tV1 = LocalChanges.#setPlusElement(V1, v);\n\t\tV2 = LocalChanges.#setMinusSet(V2, V3);\n\t\treturn this.#lcVariables(V1, V2, V3);\n\t}\n\n\t#lcVariable(V1, V2, v, d) {\n\t\tif (d.size === 0) {\n\t\t\treturn false;\n\t\t}\n\t\tconst val = d.values().next().value;\n\t\tconst  al = AssignmentList.fromVariables(V2);\n\t\tv.assign(val);\n\n\t\tconst ret = this.#lcValue(V1, V2, v, val);\n\t\tif (ret || this.#globalReturn) {\n\t\t\treturn ret;\n\t\t}\n\n\t\tv.clear();\n\t\tal.apply();\n\n\t\treturn this.#lcVariable(V1, V2, v, LocalChanges.#setMinusElement(d, val));\n\t}\n\n\t#lcVariables(V1, V2, V3) {\n\t\tif (this._debug) {\n\t\t\tconsole.log(`V1 ${V1.size}, V2' ${V2.size}, V3' ${V3.size}`);\n\t\t}\n\t\tif ((this._targetDeg ?? 1) <= this._pro.satisfiedConstraintRate()) {  // Success if violation rate improves from specified\n\t\t\tif (this._debug) console.log('stop: current degree is above the target');\n\t\t\tthis.#globalReturn = true;\n\t\t\treturn true;\n\t\t}\n\t\tif (this._iterLimit && this._iterLimit < this.#iterCount++) {  // Failure if repeated a specified number\n\t\t\tif (this._debug) console.log('stop: number of iterations has reached the limit');\n\t\t\tthis.#globalReturn = true;\n\t\t\treturn false;\n\t\t}\n\t\tif (this.#endTime < Date.now()) {  // Failure if time limit is exceeded\n\t\t\tif (this._debug) console.log('stop: time limit has been reached');\n\t\t\tthis.#globalReturn = true;\n\t\t\treturn false;\n\t\t}\n\n\t\tif (V3.size === 0) {\n\t\t\treturn true;\n\t\t}\n\t\tconst v = V3.values().next().value;\n\t\tconst d = new Set();\n\t\tfor (const val of v.domain()) {\n\t\t\td.add(val);\n\t\t}\n\n\t\tconst ret = this.#lcVariable(V1, V2, v, d);\n\t\tif (!ret || this.#globalReturn) {\n\t\t\treturn ret;\n\t\t}\n\t\tV2 = LocalChanges.#setPlusElement(V2, v);\n\t\tV3 = LocalChanges.#setMinusElement(V3, v);\n\t\treturn this.#lcVariables(V1, V2, V3);\n\t}\n\n\texec() {\n\t\tthis.#endTime      = (this._timeLimit === null) ? Number.MAX_VALUE : (Date.now() + this._timeLimit);\n\t\tthis.#iterCount    = 0;\n\t\tthis.#globalReturn = false;\n\n\t\tif (this._pro.emptyVariableSize() === 0) {\n\t\t\tthis._pro.clearAllVariables();\n\t\t}\n\t\tconst notFixed   = new Set();\n\t\tconst unassigned = new Set();\n\t\tfor (const v of this._pro.variables()) {\n\t\t\t(!v.isEmpty() ? notFixed : unassigned).add(v);\n\t\t}\n\t\treturn this.#lcVariables(new Set(), notFixed, unassigned);\n\t}\n\n}\n\n/**\n * Class implements the local changes method.\n * The implementation is optimized by converting recursive calls to loops.\n *\n * @author Takuto Yanagida\n * @version 2023-04-10\n */\n\nclass LocalChangesEx extends Solver {\n\n\tstatic #setPlusSet(s1, s2) {\n\t\tconst sn = new Set(s1);\n\t\tfor (const v of s2) sn.add(v);\n\t\treturn sn;\n\t}\n\n\tstatic #setMinusSet(s1, s2) {\n\t\tconst sn = new Set(s1);\n\t\tfor (const v of s2) sn.delete(v);\n\t\treturn sn;\n\t}\n\n\tstatic #setPlusElement(s, e) {\n\t\tconst sn = new Set(s);\n\t\tsn.add(e);\n\t\treturn sn;\n\t}\n\n\tstatic #setMinusElement(s, e) {\n\t\tconst sn = new Set(s);\n\t\tsn.delete(e);\n\t\treturn sn;\n\t}\n\n\t#iterCount;\n\t#endTime;\n\t#globalReturn;\n\n\tconstructor(p, unassignAll = false) {\n\t\tsuper(p);\n\t\tif (unassignAll) {\n\t\t\tthis._pro.clearAllVariables();\n\t\t}\n\t}\n\n\tname() {\n\t\treturn 'Local Changes Ex';\n\t}\n\n\t#createNewV3(V1_V2, v, val) {\n\t\tconst newV3 = new Set();\n\t\tconst cs    = new Set();\n\n\t\tfor (const va of V1_V2) {\n\t\t\tconst temp = this._pro.constraintsBetween(v, va);\n\t\t\tfor (const c of temp) cs.add(c);\n\t\t}\n\t\tconst origVal = v.value();  // Save the value.\n\t\tv.assign(val);\n\n\t\tfor (const c of cs) {\n\t\t\tif (c.isSatisfied() === 0) {\n\t\t\t\tfor (let i = 0; i < c.size(); ++i) {\n\t\t\t\t\tnewV3.add(c.at(i));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tv.assign(origVal);  // Restore the value.\n\t\tnewV3.delete(v);\n\t\treturn newV3;\n\t}\n\n\t#isConsistent(A, v, val) {\n\t\tconst cs = new Set();\n\n\t\tfor (const va of A) {\n\t\t\tconst temp = this._pro.constraintsBetween(v, va);\n\t\t\tfor (const c of temp) cs.add(c);\n\t\t}\n\t\tconst origVal = v.value();  // Save the value.\n\t\tv.assign(val);\n\n\t\tfor (const c of cs) {\n\t\t\tif (c.isSatisfied() === 0) {\n\t\t\t\tv.assign(origVal);  // Restore the value.\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tv.assign(origVal);  // Restore the value.\n\t\treturn true;\n\t}\n\n\t#lcValue(V1, V2, v) {\n\t\tif (!this.#isConsistent(V1, v, v.value())) {\n\t\t\treturn false;\n\t\t}\n\t\tconst V1_V2 = LocalChangesEx.#setPlusSet(V1, V2);\n\t\tif (this.#isConsistent(V1_V2, v, v.value())) {\n\t\t\treturn true;\n\t\t}\n\t\tconst V3 = this.#createNewV3(V1_V2, v, v.value());\n\n\t\tV2 = LocalChangesEx.#setMinusSet(V2, V3);\n\t\tV1 = LocalChangesEx.#setPlusElement(V1, v);\n\t\treturn this.#lcVariables(V1, V2, V3);\n\t}\n\n\t#lcVariable(V1, V2, v) {\n\t\tfor (const val of v.domain()) {\n\t\t\tconst s = AssignmentList.fromVariables(V2);\n\t\t\tv.assign(val);\n\n\t\t\tconst ret = this.#lcValue(V1, V2, v);\n\t\t\tif (ret || this.#globalReturn) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\tv.clear();\n\t\t\ts.apply();\n\t\t}\n\t\treturn false;\n\t}\n\n\t#lcVariables(V1, V2, V3) {\n\t\tV2 = new Set(V2);  // Clone\n\t\tV3 = new Set(V3);  // Clone\n\n\t\twhile (true) {\n\t\t\tif (this._debug) {\n\t\t\t\tconsole.log(`V1 ${V1.size}, V2' ${V2.size}, V3' ${V3.size}`);\n\t\t\t}\n\t\t\tif ((this._targetDeg ?? 1) <= this._pro.satisfiedConstraintRate()) {  // Success if violation rate improves from specified\n\t\t\t\tif (this._debug) console.log('stop: current degree is above the target');\n\t\t\t\tthis.#globalReturn = true;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (this._iterLimit && this._iterLimit < this.#iterCount++) {  // Failure if repeated a specified number\n\t\t\t\tif (this._debug) console.log('stop: number of iterations has reached the limit');\n\t\t\t\tthis.#globalReturn = true;\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (this.#endTime < Date.now()) {  // Failure if time limit is exceeded\n\t\t\t\tif (this._debug) console.log('stop: time limit has been reached');\n\t\t\t\tthis.#globalReturn = true;\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (V3.size === 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tconst v   = V3.values().next().value;\n\t\t\tconst ret = this.#lcVariable(V1, V2, v);\n\n\t\t\tif (!ret || this.#globalReturn) {\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t\tV2.add(v);\n\t\t\tV3.delete(v);\n\t\t}\n\t}\n\n\texec() {\n\t\tthis.#endTime      = (this._timeLimit === null) ? Number.MAX_VALUE : (Date.now() + this._timeLimit);\n\t\tthis.#iterCount    = 0;\n\t\tthis.#globalReturn = false;\n\n\t\tif (this._pro.emptyVariableSize() === 0) {\n\t\t\tthis._pro.clearAllVariables();\n\t\t}\n\t\tconst notFixed   = new Set();\n\t\tconst unassigned = new Set();\n\t\tfor (const v of this._pro.variables()) {\n\t\t\t(!v.isEmpty() ? notFixed : unassigned).add(v);\n\t\t}\n\t\treturn this.#lcVariables(new Set(), notFixed, unassigned);\n\t}\n\n}\n\n/**\n * This class implements the SRS algorithm for crisp CSP.\n * The given crisp CSP is treated as the maximum CSP.\n * Similar to SRS 3, the repair algorithm searches for an assignment that satisfies itself without reducing the number of satisfactions of its neighbors.\n *\n * @author Takuto Yanagida\n * @version 2023-04-10\n */\n\nclass CrispSRS3 extends Solver {\n\n\t#closedList          = new Set();\n\t#openList            = new Set();  // LinkedHashSet is used in the original implementation.\n\t#nodes               = [];\n\t#neighborConstraints = [];  // Cache\n\n\t#isRandom = true;\n\n\tconstructor(p) {\n\t\tsuper(p);\n\t\tfor (const c of this._pro.constraints()) {\n\t\t\tthis.#nodes.push(new CrispSRS3.TreeNode(c));\n\t\t\tthis.#neighborConstraints.push(null);\n\t\t}\n\t}\n\n\tname() {\n\t\treturn 'SRS 3 for Crisp CSPs';\n\t}\n\n\t#getNeighborConstraints(c) {\n\t\tconst index = c.index();\n\n\t\tif (this.#neighborConstraints[index] === null) {\n\t\t\tthis.#neighborConstraints[index] = c.neighbors();\n\t\t}\n\t\treturn this.#neighborConstraints[index];\n\t}\n\n\t#repair(c0) {\n\t\tif (this._debug) console.log('repair');\n\n\t\tconst candidates = new AssignmentList();\n\t\tlet maxDiff = 0;\n\n\t\tfor (let i = 0; i < c0.size(); ++i) {\n\t\t\tconst v     = c0.at(i);\n\t\t\tconst v_val = v.value();  // Save the value\n\t\t\tconst v_c   = v.constraints();\n\n\t\t\tlet nowVio = 0;\n\t\t\tfor (const c of v_c) {\n\t\t\t\tnowVio += (1 - c.isSatisfied());\n\t\t\t}\n\t\t\tout: for (const d of v.domain()) {\n\t\t\t\tif (v_val === d) continue;\n\t\t\t\tv.assign(d);\n\t\t\t\tif (c0.isSatisfied() !== 1) continue;  // Assuming c0 improvement\n\n\t\t\t\tlet diff = nowVio;\n\t\t\t\tfor (const n of v_c) {\n\t\t\t\t\tdiff -= (1 - n.isSatisfied());\n\t\t\t\t\tif (diff < maxDiff) continue out;  // If the improvement is less than the previous improvement, try the next variable.\n\t\t\t\t}\n\t\t\t\tif (diff > maxDiff) {  // An assignment that are better than ever before is found.\n\t\t\t\t\tmaxDiff = diff;\n\t\t\t\t\tcandidates.clear();\n\t\t\t\t\tcandidates.addVariable(v, d);\n\t\t\t\t} else if (maxDiff !== 0) {  // An assignments that can be improved to the same level as before is found.\n\t\t\t\t\tcandidates.addVariable(v, d);\n\t\t\t\t}\n\t\t\t}\n\t\t\tv.assign(v_val);  // Restore the value\n\t\t}\n\t\tif (candidates.size() > 0) {\n\t\t\tconst e = this.#isRandom ? candidates.arbitraryAssignment() : candidates.get(0);\n\t\t\te.apply();\n\t\t\tif (this._debug) console.log('\\t' + e);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t#shrink(node, c_stars) {\n\t\tconst temp = [];\n\t\tlet cur = node;\n\n\t\twhile (true) {  // This procedure is originally a recursive call, but converted to a loop\n\t\t\tcur = cur.parent();\n\t\t\ttemp.length = 0;\n\t\t\tcur.getDescendants(temp);\n\t\t\tcur.clear();\n\n\t\t\tfor (const n of c_stars) {\n\t\t\t\tthis.#openList.delete(n);\n\t\t\t\tthis.#closedList.delete(n);\n\t\t\t}\n\n\t\t\tif (c_stars.delete(cur)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tthis.#openList.add(cur);\n\t\t\tif (cur.parent() !== null && !this.#repair(cur.parent().getObject())) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t#spread(node) {\n\t\tif (this._debug) console.log('spread');\n\t\tthis.#closedList.add(node);\n\n\t\tfor (const c of this.#getNeighborConstraints(node.getObject())) {\n\t\t\tconst tnc = this.#nodes[c.index()];\n\n\t\t\tif (!this.#closedList.has(tnc) && !this.#openList.has(tnc)) {  // For constraints that are not included in Open or Closed\n\t\t\t\ttnc.clear();  // Because of its reuse, it may have had children when it was used before.\n\t\t\t\tnode.add(tnc);\n\t\t\t\tthis.#openList.add(tnc);\n\t\t\t}\n\t\t}\n\t}\n\n\t#srs(c_stars) {\n\t\tif (this._debug) console.log('srs');\n\t\tconst endTime = (this._timeLimit === null) ? Number.MAX_VALUE : (Date.now() + this._timeLimit);\n\t\tlet iterCount = 0;\n\n\t\tthis.#closedList.clear();\n\t\tthis.#openList.clear();\n\t\tfor (const n of c_stars) {\n\t\t\tthis.#openList.add(n);\n\t\t}\n\n\t\twhile (c_stars.size && this.#openList.size) {\n\t\t\tif ((this._targetDeg ?? 1) <= this._pro.satisfiedConstraintRate()) {  // Success if violation rate improves from specified\n\t\t\t\tif (this._debug) console.log('stop: current degree is above the target');\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (this._iterLimit && this._iterLimit < iterCount++) {  // Failure if repeated a specified number\n\t\t\t\tif (this._debug) console.log('stop: number of iterations has reached the limit');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (endTime < Date.now()) {  // Failure if time limit is exceeded\n\t\t\t\tif (this._debug) console.log('stop: time limit has been reached');\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst node = this.#openList.values().next().value;\n\t\t\tthis.#openList.delete(node);\n\n\t\t\tif (this.#repair(node.getObject())) {\n\t\t\t\tif (!c_stars.delete(node)) {  // If the repaired node is included in C* (to be deleted)\n\t\t\t\t\tif (node.parent() !== null && this.#repair(node.parent().getObject())) {  // When its improvement leads to the improvement of its parents\n\t\t\t\t\t\tthis.#shrink(node, c_stars);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.#spread(node);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {  // In case of repair failure\n\t\t\t\tthis.#spread(node);\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\texec() {\n\t\tconst vcs     = this._pro.violatingConstraints();\n\t\tconst c_stars = new Set();\n\n\t\tfor (const c of vcs) {\n\t\t\tconst tnc = this.#nodes[c.index()];\n\t\t\tc_stars.add(tnc);\n\t\t}\n\t\tif (this.#srs(c_stars)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn c_stars.length === 0;\n\t}\n\n\t/**\n\t * Sets the randomness of the algorithm.\n\t * Enabling randomness reduces the risk of falling into a local solution, but makes the solution unrepeatable.\n\t * @param flag If true, randomness is enabled.\n\t */\n\tsetRandomness(flag) {\n\t\tthis.#isRandom = flag;\n\t}\n\n}\n\n{\n\n\tclass TreeNode {\n\n\t\t#children = [];\n\t\t#parent;\n\t\t#obj;\n\n\t\tconstructor(obj) {\n\t\t\tthis.#obj = obj;\n\t\t}\n\n\t\tadd(tn) {\n\t\t\ttn.#parent = this;\n\t\t\tthis.#children.push(tn);\n\t\t}\n\n\t\tclear() {\n\t\t\tfor (const tn of this.#children) {\n\t\t\t\ttn.#parent = null;\n\t\t\t}\n\t\t\tthis.#children.length = 0;\n\t\t}\n\n\t\tgetDescendants(tns) {\n\t\t\ttns.push(this);\n\n\t\t\tfor (const tn of this.#children) {\n\t\t\t\ttn.getDescendants(tns);\n\t\t\t}\n\t\t}\n\n\t\tgetObject() {\n\t\t\treturn this.#obj;\n\t\t}\n\n\t\tparent() {\n\t\t\treturn this.#parent;\n\t\t}\n\n\t}\n\tCrispSRS3.TreeNode = TreeNode;\n\n}\n\n\n/**\n * Class implements a solver using the breakout method for fuzzy CSP.\n *\n * @author Takuto Yanagida\n * @version 2023-04-10\n */\n\nclass FuzzyBreakout extends Solver {\n\n\t#weights;\n\t#lastSolDeg;\n\n\t#isRandom = true;\n\n\tconstructor(p) {\n\t\tsuper(p);\n\t\tthis.#weights = new Array(this._pro.constraintSize());\n\t\tthis.#weights.fill(1);\n\t}\n\n\tname() {\n\t\treturn 'Fuzzy Breakout';\n\t}\n\n\tfoundSolution() {\n\t\treturn false;\n\t}\n\n\t#findCandidates(worstVars, canList) {\n\t\tlet maxDiff = 0;\n\n\t\tfor (const v of worstVars) {\n\t\t\tconst v_val = v.value();  // Save the value\n\t\t\tconst v_c   = v.constraints();\n\n\t\t\tlet nowVio = 0;\n\t\t\tfor (const c of v_c) {\n\t\t\t\tnowVio += (1 - c.satisfactionDegree()) * this.#weights[c.index()];\n\t\t\t}\n\t\t\tout: for (const d of v.domain()) {\n\t\t\t\tif (v_val === d) continue;\n\t\t\t\tv.assign(d);\n\t\t\t\tlet diff = nowVio;\n\t\t\t\tfor (const c of v_c) {\n\t\t\t\t\tdiff -= (1 - c.satisfactionDegree()) * this.#weights[c.index()];\n\t\t\t\t\t// If the improvement is less than the previous improvement, try the next variable.\n\t\t\t\t\tif (diff < maxDiff) {\n\t\t\t\t\t\tcontinue out;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (diff > maxDiff) {  // Found assignments that are better than ever before.\n\t\t\t\t\tmaxDiff = diff;\n\t\t\t\t\tcanList.clear();\n\t\t\t\t\tcanList.addVariable(v, d);\n\t\t\t\t} else if (maxDiff !== 0) {  // Found assignments that can be improved to the same level as before.\n\t\t\t\t\tcanList.addVariable(v, d);\n\t\t\t\t}\n\t\t\t}\n\t\t\tv.assign(v_val);  // Restore the value.\n\t\t}\n\t}\n\n\t#listWorstVariables(worstCons) {\n\t\tconst wvs = new Set();\n\t\tfor (let i = 0; i < worstCons.length; ++i) {\n\t\t\tconst c = worstCons[i];\n\t\t\tfor (let j = 0; j < c.size(); ++j) wvs.add(c.at(j));\n\t\t}\n\t\treturn Array.from(wvs);\n\t}\n\n\texec() {\n\t\tconst endTime = (this._timeLimit === null) ? Number.MAX_VALUE : (Date.now() + this._timeLimit);\n\t\tlet iterCount = 0;\n\n\t\tfor (const v of this._pro.variables()) {\n\t\t\tif (v.isEmpty()) v.assign(v.domain().at(0));\n\t\t}\n\n\t\tconst deg     = this._pro.worstSatisfactionDegree();\n\t\tconst canList = new AssignmentList();\n\n\t\tconst sol = new AssignmentList();\n\n\t\twhile (true) {\n\t\t\tconst [vc, wsd] = this._pro.constraintsWithWorstSatisfactionDegree();\n\t\t\tif (this._targetDeg !== null && this._targetDeg <= wsd) {  // Success if the degree improves from specified\n\t\t\t\tif (this._debug) console.log('stop: current degree is above the target');\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (this._iterLimit && this._iterLimit < iterCount++) {  // Failure if repeated a specified number\n\t\t\t\tif (this._debug) console.log('stop: number of iterations has reached the limit');\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (endTime < Date.now()) {  // Failure if time limit is exceeded\n\t\t\t\tif (this._debug) console.log('stop: time limit has been reached');\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (this._debug) console.log('worst satisfaction degree: ' + wsd);\n\n\t\t\tif (this.#lastSolDeg < wsd) {\n\t\t\t\tsol.setProblem(this._pro);\n\t\t\t\tthis.#lastSolDeg = wsd;\n\t\t\t\tif (foundSolution(sol, this.#lastSolDeg)) {  // Call hook\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.#findCandidates(this.#listWorstVariables(vc), canList);\n\n\t\t\tif (0 < canList.size()) {\n\t\t\t\tconst e = this.#isRandom ? canList.arbitraryAssignment() : canList.get(0);\n\t\t\t\te.apply();\n\t\t\t\tcanList.clear();\n\t\t\t\tif (this._debug) console.log(\"\\t\" + e);\n\t\t\t} else {\n\t\t\t\tfor (let i = 0; i < vc.length; ++i) this.#weights[vc[i].index()]++;\n\t\t\t\tif (this._debug) console.log(\"breakout\");\n\t\t\t}\n\t\t}\n\t\tif (this._targetDeg === null && deg < this._pro.worstSatisfactionDegree()) return true;\n\t\treturn false;\n\t}\n\n\t/**\n\t * Sets the randomness of the algorithm.\n\t * Enabling randomness reduces the risk of local solutions, but makes the solution unrepeatable.\n\t * @param flag Whether the randomness is enabled.\n\t */\n\tsetRandomness(flag) {\n\t\tthis.#isRandom = flag;\n\t}\n\n}\n\n/**\n * This class implements the forward checking method for fuzzy CSP.\n * The minimum-remaining-values (MRV) heuristic can also be used by specifying the option.\n * Each variable must have its own domain because it hides domain elements as branch pruning.\n * Forward checking is also performed for problems with polynomial constraints.\n *\n * @author Takuto Yanagida\n * @version 2023-04-10\n */\n\nclass FuzzyForwardChecking extends Solver {\n\n\tstatic CONTINUE  = 0;\n\tstatic TERMINATE = 1;\n\n\t#vars;\n\t#sol = new AssignmentList();\n\t#relCons;  // Table to cache constraints between two variables.\n\n\t#solWorstDeg = 0;  // Degree of existing solutions (no need to find a solution less than this).\n\n\t#iterCount;\n\t#endTime;\n\t#useMRV = false;\n\t#degInc = 0;\n\n\t#sequence;\n\t#unaryCons;\n\t#checkedCons;\n\t#pruneIntensively = false;\n\n\t/**\n\t * Generates the solver given a fuzzy constraint satisfaction problem.\n\t * @param p A fuzzy problem.\n\t * @param worstSatisfactionDegree Worst satisfaction degree.\n\t */\n\tconstructor(p, worstSatisfactionDegree = null) {\n\t\tsuper(p);\n\t\tthis.#vars = [...this._pro.variables()];\n\t\tthis.#sequence = new Array(this._pro.variableSize());\n\t\tthis.#initializeRelatedConstraintTable();\n\t\tthis.#checkedCons = new Array(this._pro.constraintSize());\n\n\t\tconst temp = [];\n\t\tfor (const c of this._pro.constraints()) {\n\t\t\tif (c.size() === 1) temp.push(c);\n\t\t}\n\t\tthis.#unaryCons = [...temp];  // To make it even if it is empty.\n\t\tif (worstSatisfactionDegree) {\n\t\t\tthis.#solWorstDeg = worstSatisfactionDegree;\n\t\t}\n\t}\n\n\tname() {\n\t\treturn 'Forward Checking for Fuzzy CSPs';\n\t}\n\n\t// Initializes a table that caches constraints between two variables.\n\t#initializeRelatedConstraintTable() {\n\t\tthis.#relCons = [];\n\n\t\tfor (let j = 0; j < this.#vars.length; ++j) {\n\t\t\tthis.#relCons.push(new Array(this.#vars.length));\n\n\t\t\tfor (let i = 0; i < this.#vars.length; i++) {\n\t\t\t\tif (i < j) {\n\t\t\t\t\tthis.#relCons[j][i] = this._pro.constraintsBetween(this.#vars[i], this.#vars[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Retrieves an array of constraints from a table that caches constraints between two variables.\n\t#getConstraintsBetween(vi_index, vj_index) {\n\t\tif (vi_index < vj_index) {\n\t\t\treturn this.#relCons[vj_index][vi_index];\n\t\t}\n\t\treturn this.#relCons[vi_index][vj_index];\n\t}\n\n\t// Prune elements of the domain that make the unary constraint worse than the current worst degree.\n\t#pruneUnaryConstraints() {\n\t\tfor (const c of this.#unaryCons) {\n\t\t\tconst v      = c.at(0);\n\t\t\tconst orgVal = v.value();  // Save the value.\n\t\t\tconst d      = v.domain();\n\t\t\tconst dc     = v.solverObject;\n\n\t\t\tfor (let i = 0, n = d.size(); i < n; ++i) {\n\t\t\t\tv.assign(d.at(i));\n\t\t\t\tif (c.satisfactionDegree() <= this.#solWorstDeg) {\n\t\t\t\t\tdc.hide(i, -1);  // Here's a branch pruning!\n\t\t\t\t}\n\t\t\t}\n\t\t\tv.assign(orgVal);  // Restore the value.\n\t\t\tif (dc.isEmpty()) return false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t// Check for consistency between the current variable and one future variable, and prune elements of the domain that are inconsistent (when there is one unassigned variable in the scope of the constraint).\n\t#checkForwardConsistency(level, vi, c) {\n\t\tconst di  = vi.domain();\n\t\tconst dci = vi.solverObject;\n\n\t\tfor (let i = 0, n = di.size(); i < n; ++i) {\n\t\t\tif (dci.isValueHidden(i)) continue;\n\t\t\tvi.assign(di.at(i));\n\t\t\tif (c.satisfactionDegree() <= this.#solWorstDeg) {  // It is not a solution when it is 'smaller than or equals'.\n\t\t\t\tdci.hide(i, level);  // Here's a branch pruning!\n\t\t\t}\n\t\t}\n\t\tvi.clear();\n\t\treturn !dci.isEmpty();  // Succeeds if the domain di of the future variable vi is not empty.\n\t}\n\n\t// Check for consistency between the current variable and one future variable, and prune elements of the domain that are inconsistent (when there are two unassigned variables in the scope of the constraint).\n\t#checkForwardConsistency2(level, vi, c) {\n\t\tconst di  = vi.domain();\n\t\tconst dci = vi.solverObject;\n\t\tconst vj  = null;\n\n\t\tfor (let i = 0, n = c.size(); i < n; ++i) {\n\t\t\tconst v = c.at(i);\n\t\t\tif (v.isEmpty() && v !== vi) {\n\t\t\t\tvj = v;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tconst dj  = vj.domain();\n\t\tconst dcj = vj.solverObject;\n\t\tloop_i: for (let i = 0, ni = di.size(); i < ni; ++i) {\n\t\t\tif (dci.isValueHidden(i)) continue;\n\t\t\tvi.assign(di.at(i));  // Tentative assignment to vi\n\t\t\tfor (let j = 0, nj = dj.size(); j < nj; ++j) {\n\t\t\t\tif (dcj.isValueHidden(j)) continue;\n\t\t\t\tvj.assign(dj.at(j));  // Tentative assignment to vj\n\t\t\t\tconst s = c.satisfactionDegree();\n\t\t\t\tif (s > this.#solWorstDeg) continue loop_i;  // Tentative assignment to vi was OK -> next tentative assignment.\n\t\t\t}\n\t\t\tdci.hide(i, level);  // It is not a solution when it is 'smaller than or equals'.\n\t\t}\n\t\tvj.clear();\n\t\tvi.clear();\n\t\treturn !dci.isEmpty();  // Succeeds if the domain di of the future variable vi is not empty.\n\t}\n\n\t// Check for consistency between the current variable and one future variable, and prune elements of the domain that are inconsistent (when there are three unassigned variables in the scope of the constraint).\n\t#checkForwardConsistency3(level, vi, c) {\n\t\tconst di  = vi.domain();\n\t\tconst dci = vi.solverObject;\n\n\t\tlet vj = null;\n\t\tlet vk = null;\n\n\t\tfor(let i = 0, n = c.size(); i < n; ++i) {\n\t\t\tlet v = c.at(i);\n\t\t\tif (v.isEmpty() && v !== vi) {\n\t\t\t\tif (vj === null) {\n\t\t\t\t\tvj = v;\n\t\t\t\t} else {\n\t\t\t\t\tvk = v;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst dj  = vj.domain();\n\t\tconst dk  = vk.domain();\n\t\tconst dcj = vj.solverObject;\n\t\tconst dck = vk.solverObject;\n\n\t\tloop_i: for(let i = 0, ni = di.size(); i < ni; ++i) {\n\t\t\tif (dci.isValueHidden(i)) continue;\n\t\t\tvi.assign(di.at(i));  // Tentative assignment to vi\n\t\t\tfor (let j = 0, nj = dj.size(); j < nj; ++j) {\n\t\t\t\tif (dcj.isValueHidden(j)) continue;\n\t\t\t\tvj.assign(dj.at(j));  // Tentative assignment to vj\n\t\t\t\tfor (let k = 0, nk = dk.size(); k < nk; ++k) {\n\t\t\t\t\tif (dck.isValueHidden(k)) continue;\n\t\t\t\t\tvk.assign(dk.at(k));  // Tentative assignment to vk\n\t\t\t\t\tconst s = c.satisfactionDegree();\n\t\t\t\t\tif (s > this.#solWorstDeg) continue loop_i;  // Tentative assignment to vi was OK -> next tentative assignment.\n\t\t\t\t}\n\t\t\t}\n\t\t\tdci.hide(i, level);  // It is not a solution when it is 'smaller than or equals'.\n\t\t}\n\t\tvk.clear();\n\t\tvj.clear();\n\t\tvi.clear();\n\t\treturn !dci.isEmpty();  // Succeeds if the domain di of the future variable vi is not empty.\n\t}\n\n\t// In the case of polynomial constraints and when there are four or more unassigned variables, all combinations of assignments of unassigned variables are examined and pruned.\n\t#checkForwardConsistencyN(level, vi, c, emptySize) {\n\t\tconst di  = vi.domain();\n\t\tconst dci = vi.solverObject;\n\t\tconst emp = new Array(emptySize - 1);\n\t\tlet j = 0;\n\n\t\tfor (let i = 0, n = c.size(); i < n; ++i) {\n\t\t\tconst v = c.at(i);\n\t\t\tif(v.isEmpty() && v !== vi) emp[j++] = v;\n\t\t}\n\t\tconst indexes = new Array(emp.length);\n\n\t\tloop_i: for (let i = 0, n = di.size(); i < n; ++i) {\n\t\t\tif (dci.isValueHidden(i)) continue;\n\t\t\tvi.assign(di.at(i));  // Tentative assignment to vi\n\t\t\tindexes.fill(0);\n\n\t\t\tcomLoop: while (true) {\n\t\t\t\tlet hidden = false;\n\t\t\t\tfor (let k = 0; k < emp.length; ++k) {\n\t\t\t\t\tconst dk  = emp[k].domain();\n\t\t\t\t\tconst dck = emp[k].solverObject;\n\t\t\t\t\tif (dck.isValueHidden(indexes[k])) {\n\t\t\t\t\t\thidden = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\temp[k].assign(dk.at(indexes[k]));\n\t\t\t\t}\n\t\t\t\tif (!hidden) {\n\t\t\t\t\tconst s = c.satisfactionDegree();\n\t\t\t\t\tif (s > this.#solWorstDeg) continue loop_i;  // Tentative assignment to vi was OK -> next tentative assignment.\n\t\t\t\t}\n\t\t\t\tfor (let k = 0; k < emp.length; ++k) {\n\t\t\t\t\tindexes[k]++;\n\t\t\t\t\tif (indexes[k] < emp[k].domain().size()) break;\n\t\t\t\t\tindexes[k] = 0;\n\t\t\t\t\tif (k === emp.length - 1) break comLoop;\n\t\t\t\t}\n\t\t\t}\n\t\t\tdci.hide(i, level);\n\t\t}\n\t\tfor (const v of emp) v.clear();\n\t\tvi.clear();\n\t\treturn !dci.isEmpty();  // Succeeds if the domain di of the future variable vi is not empty.\n\t}\n\n\t// Checks for possible assignment to a future variable from the current variable assignment.\n\t#checkForward(level, index) {\n\t\tfor (const v_i of  this.#vars) {\n\t\t\tif (!v_i.isEmpty()) continue;  // If it is a past or present variable.\n\n\t\t\tconst cs = this.#getConstraintsBetween(index, v_i.index());\n\n\t\t\tfor (const c of cs) {\n\t\t\t\tconst emptySize = c.emptyVariableSize();\n\t\t\t\tif (emptySize === 1) {\n\t\t\t\t\tif (!this.#checkForwardConsistency(level, v_i, c)) return false;\n\t\t\t\t} else if (this.#pruneIntensively) {  // Depends on options\n\t\t\t\t\tif (emptySize === 2) {\n\t\t\t\t\t\tif(!this.#checkForwardConsistency2(level, v_i, c)) return false;\n\t\t\t\t\t} else if(emptySize === 3) {\n\t\t\t\t\t\tif(!this.#checkForwardConsistency3(level, v_i, c)) return false;\n\t\t\t\t\t} else if(emptySize > 3) {\n\t\t\t\t\t\tif(!this.#checkForwardConsistencyN(level, v_i, c, emptySize)) return false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t// Checks to see if the current variable assignment makes the degree of the past variable worse than the current worst degree.\n\t#checkBackwardConsistency(vc) {\n\t\tthis.#checkedCons.fill(false);  // Reuse.\n\n\t\tfor (let i = 0; i < this.#vars.length; ++i) {  // Find past variables.\n\t\t\tconst vi = this.#vars[i];\n\t\t\tif (vi === vc || vi.isEmpty()) continue;  // If it is a future variable or a present variable.\n\t\t\tconst cs = this.#getConstraintsBetween(vc.index(), i);\n\n\t\t\tfor (const c of cs) {\n\t\t\t\tif (this.#checkedCons[c.index()]) continue;  // Because of the possibility of duplication in polynomial constraints\n\t\t\t\tconst s = c.satisfactionDegree();\n\t\t\t\tif (s !== Constraint.UNDEFINED && s <= this.#solWorstDeg) {  // It is not a solution when it is 'smaller than or equals'.\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tthis.#checkedCons[c.index()] = true;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t#refresh() {\n\t\tfor(let i = 0; i < this.#sequence.length; ++i) {\n\t\t\tconst index_vi = this.#sequence[i].index();\n\n\t\t\tfor (let j = i + 1; j < this.#sequence.length; ++j) {\n\t\t\t\tconst vj = this.#sequence[j];\n\t\t\t\tconst cs = this.#getConstraintsBetween(index_vi, vj.index());\n\n\t\t\t\tfor (const c of cs) {\n\t\t\t\t\tconst orgVal = vj.value();\n\t\t\t\t\tconst dj     = vj.domain();\n\t\t\t\t\tconst dcj    = vj.solverObject;\n\n\t\t\t\t\tfor (let k = 0, n = dj.size(); k < n; ++k) {\n\t\t\t\t\t\tif (dcj.isValueHidden(k)) continue;\n\t\t\t\t\t\tvj.assign(dj.at(k));\n\t\t\t\t\t\tif (c.satisfactionDegree() <= this.#solWorstDeg) {\n\t\t\t\t\t\t\tdcj.hide(k, i);  // Here's a branch pruning!\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tvj.assign(orgVal);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Returns the index of the smallest domain variable.\n\t#indexOfVariableWithMRV() {\n\t\tlet index = 0;\n\t\tlet size  = Number.MAX_VALUE;\n\n\t\tfor (let i = 0; i < this.#vars.length; ++i) {\n\t\t\tconst v = this.#vars[i];\n\t\t\tif (!v.isEmpty()) continue;\n\t\t\tconst d = v.domain();\n\t\t\tconst s = d.size() - v.solverObject.hiddenSize();\n\t\t\tif (s < size) {\n\t\t\t\tsize  = s;\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\t\treturn index;\n\t}\n\n\t// Performs search one variable at a time.\n\t#branch(level) {\n\t\tlet bc = FuzzyForwardChecking.CONTINUE;\n\t\tconst vc_index = this.#useMRV ? this.#indexOfVariableWithMRV() : level;\n\t\tconst vc       = this.#vars[vc_index];\n\t\tconst d        = vc.domain();\n\t\tconst dc       = vc.solverObject;\n\t\tthis.#sequence[level] = vc;\n\n\t\tfor (let i = 0, n = d.size(); i < n; ++i) {\n\t\t\tif (dc.isValueHidden(i)) continue;\n\t\t\tif ((this._iterLimit && this._iterLimit < this.#iterCount++) || this.#endTime < Date.now()) {\n\t\t\t\tbc = FuzzyForwardChecking.TERMINATE;  // Search terminated due to restrictions.\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tvc.assign(d.at(i));\n\n\t\t\tfor (const v of this.#vars) v.solverObject.reveal(level);\n\t\t\tif (!this.#checkBackwardConsistency(vc)) continue;\n\t\t\tif (!this.#checkForward(level, vc_index)) continue;\n\n\t\t\tconst nextLevel = level + 1;\n\t\t\tbc = (nextLevel === this.#vars.length - 1) ? this.#branchLast(nextLevel) : this.#branch(nextLevel);\n\t\t\tif (bc === FuzzyForwardChecking.TERMINATE) break;\n\t\t}\n\t\tif (bc === FuzzyForwardChecking.CONTINUE) {  // When searching back to the parent, undo the branch pruning here.\n\t\t\tfor (const v of this.#vars) v.solverObject.reveal(level);\n\t\t}\n\t\tvc.clear();\n\t\treturn bc;\n\t}\n\n\t// Performs search on the last variable.\n\t#branchLast(level) {\n\t\tlet bc = FuzzyForwardChecking.CONTINUE;\n\t\tconst vc = this.#vars[this.#useMRV ? this.#indexOfVariableWithMRV() : level];\n\t\tconst d  = vc.domain();\n\t\tconst dc = vc.solverObject;\n\t\tthis.#sequence[level] = vc;\n\n\t\tfor (let i = 0, n = d.size(); i < n; ++i) {\n\t\t\tif (dc.isValueHidden(i)) continue;\n\t\t\tif ((this._iterLimit && this._iterLimit < this.#iterCount++) || this.#endTime < Date.now()) {\n\t\t\t\tbc = FuzzyForwardChecking.TERMINATE;  // Search terminated due to restrictions.\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tvc.assign(d.at(i));\n\n\t\t\tconst deg = this._pro.worstSatisfactionDegree();\n\t\t\tif (deg > this.#solWorstDeg) {  // A new solution is assumed when 'greater than'.\n\t\t\t\tthis.#solWorstDeg = deg;\n\t\t\t\tthis.#sol.setProblem(this._pro);\n\t\t\t\tbc = FuzzyForwardChecking.TERMINATE;\n\t\t\t\tif (this._targetDeg !==  null && this._targetDeg <= this.#solWorstDeg) {  // Search ends when target is reached\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tthis.#pruneUnaryConstraints();\n\t\t\t\tthis.#refresh();\n\t\t\t}\n\t\t}\n\t\tvc.clear();\n\t\treturn bc;\n\t}\n\n\t// Do search.\n\texec() {\n\t\tthis.#endTime   = (this._timeLimit === null) ? Number.MAX_VALUE : (Date.now() + this._timeLimit);\n\t\tthis.#iterCount = 0;\n\n\t\tfor (const v of this.#vars) {\n\t\t\tv.solverObject = new DomainPruner(v.domain().size());  // Generation of domain pruners.\n\t\t}\n\t\tthis._pro.clearAllVariables();\n\t\tif (!this.#pruneUnaryConstraints()) return false;  // Since _worstSatisfactionDegree_ has been updated, call this function.\n\n\t\tlet success = false;\n\t\twhile (true) {\n\t\t\tconst bc = this.#branch(0);\n\t\t\tif (bc === FuzzyForwardChecking.TERMINATE) {\n\t\t\t\tif (this._iterLimit && this._iterLimit < this.#iterCount++) {\n\t\t\t\t\tif (this._debug) console.log('stop: number of iterations has reached the limit');\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (this.#endTime < Date.now()) {\n\t\t\t\t\tif (this._debug) console.log('stop: time limit has been reached');\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this.#sol.isEmpty()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (this._debug) {\n\t\t\t\tconsole.log(`\\tfound a solution: ${this.#solWorstDeg}`);\n\t\t\t}\n\t\t\tif (this.foundSolution(this.#sol, this.#solWorstDeg)) {  // Call hook\n\t\t\t\tsuccess = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (this._targetDeg === null) {  // Degree not specified\n\t\t\t\tsuccess = true;\n\t\t\t\tthis.#solWorstDeg += this.#degInc;  // Find the next solution within the limit.\n\t\t\t} else if (this._targetDeg <= this.#solWorstDeg) {  // The current degree exceeded the specified degree.\n\t\t\t\tif (this._debug) console.log('stop: current degree is above the target');\n\t\t\t\tsuccess = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tfor (const v of this.#vars) v.solverObject.revealAll();\n\t\t}\n\t\tthis.#sol.apply();\n\t\tfor (const v of this.#vars) v.solverObject = null;  // Delete branch pruner\n\t\treturn success;\n\t}\n\n\t/**\n\t * Constraint satisfaction degree is set as an achievement goal that serves as a condition for stopping the solver.\n\t * The solver stops as successful when the specified degree is reached or exceeded.\n\t * The default (unset) is 0.8.\n\t * @param rate Degree. null indicates not set.\n\t */\n\tsetTargetRate(rate = null) {\n\t\tthis._targetDeg = rate;\n\t\tif (this._targetDeg === null) {\n\t\t\tthis.#solWorstDeg = 0;\n\t\t} else {\n\t\t\t// Find the worstSatisfactionDegree_ that is slightly smaller than the targetDegree_.\n\t\t\tlet e = Number.MIN_VALUE\n\t\t\tthis.#solWorstDeg = this._targetDeg - e;\n\t\t\twhile (this.#solWorstDeg >= this._targetDeg) {\n\t\t\t\te *= 10;\n\t\t\t\tthis.#solWorstDeg = this._targetDeg - e;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Specify whether to use the minimum-remaining-values (MRV) heuristic.\n\t * Use of MRV may increase processing time for some problems.\n\t * Default is false.\n\t * @param flag Use MRV if true.\n\t */\n\tsetUsingMinimumRemainingValuesHeuristics(flag) {\n\t\tthis.#useMRV = flag;\n\t}\n\n\t/**\n\t * If a solution is found and the search continues, it specifies how much the worst constraint satisfaction degree should be increased.\n\t * @param degree Increasing constraint satisfaction degree.\n\t */\n\tsetIncrementStepOfWorstSatisfactionDegree(degree) {\n\t\tthis.#degInc = degree;\n\t}\n\n\t/**\n\t * Specifies whether or not to intensively prune branches when the problem contains 3- or n-ary constraints.\n\t * Depending on the problem, intensive pruning may increase processing time.\n\t * Default is false.\n\t * @param flag Whether or not to intensively prune branches.\n\t */\n\tsetIntensivePruning(flag) {\n\t\tthis.#pruneIntensively = flag;\n\t}\n\n}\n\n/**\n * This class implements the forward checking method for fuzzy CSPs that contain only binary constraints.\n * The minimum-remaining-values (MRV) heuristic can also be used by specifying the option.\n *\n * @author Takuto Yanagida\n * @version 2023-04-10\n */\n\nclass FuzzyForwardCheckingBc extends Solver {\n\n\tstatic CONTINUE  = 0;\n\tstatic TERMINATE = 1;\n\n\t#vars;\n\t#sol = new AssignmentList();\n\t#relCons;  // Table to cache constraints between two variables.\n\n\t#solWorstDeg = 0;  // Degree of existing solutions (no need to find a solution less than this).\n\n\t#iterCount;\n\t#endTime;\n\t#useMRV = false;\n\t#degInc = 0;\n\n\t/**\n\t * Generates the solver given a fuzzy constraint satisfaction problem.\n\t * @param p A fuzzy problem.\n\t * @param worstSatisfactionDegree Worst satisfaction degree.\n\t */\n\tconstructor(p, worstSatisfactionDegree = null) {\n\t\tsuper(p);\n\t\tthis.#vars = [...this._pro.variables()];\n\t\tthis.#initializeRelatedConstraintTable();\n\n\t\tthis.#solWorstDeg = Math.max(0, p.worstSatisfactionDegree());\n\t\tif (worstSatisfactionDegree) {\n\t\t\tthis.#solWorstDeg = worstSatisfactionDegree;\n\t\t}\n\t}\n\n\tname() {\n\t\treturn 'Forward Checking for Fuzzy CSPs of Binary Constraints';\n\t}\n\n\tfoundSolution() {\n\t\treturn false;\n\t}\n\n\t// Initializes a table that caches constraints between two variables.\n\t#initializeRelatedConstraintTable() {\n\t\tthis.#relCons = [];\n\n\t\tfor (let j = 0; j < this.#vars.length; ++j) {\n\t\t\tthis.#relCons.push(new Array(this.#vars.length));\n\n\t\t\tfor (let i = 0; i < this.#vars.length; i++) {\n\t\t\t\tif (i < j) {\n\t\t\t\t\tthis.#relCons[j][i] = this._pro.constraintsBetween(this.#vars[i], this.#vars[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Retrieves an array of constraints from a table that caches constraints between two variables.\n\t#getConstraintsBetween(vi_index, vj_index) {\n\t\tif (vi_index < vj_index) {\n\t\t\treturn this.#relCons[vj_index][vi_index];\n\t\t}\n\t\treturn this.#relCons[vi_index][vj_index];\n\t}\n\n\t// Check for consistency between the current variable and one future variable, and prune elements of the domain that are inconsistent (when there is one unassigned variable in the scope of the constraint).\n\t#checkForwardConsistency(level, vi, c) {\n\t\tconst di  = vi.domain();\n\t\tconst dci = vi.solverObject;\n\n\t\tfor (let i = 0, n = di.size(); i < n; ++i) {\n\t\t\tif (dci.isValueHidden(i)) continue;\n\t\t\tvi.assign(di.at(i));\n\t\t\tif (c.satisfactionDegree() <= this.#solWorstDeg) {  // It is not a solution when it is 'smaller than or equals'.\n\t\t\t\tdci.hide(i, level);  // Here's a branch pruning!\n\t\t\t}\n\t\t}\n\t\tvi.clear();\n\t\treturn !dci.isEmpty();  // Succeeds if the domain di of the future variable vi is not empty.\n\t}\n\n\t// Checks for possible assignment to a future variable from the current variable assignment.\n\t#checkForward(level, index) {\n\t\tfor (const v_i of  this.#vars) {\n\t\t\tif (!v_i.isEmpty()) continue;  // If it is a past or present variable.\n\n\t\t\tconst cs = this.#getConstraintsBetween(index, v_i.index());\n\t\t\tfor (const c of cs) {\n\t\t\t\tif (c.size() === 2) {  // If it is a binary constraint.\n\t\t\t\t\tif (!this.#checkForwardConsistency(level, v_i, c)) return false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t// Returns the index of the smallest domain variable.\n\t#indexOfVariableWithMRV() {\n\t\tlet index = 0;\n\t\tlet size  = Number.MAX_VALUE;\n\n\t\tfor (let i = 0; i < this.#vars.length; ++i) {\n\t\t\tconst v = this.#vars[i];\n\t\t\tif (!v.isEmpty()) continue;\n\t\t\tconst d = v.domain();\n\t\t\tconst s = d.size() - v.solverObject.hiddenSize();\n\t\t\tif (s < size) {\n\t\t\t\tsize  = s;\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\t\treturn index;\n\t}\n\n\t// Performs search one variable at a time.\n\t#branch(level) {\n\t\tlet bc = FuzzyForwardCheckingBc.CONTINUE;\n\t\tconst vc_index = this.#useMRV ? this.#indexOfVariableWithMRV() : level;\n\t\tconst vc       = this.#vars[vc_index];\n\t\tconst d        = vc.domain();\n\t\tconst dc       = vc.solverObject;\n\n\t\tfor (let i = 0, n = d.size(); i < n; ++i) {\n\t\t\tif (dc.isValueHidden(i)) continue;\n\t\t\tif ((this._iterLimit && this._iterLimit < this.#iterCount++) || this.#endTime < Date.now()) {\n\t\t\t\tbc = FuzzyForwardCheckingBc.TERMINATE;  // Search terminated due to restrictions.\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tvc.assign(d.at(i));\n\n\t\t\tfor (const v of this.#vars) v.solverObject.reveal(level);\n\t\t\tif (!this.#checkForward(level, vc_index)) continue;\n\n\t\t\tconst nextLevel = level + 1;\n\t\t\tbc = (nextLevel === this.#vars.length - 1) ? this.#branchLast(nextLevel) : this.#branch(nextLevel);\n\t\t\tif (bc === FuzzyForwardCheckingBc.TERMINATE) break;\n\t\t}\n\t\tif (bc === FuzzyForwardCheckingBc.CONTINUE) {  // When searching back to the parent, undo the branch pruning here.\n\t\t\tfor (const v of this.#vars) v.solverObject.reveal(level);\n\t\t}\n\t\tvc.clear();\n\t\treturn bc;\n\t}\n\n\t// Performs search on the last variable.\n\t#branchLast(level) {\n\t\tlet bc = FuzzyForwardCheckingBc.CONTINUE;\n\t\tconst vc = this.#vars[this.#useMRV ? this.#indexOfVariableWithMRV() : level];\n\t\tconst d  = vc.domain();\n\t\tconst dc = vc.solverObject;\n\n\t\tfor (let i = 0, n = d.size(); i < n; ++i) {\n\t\t\tif (dc.isValueHidden(i)) continue;\n\t\t\tif ((this._iterLimit && this._iterLimit < this.#iterCount++) || this.#endTime < Date.now()) {\n\t\t\t\tbc = FuzzyForwardCheckingBc.TERMINATE;  // Search terminated due to restrictions.\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tvc.assign(d.at(i));\n\n\t\t\tconst deg = this._pro.worstSatisfactionDegree();\n\t\t\tif (deg > this.#solWorstDeg) {  // A new solution is assumed when 'greater than'.\n\t\t\t\tthis.#solWorstDeg = deg;\n\t\t\t\tthis.#sol.setProblem(this._pro);\n\t\t\t\tbc = FuzzyForwardCheckingBc.TERMINATE;  // Search terminated due to restrictions.\n\t\t\t\tif (this._targetDeg !== null && this._targetDeg <= this.#solWorstDeg) {  // Search ends when target is reached\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tvc.clear();\n\t\treturn bc;\n\t}\n\n\t// Do search.\n\texec() {\n\t\tthis.#endTime   = (this._timeLimit === null) ? Number.MAX_VALUE : (Date.now() + this._timeLimit);\n\t\tthis.#iterCount = 0;\n\n\t\tfor (const v of this.#vars) {\n\t\t\tv.solverObject = new DomainPruner(v.domain().size());  // Generation of domain pruners.\n\t\t}\n\t\tthis._pro.clearAllVariables();\n\n\t\tconst sol = new AssignmentList();\n\n\t\tlet success = false;\n\t\twhile (true) {\n\t\t\tconst bc = this.#branch(0);\n\t\t\tif (bc === FuzzyForwardCheckingBc.TERMINATE) {\n\t\t\t\tif (this._iterLimit && this._iterLimit < this.#iterCount++) {\n\t\t\t\t\tif (this._debug) console.log('stop: number of iterations has reached the limit');\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (this.#endTime < Date.now()) {\n\t\t\t\t\tif (this._debug) console.log('stop: time limit has been reached');\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this.#sol.isEmpty()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tsol.setAssignmentList(this.#sol);\n\t\t\tthis.#sol.clear();  // Clear it so that if the solution is not found in the next search, it will be known.\n\n\t\t\tif (this._debug) {\n\t\t\t\tconsole.log(`\\tfound a solution: ${this.#solWorstDeg}`);\n\t\t\t}\n\t\t\tif (this.foundSolution(sol, this.#solWorstDeg)) {  // Call hook\n\t\t\t\tsuccess = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (this._targetDeg === null) {  // Degree not specified\n\t\t\t\tsuccess = true;\n\t\t\t\tif (this.#solWorstDeg + this.#degInc > 1) break;\n\t\t\t\tthis.#solWorstDeg += ((this.#solWorstDeg + this.#degInc > 1) ? 0 : this.#degInc);  // Find the next solution within the limit.\n\t\t\t} else if (this._targetDeg <= this.#solWorstDeg) {  // The current degree exceeded the specified degree.\n\t\t\t\tif (this._debug) console.log(`stop: current degree is above the target`);\n\t\t\t\tsuccess = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tfor (const v of this.#vars) v.solverObject.revealAll();\n\t\t}\n\t\tsol.apply();\n\t\tfor (const v of this.#vars) v.solverObject = null;  // Delete branch pruner\n\t\treturn success;\n\t}\n\n\t/**\n\t * Constraint satisfaction degree is set as an achievement goal that serves as a condition for stopping the solver.\n\t * The solver stops as successful when the specified degree is reached or exceeded.\n\t * The default (unset) is 0.8.\n\t * @param rate Degree. null indicates not set.\n\t */\n\tsetTargetRate(rate = null) {\n\t\tthis._targetDeg = rate;\n\t\tif (this._targetDeg === null) {\n\t\t\tthis.#solWorstDeg = 0;\n\t\t} else {\n\t\t\t// Find the worstSatisfactionDegree_ that is slightly smaller than the targetDegree_.\n\t\t\tlet e = Number.MIN_VALUE\n\t\t\tthis.#solWorstDeg = this._targetDeg - e;\n\t\t\twhile (this.#solWorstDeg >= this._targetDeg) {\n\t\t\t\te *= 10;\n\t\t\t\tthis.#solWorstDeg = this._targetDeg - e;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Specify whether to use the minimum-remaining-values (MRV) heuristic.\n\t * Use of MRV may increase processing time for some problems.\n\t * Default is false.\n\t * @param flag Use MRV if true.\n\t */\n\tsetUsingMinimumRemainingValuesHeuristics(flag) {\n\t\tthis.#useMRV = flag;\n\t}\n\n\t/**\n\t * If a solution is found and the search continues, it specifies how much the worst constraint satisfaction degree should be increased.\n\t * @param degree Increasing constraint satisfaction degree.\n\t */\n\tsetIncrementStepOfWorstSatisfactionDegree(degree) {\n\t\tthis.#degInc = degree;\n\t}\n\n}\n\n/**\n * This class implements fuzzy GENET.\n * CSPs and FCSPs (but only Binary (F)CSPs) is supported.\n *\n * @author Takuto Yanagida\n * @version 2023-04-10\n */\n\nclass FuzzyGENET extends Solver {\n\n\tstatic nextInt(max) {\n\t\treturn Math.floor(Math.random() * Math.floor(max));\n\t}\n\n\t#clusters = [];\n\t#connections;\n\n\tconstructor(p, worstSatisfactionDegree = 1) {\n\t\tsuper(p);\n\t\tif (!this.#createNetwork(worstSatisfactionDegree)) {\n\t\t\tthrow new Exception();\n\t\t}\n\t}\n\n\tname() {\n\t\treturn 'Fuzzy GENET';\n\t}\n\n\t#createNetwork(worstDeg) {\n\t\tif (this._debug) console.log('network creation start');\n\t\tconst cons = [];\n\n\t\tfor (const v of this._pro.variables()) {\n\t\t\tif (v.domain().size() === 0) return false;\n\t\t\tthis.#clusters.push(new FuzzyGENET.Cluster(v));\n\t\t}\n\t\tfor (const c of this._pro.constraints()) {\n\t\t\tif (c.size() === 1) {  // In the case of unary constraints.\n\t\t\t\tconst v  = c.at(0);\n\t\t\t\tconst cl = this.#clusters[c.at(0).index()];\n\n\t\t\t\tfor (let i = 0; i < cl.size(); ++i) {\n\t\t\t\t\tconst origVal = v.value();  // Save the value.\n\t\t\t\t\tv.assign(cl.get(i)._value);\n\n\t\t\t\t\tif (c.satisfactionDegree() <= worstDeg) {\n\t\t\t\t\t\tcons.push(new FuzzyGENET.Connection(c, cl.get(i)));\n\t\t\t\t\t}\n\t\t\t\t\tv.assign(origVal);  // Restore the value.\n\t\t\t\t}\n\t\t\t} else {  // In the case of binary constraints.\n\t\t\t\tconst v1   = c.at(0);\n\t\t\t\tconst v2   = c.at(1);\n\t\t\t\tconst cl_f = this.#clusters[c.at(0).index()];\n\t\t\t\tconst cl_s = this.#clusters[c.at(1).index()];\n\n\t\t\t\tfor (let i = 0; i < cl_f.size(); ++i) {\n\t\t\t\t\tconst origVal1 = v1.value();  // Save the value.\n\t\t\t\t\tv1.assign(cl_f.get(i)._value);\n\n\t\t\t\t\tfor (let j = 0; j < cl_s.size(); ++j) {\n\t\t\t\t\t\tconst origVal2 = v2.value();  // Save the value.\n\t\t\t\t\t\tv2.assign(cl_s.get(j)._value);\n\n\t\t\t\t\t\tif (c.satisfactionDegree() <= worstDeg) {\n\t\t\t\t\t\t\tcons.push(new FuzzyGENET.Connection(c, cl_f.get(i), cl_s.get(j)));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tv2.assign(origVal2);  // Restore the value.\n\t\t\t\t\t}\n\t\t\t\t\tv1.assign(origVal1);  // Restore the value.\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (const cl of this.#clusters) {\n\t\t\tfor (const n of cl._neurons) n.lockConnections();\n\t\t}\n\t\tthis.#connections = cons;\n\t\tif (this._debug) console.log('network creation complete');\n\t\treturn true;\n\t}\n\n\t#shuffle(is) {\n\t\tfor (let i = is.length; i > 1; --i) {\n\t\t\tconst j    = GENET.nextInt(i);\n\t\t\tconst temp = is[i - 1];\n\t\t\tis[i - 1] = is[j];\n\t\t\tis[j]     = temp;\n\t\t}\n\t\treturn is;\n\t}\n\n\texec() {\n\t\tconst endTime = (this._timeLimit === null) ? Number.MAX_VALUE : (Date.now() + this._timeLimit);\n\t\tlet iterCount = 0;\n\n\t\tconst sol   = new AssignmentList();\n\t\tconst order = [];\n\t\tfor (let i = 0; i < this.#clusters.length; i++) {\n\t\t\torder.push(i);\n\t\t}\n\n\t\tlet cur     = this._pro.worstSatisfactionDegree();\n\t\tlet success = false;\n\n\t\twhile (true) {\n\t\t\tif (this._iterLimit && this._iterLimit < iterCount++) {  // Failure if repeated a specified number\n\t\t\t\tif (this._debug) console.log('stop: number of iterations has reached the limit');\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (endTime < Date.now()) {  // Failure if time limit is exceeded\n\t\t\t\tif (this._debug) console.log('stop: time limit has been reached');\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tlet modified = false;\n\t\t\tfor (const i of this.#shuffle(order)) {\n\t\t\t\tif (this.#clusters[i].setActivityMaximumInput()) {\n\t\t\t\t\tmodified = true;  // Turn on the node with the largest input in each cluster\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!modified) {  // When the local minimum solution is reached.\n\t\t\t\tfor (const con of this.#connections) {\n\t\t\t\t\tcon.refreshWeight();  // Update weights for all connections\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t} else {\n\t\t\t\tfor (const clu of this.#clusters) {\n\t\t\t\t\tclu.applyToVariable();  // Apply to variable\n\t\t\t\t}\n\t\t\t\tconst d = this._pro.worstSatisfactionDegree();\n\t\t\t\tif (cur < d) {  // If it's a better assignment than ever, save it.\n\t\t\t\t\tcur = d;\n\t\t\t\t\tif (this._debug) console.log(`worst satisfaction degree: ${d}`);\n\t\t\t\t\tsol.setProblem(this._pro);\n\t\t\t\t\tif (this.foundSolution(sol, d)) {  // Call hook\n\t\t\t\t\t\tsuccess = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (this._targetDeg === null) {  // Satisfaction degree is not specified.\n\t\t\t\t\t\tsuccess = true;\n\t\t\t\t\t} else if (this._targetDeg <= cur) {  // Satisfaction degree is specified.\n\t\t\t\t\t\tif (this._debug) console.log('stop: current degree is above the target');\n\t\t\t\t\t\tsuccess = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tsol.apply();\n\t\treturn success;\n\t}\n\n}\n\n{\n\n\tclass Cluster {\n\n\t\tstatic nextInt(max) {\n\t\t\treturn Math.floor(Math.random() * Math.floor(max));\n\t\t}\n\n\t\t#var;\n\t\t#index;\n\t\t#maxNeurons = [];\n\t\t_neurons    = [];\n\n\t\tconstructor(v) {\n\t\t\tthis.#var = v;\n\n\t\t\tfor (const val of v.domain()) {\n\t\t\t\tthis._neurons.push(new Neuron(val));\n\t\t\t}\n\t\t\tthis.#setActivity(Cluster.nextInt(this._neurons.length));\n\t\t}\n\n\t\t#setActivity(index) {\n\t\t\tfor (const n of this._neurons) {\n\t\t\t\tn._isActive = false;\n\t\t\t}\n\t\t\tthis._neurons[index]._isActive = true;\n\t\t\tthis.#index = index;\n\t\t}\n\n\t\tapplyToVariable() {\n\t\t\tthis.#var.assign(this._neurons[this.#index]._value);\n\t\t}\n\n\t\tget(index) {\n\t\t\treturn this._neurons[index];\n\t\t}\n\n\t\tneurons() {\n\t\t\treturn this._neurons;\n\t\t}\n\n\t\t// Turn on the node with the largest input.\n\t\tsetActivityMaximumInput() {\n\t\t\tthis.#maxNeurons.length = 0;\n\n\t\t\tlet max       = Number.NEGATIVE_INFINITY;\n\t\t\tlet alreadyOn = false;\n\n\t\t\tfor (let i = 0; i < this._neurons.length; ++i) {\n\t\t\t\tconst input = this._neurons[i].getInput();\n\n\t\t\t\tif (max <= input) {\n\t\t\t\t\tif (max < input) {\n\t\t\t\t\t\tmax = input;\n\t\t\t\t\t\tthis.#maxNeurons.length = 0;\n\t\t\t\t\t\talreadyOn = false;\n\t\t\t\t\t}\n\t\t\t\t\tthis.#maxNeurons.push(i);\n\t\t\t\t\tif (this.#index === i) {\n\t\t\t\t\t\talreadyOn = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (alreadyOn || this.#maxNeurons.length === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tthis.#setActivity(this.#maxNeurons[Cluster.nextInt(this.#maxNeurons.length)]);\n\t\t\treturn true;\n\t\t}\n\n\t\tsize() {\n\t\t\treturn this._neurons.length;\n\t\t}\n\n\t}\n\tFuzzyGENET.Cluster = Cluster;\n\n\tclass Connection {\n\n\t\t#c\n\t\t#first;\n\t\t#second;\n\t\t_weight;  // Direct reference (read) allowed.\n\n\t\t// Order of neurons must be the same as the order of variables that the constraint has.\n\t\tconstructor(c, first, second = null) {\n\t\t\tthis._weight = c.satisfactionDegree() - 1;\n\t\t\tthis.#c      = c;\n\n\t\t\tthis.#first = first;\n\t\t\tthis.#first.addConnection(this);\n\t\t\tthis.#second = second;\n\t\t\tif (this.#second !== null) {\n\t\t\t\tthis.#second.addConnection(this);\n\t\t\t}\n\t\t}\n\n\t\tgetNeuron(self) {\n\t\t\tif (self === this.#first)  return this.#second;\n\t\t\tif (self === this.#second) return this.#first;\n\t\t\treturn null;\n\t\t}\n\n\t\trefreshWeight() {\n\t\t\tif (!this.#first._isActive || (this.#second !== null && !this.#second._isActive)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (this.#c.size() === 1) {\n\t\t\t\tthis._weight += (this.#c.fuzzyRelation().satisfactionDegree(this.#first._value) - 1);\n\t\t\t} else {\n\t\t\t\tthis._weight += (this.#c.fuzzyRelation().satisfactionDegree(this.#first._value, this.#second._value) - 1);\n\t\t\t}\n\t\t}\n\n\t}\n\tFuzzyGENET.Connection = Connection;\n\n\tclass Neuron {\n\n\t\t#conTemp = [];\n\t\t#connections;\n\t\t_value;  // Direct reference (read) allowed.\n\t\t_isActive = false;  // Direct reference (read, write) allowed.\n\n\t\tconstructor(value) {\n\t\t\tthis._value = value;\n\t\t}\n\n\t\taddConnection(c) {\n\t\t\tthis.#conTemp.push(c);\n\t\t}\n\n\t\tlockConnections() {\n\t\t\tthis.#connections = [...this.#conTemp];\n\t\t\tthis.#conTemp     = null;  // No longer being used.\n\t\t}\n\n\t\tgetInput() {\n\t\t\tlet ret = 0;\n\t\t\tfor (const c of this.#connections) {\n\t\t\t\tconst n = c.getNeuron(this);  // If n is null, then the unary constraint.\n\t\t\t\tret += c._weight * ((n === null || n._isActive) ? 1 : 0);\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\n\t}\n\tFuzzyGENET.Neuron = Neuron;\n\n}\n\n/**\n * A class that implements the flexible local changes method.\n *\n * @author Takuto Yanagida\n * @version 2023-04-10\n */\n\nclass FlexibleLocalChanges extends Solver {\n\n\tstatic #setPlusSet(s1, s2) {\n\t\tconst sn = new Set(s1);\n\t\tfor (const v of s2) sn.add(v);\n\t\treturn sn;\n\t}\n\n\tstatic #setMinusSet(s1, s2) {\n\t\tconst sn = new Set(s1);\n\t\tfor (const v of s2) sn.delete(v);\n\t\treturn sn;\n\t}\n\n\tstatic #setPlusElement(s, e) {\n\t\tconst sn = new Set(s);\n\t\tsn.add(e);\n\t\treturn sn;\n\t}\n\n\tstatic #setMinusElement(s, e) {\n\t\tconst sn = new Set(s);\n\t\tsn.delete(e);\n\t\treturn sn;\n\t}\n\n\t#lt;\n\t#lb;\n\n\t#iterCount;\n\t#endTime;\n\t#globalReturn;\n\n\tconstructor(p) {\n\t\tsuper(p);\n\t\tthis.#computeHighestAndLowestConsistencyDegree();\n\t}\n\n\tname() {\n\t\treturn 'Flexible Local Changes';\n\t}\n\n\t#choose(x2, cr) {\n\t\tconst res = new Map();\n\n\t\tfor (const c of cr) {\n\t\t\tif (!c.isDefined()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfor (let i = 0; i < c.size(); ++i) {\n\t\t\t\tconst v = c.at(i);\n\t\t\t\tif (!res.has(v)) {\n\t\t\t\t\tres.set(v, 1);\n\t\t\t\t} else {\n\t\t\t\t\tres.set(v, res.get(v) + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst vs = [...x2];\n\t\tvs.sort((o1, o2) => {\n\t\t\tlet res1 = 0;\n\t\t\tlet res2 = 0;\n\t\t\tif (res.has(o1)) res1 = res.get(o1);\n\t\t\tif (res.has(o2)) res2 = res.get(o2);\n\n\t\t\tif (res1 < res2) return 1;\n\t\t\tif (res1 > res2) return -1;\n\t\t\treturn 0;\n\t\t});\n\n\t\tconst ret = new Set();\n\n\t\tfor (const v of vs) {\n\t\t\tlet remain = false;\n\t\t\tfor (const c of cr) {\n\t\t\t\tif (c.isDefined()) {\n\t\t\t\t\tremain = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!remain) break;\n\t\t\tv.clear();\n\t\t\tret.add(v);\n\t\t}\n\t\treturn ret;\n\t}\n\n\t#computeHighestAndLowestConsistencyDegree() {\n\t\tlet low  = 1;\n\t\tlet high = 0;\n\n\t\tfor (const v of this._pro.variables()) {\n\t\t\tfor (let i = 0; i < v.size(); ++i) {\n\t\t\t\tconst c = v.at(i);\n\n\t\t\t\tconst l = c.lowestConsistencyDegree();\n\t\t\t\tconst h = c.highestConsistencyDegree();\n\t\t\t\tif (l < low)  low  = l;\n\t\t\t\tif (h > high) high = h;\n\t\t\t}\n\t\t}\n\t\tthis.#lb = low;\n\t\tthis.#lt = high;\n\t}\n\n\t#flcRepair(X1, X2, xi, consX1xi, consX12, cr, rc) {\n\t\tconst X3p = this.#choose(X2, cr);\n\t\tconst X1p = FlexibleLocalChanges.#setPlusElement(X1, xi);\n\t\tconst X2p = FlexibleLocalChanges.#setMinusSet(X2, X3p);\n\t\treturn this.#flcVariables(X1p, X2p, X3p, consX1xi, Math.min(consX12, consX1xi), rc);\n\t}\n\n\t#flcVariable(X1, X2, xi, consX1, consX12, rc) {\n\t\tlet bestCons = this.#lb;\n\t\tif (xi.domain().size() === 0) {\n\t\t\treturn bestCons;\n\t\t}\n\t\tlet bestX2  = AssignmentList.fromVariables(X2);\n\t\tlet bestDij = xi.domain().at(0);\n\n\t\tconst x2Store = AssignmentList.fromVariables(X2);\n\n\t\tfor (let j = 0; j < xi.domain().size() && bestCons < consX12; ++j) {\n\t\t\tconst dij = xi.domain().at(j);\n\t\t\txi.assign(dij);\n\t\t\tconst consX1_xi = Math.min(consX1, this.#testX1(X1, xi, bestCons, rc));\n\n\t\t\tif (consX1_xi > Math.max(bestCons, rc)) {\n\t\t\t\tconst crNew = new Set();\n\t\t\t\tconst consX12_xi = Math.min(Math.min(consX1_xi, consX12), this.#testX12(X1, X2, xi, consX1_xi, consX12, crNew));\n\n\t\t\t\tif (consX12_xi > bestCons) {\n\t\t\t\t\tbestCons = consX12_xi;\n\t\t\t\t\tbestDij  = dij;\n\t\t\t\t\tbestX2   = AssignmentList.fromVariables(X2);\n\t\t\t\t}\n\t\t\t\tif (crNew.size) {\n\t\t\t\t\tconst repairCons = this.#flcRepair(X1, X2, xi, consX1_xi, consX12, crNew, Math.max(rc, bestCons));\n\t\t\t\t\tif (this.#globalReturn !== -1) {\n\t\t\t\t\t\treturn bestCons;\n\t\t\t\t\t}\n\t\t\t\t\tif (repairCons > bestCons) {\n\t\t\t\t\t\tbestCons = repairCons;\n\t\t\t\t\t\tbestDij  = dij;\n\t\t\t\t\t\tbestX2   = AssignmentList.fromVariables(X2);\n\t\t\t\t\t}\n\t\t\t\t\tx2Store.apply();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tbestX2.apply();\n\t\txi.assign(bestDij);\n\t\treturn bestCons;\n\t}\n\n\t#flcVariables(X1, X2, X3, consX1, consX12, rc) {\n\t\tif (this._debug) {\n\t\t\tconsole.log(`X1 ${X1.size}, X2' ${X2.size}, X3' ${X3.size}`);\n\t\t}\n\t\tif (this._targetDeg !== null && this._targetDeg <= this._pro.worstSatisfactionDegree()) {  // Success if the degree improves from specified\n\t\t\tif (this._debug) console.log('stop: current degree is above the target');\n\t\t\tthis.#globalReturn = 1;\n\t\t\treturn consX12;\n\t\t}\n\t\tif (this._iterLimit && this._iterLimit < this.#iterCount++) {  // Failure if repeated a specified number\n\t\t\tif (this._debug) console.log('stop: number of iterations has reached the limit');\n\t\t\tthis.#globalReturn = 0;\n\t\t\treturn consX12;\n\t\t}\n\t\tif (this.#endTime < Date.now()) {  // Failure if time limit is exceeded\n\t\t\tif (this._debug) console.log('stop: time limit has been reached');\n\t\t\tthis.#globalReturn = 0;\n\t\t\treturn consX12;\n\t\t}\n\t\tif (X3.size === 0) {\n\t\t\treturn consX12;\n\t\t}\n\t\tconst xi        = X3.values().next().value;\n\t\tconst consX12xi = this.#flcVariable(X1, X2, xi, consX1, consX12, rc);\n\n\t\tif (this.#globalReturn !== -1) {\n\t\t\treturn consX12;\n\t\t}\n\t\tif (consX12xi < rc) {\n\t\t\treturn this.#lb;\n\t\t}\n\t\tX2 = FlexibleLocalChanges.#setPlusElement(X2, xi);\n\t\tX3 = FlexibleLocalChanges.#setMinusElement(X3, xi);\n\t\treturn this.#flcVariables(X1, X2, X3, consX1, consX12xi, rc);\n\t}\n\n\t#initTest(X, cr) {\n\t\tconst cs = new Set();\n\t\tfor (const v of X) {\n\t\t\tfor (let i = 0; i < v.size(); ++i) {\n\t\t\t\tcs.add(v.at(i));  // All variables in X have been assigned.\n\t\t\t}\n\t\t}\n\t\tlet ret = 1;\n\t\tfor (const c of cs) {\n\t\t\tconst sd = c.satisfactionDegree();\n\t\t\tif (sd === Constraint.UNDEFINED) continue;\n\t\t\tif (sd < ret) ret = sd;\n\t\t}\n\t\tfor (const c of this._pro.constraints()) {\n\t\t\tconst cd = c.lowestConsistencyDegree();\n\t\t\tif (cd < this.#lt) cr.add(c);\n\t\t}\n\t\treturn ret;\n\t}\n\n\t#testX1(X1, xi, bestCons, rc) {\n\t\tlet cd = 1;\n\t\tconst cs = new Set();\n\n\t\tfor (const v of X1) {\n\t\t\tconst temp = this._pro.constraintsBetween(v, xi);\n\t\t\tfor (const c of temp) cs.add(c);\n\t\t}\n\t\tfor (const c of cs) {\n\t\t\tconst d = c.satisfactionDegree();\n\t\t\tif (d === Constraint.UNDEFINED) continue;\n\t\t\tif (d < cd) cd = d;\n\t\t\tif (cd <= bestCons || cd <= rc) return cd;  // If it is determined that a better solution than the current solution cannot be obtained\n\t\t}\n\t\treturn cd;\n\t}\n\n\t#testX12(X1, X2, xi, consX1xi, consX12, cr) {\n\t\tlet csd = 1;\n\t\tconst cs = new Set();\n\n\t\tfor (const v of X1) {\n\t\t\tconst temp = this._pro.constraintsBetween(v, xi);\n\t\t\tfor (const c of temp) cs.add(c);\n\t\t}\n\t\tfor (const v of X2) {\n\t\t\tconst temp = this._pro.constraintsBetween(v, xi);\n\t\t\tfor (const c of temp) cs.add(c);\n\t\t}\n\t\tfor (const c of cs) {\n\t\t\tconst sd = c.satisfactionDegree();\n\t\t\tif (sd === Constraint.UNDEFINED) continue;\n\t\t\tif (sd < csd) csd = sd;\n\t\t}\n\t\tfor (const c of cs) {\n\t\t\tconst sd = c.satisfactionDegree();\n\t\t\tif (sd === Constraint.UNDEFINED) continue;\n\t\t\tif (sd < consX1xi || sd < consX12) cr.add(c);\n\t\t}\n\t\treturn csd;\n\t}\n\n\texec() {\n\t\tthis.#endTime      = (this._timeLimit === null) ? Number.MAX_VALUE : (Date.now() + this._timeLimit);\n\t\tthis.#iterCount    = 0;\n\t\tthis.#globalReturn = -1;\n\n\t\tconst wsd = this._pro.worstSatisfactionDegree();\n\t\tif (this._pro.emptyVariableSize() === 0) {\n\t\t\tthis._pro.clearAllVariables();\n\t\t}\n\t\tconst X1 = new Set();\n\t\tconst X2 = new Set();  // Currently assigned variables.\n\t\tconst X3 = new Set();  // Currently unassigned variables.\n\t\tfor (const v of this._pro.variables()) {\n\t\t\t(!v.isEmpty() ? X2 : X3).add(v);\n\t\t}\n\n\t\tconst cr       = new Set();\n\t\tconst initCons = this.#initTest(X2, cr);\n\t\tlet rc;\n\t\tlet initSol = null;\n\n\t\tif (X3.size === 0) {\n\t\t\trc      = initCons;\n\t\t\tinitSol = AssignmentList.fromVariables(X2);\n\t\t} else {\n\t\t\trc = this.#lb;\n\t\t}\n\t\tconst X3p = FlexibleLocalChanges.#setPlusSet(this.#choose(X2, cr), X3);\n\t\tconst X2p = FlexibleLocalChanges.#setMinusSet(X2, X3p);\n\t\tlet result = this.#flcVariables(X1, X2p, X3p, this.#lt, this.#lt, rc);\n\t\tif (result < rc) {\n\t\t\tif (initSol !== null) {\n\t\t\t\tinitSol.apply();\n\t\t\t}\n\t\t}\n\t\tresult = this._pro.worstSatisfactionDegree();\n\t\treturn result > wsd && result > 0 && (this.#globalReturn !== 0 || this._targetDeg === null);\n\t}\n\n}\n\n/**\n * A class that implements the flexible local changes method.\n * The implementation is optimized by converting recursive calls to loops.\n *\n * @author Takuto Yanagida\n * @version 2023-04-10\n */\n\nclass FlexibleLocalChangesEx extends Solver {\n\n\tstatic #setPlusSet(s1, s2) {\n\t\tconst sn = new Set(s1);\n\t\tfor (const v of s2) sn.add(v);\n\t\treturn sn;\n\t}\n\n\tstatic #setMinusSet(s1, s2) {\n\t\tconst sn = new Set(s1);\n\t\tfor (const v of s2) sn.delete(v);\n\t\treturn sn;\n\t}\n\n\tstatic #setPlusElement(s, e) {\n\t\tconst sn = new Set(s);\n\t\tsn.add(e);\n\t\treturn sn;\n\t}\n\n\t#lt;\n\t#lb;\n\n\t#iterCount;\n\t#endTime;\n\t#globalReturn;\n\n\tconstructor(p) {\n\t\tsuper(p);\n\t\tthis.#computeHighestAndLowestConsistencyDegree();\n\t}\n\n\tname() {\n\t\treturn 'Flexible Local Changes Ex';\n\t}\n\n\t#choose(x2, cr) {\n\t\tconst res = new Map();\n\n\t\tfor (const c of cr) {\n\t\t\tif (!c.isDefined()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfor (let i = 0; i < c.size(); ++i) {\n\t\t\t\tconst v = c.at(i);\n\t\t\t\tif (!res.has(v)) {\n\t\t\t\t\tres.set(v, 1);\n\t\t\t\t} else {\n\t\t\t\t\tres.set(v, res.get(v) + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst vs = [...x2];\n\t\tvs.sort((o1, o2) => {\n\t\t\tlet res1 = 0;\n\t\t\tlet res2 = 0;\n\t\t\tif (res.has(o1)) res1 = res.get(o1);\n\t\t\tif (res.has(o2)) res2 = res.get(o2);\n\n\t\t\tif (res1 < res2) return 1;\n\t\t\tif (res1 > res2) return -1;\n\t\t\treturn 0;\n\t\t});\n\n\t\tconst ret = new Set();\n\n\t\tfor (const v of vs) {\n\t\t\tlet remain = false;\n\t\t\tfor (const c of cr) {\n\t\t\t\tif (c.isDefined()) {\n\t\t\t\t\tremain = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!remain) break;\n\t\t\tv.clear();\n\t\t\tret.add(v);\n\t\t}\n\t\treturn ret;\n\t}\n\n\t#computeHighestAndLowestConsistencyDegree() {\n\t\tlet low  = 1;\n\t\tlet high = 0;\n\n\t\tfor (const v of this._pro.variables()) {\n\t\t\tfor (let i = 0; i < v.size(); ++i) {\n\t\t\t\tconst c = v.at(i);\n\n\t\t\t\tconst l = c.lowestConsistencyDegree();\n\t\t\t\tconst h = c.highestConsistencyDegree();\n\t\t\t\tif (l < low)  low  = l;\n\t\t\t\tif (h > high) high = h;\n\t\t\t}\n\t\t}\n\t\tthis.#lb = low;\n\t\tthis.#lt = high;\n\t}\n\n\t#flcRepair(X1, X2, xi, consX1xi, consX12, cr, rc) {\n\t\tconst X3p = this.#choose(X2, cr);\n\t\tconst X1p = FlexibleLocalChangesEx.#setPlusElement(X1, xi);\n\t\tconst X2p = FlexibleLocalChangesEx.#setMinusSet(X2, X3p);\n\t\treturn this.#flcVariables(X1p, X2p, X3p, consX1xi, Math.min(consX12, consX1xi), rc);\n\t}\n\n\t#flcVariable(X1, X2, xi, consX1, consX12, rc) {\n\t\tlet bestCons = this.#lb;\n\t\tif (xi.domain().size() === 0) {\n\t\t\treturn bestCons;\n\t\t}\n\t\tlet bestX2  = AssignmentList.fromVariables(X2);\n\t\tlet bestDij = xi.domain().at(0);\n\n\t\tconst x2Store = AssignmentList.fromVariables(X2);\n\n\t\tfor (let j = 0; j < xi.domain().size() && bestCons < consX12; ++j) {\n\t\t\tconst dij = xi.domain().at(j);\n\t\t\txi.assign(dij);\n\t\t\tconst consX1_xi = Math.min(consX1, this.#testX1(X1, xi, bestCons, rc));\n\n\t\t\tif (consX1_xi > Math.max(bestCons, rc)) {\n\t\t\t\tconst crNew = new Set();\n\t\t\t\tconst consX12_xi = Math.min(Math.min(consX1_xi, consX12), this.#testX12(X1, X2, xi, consX1_xi, consX12, crNew));\n\n\t\t\t\tif (consX12_xi > bestCons) {\n\t\t\t\t\tbestCons = consX12_xi;\n\t\t\t\t\tbestDij  = dij;\n\t\t\t\t\tbestX2   = AssignmentList.fromVariables(X2);\n\t\t\t\t}\n\t\t\t\tif (crNew.size) {\n\t\t\t\t\tconst repairCons = this.#flcRepair(X1, X2, xi, consX1_xi, consX12, crNew, Math.max(rc, bestCons));\n\t\t\t\t\tif (this.#globalReturn !== -1) {\n\t\t\t\t\t\treturn bestCons;\n\t\t\t\t\t}\n\t\t\t\t\tif (repairCons > bestCons) {\n\t\t\t\t\t\tbestCons = repairCons;\n\t\t\t\t\t\tbestDij  = dij;\n\t\t\t\t\t\tbestX2   = AssignmentList.fromVariables(X2);\n\t\t\t\t\t}\n\t\t\t\t\tx2Store.apply();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tbestX2.apply();\n\t\txi.assign(bestDij);\n\t\treturn bestCons;\n\t}\n\n\t#flcVariables(X1, X2, X3, consX1, consX12, rc) {\n\t\tX2 = new Set(X2);  // Clone\n\t\tX3 = new Set(X3);  // Clone\n\n\t\twhile (true) {\n\t\t\tif (this._debug) {\n\t\t\t\tconsole.log(`X1 ${X1.size}, X2' ${X2.size}, X3' ${X3.size}`);\n\t\t\t}\n\t\t\tif (this._targetDeg !== null && this._targetDeg <= this._pro.worstSatisfactionDegree()) {  // Success if the degree improves from specified\n\t\t\t\tif (this._debug) console.log('stop: current degree is above the target');\n\t\t\t\tthis.#globalReturn = 1;\n\t\t\t\treturn consX12;\n\t\t\t}\n\t\t\tif (this._iterLimit && this._iterLimit < this.#iterCount++) {  // Failure if repeated a specified number\n\t\t\t\tif (this._debug) console.log('stop: number of iterations has reached the limit');\n\t\t\t\tthis.#globalReturn = 0;\n\t\t\t\treturn consX12;\n\t\t\t}\n\t\t\tif (this.#endTime < Date.now()) {  // Failure if time limit is exceeded\n\t\t\t\tif (this._debug) console.log('stop: time limit has been reached');\n\t\t\t\tthis.#globalReturn = 0;\n\t\t\t\treturn consX12;\n\t\t\t}\n\t\t\tif (X3.size === 0) {\n\t\t\t\treturn consX12;\n\t\t\t}\n\t\t\tconst xi        = X3.values().next().value;\n\t\t\tconst consX12xi = this.#flcVariable(X1, X2, xi, consX1, consX12, rc);\n\n\t\t\tif (this.#globalReturn !== -1) {\n\t\t\t\treturn consX12;\n\t\t\t}\n\t\t\tif (consX12xi < rc) {\n\t\t\t\treturn this.#lb;\n\t\t\t}\n\t\t\tX2.add(xi);\n\t\t\tX3.delete(xi);\n\t\t\tconsX12 = consX12xi;\n\t\t}\n\t}\n\n\t#initTest(X, cr) {\n\t\tconst cs = new Set();\n\t\tfor (const v of X) {\n\t\t\tfor (let i = 0; i < v.size(); ++i) {\n\t\t\t\tcs.add(v.at(i));  // All variables in X have been assigned.\n\t\t\t}\n\t\t}\n\t\tlet ret = 1;\n\t\tfor (const c of cs) {\n\t\t\tconst sd = c.satisfactionDegree();\n\t\t\tif (sd === Constraint.UNDEFINED) continue;\n\t\t\tif (sd < ret) ret = sd;\n\t\t}\n\t\tfor (const c of this._pro.constraints()) {\n\t\t\tconst cd = c.lowestConsistencyDegree();\n\t\t\tif (cd < this.#lt) cr.add(c);\n\t\t}\n\t\treturn ret;\n\t}\n\n\t#testX1(X1, xi, bestCons, rc) {\n\t\tlet cd = 1;\n\t\tconst cs = new Set();\n\n\t\tfor (const v of X1) {\n\t\t\tconst temp = this._pro.constraintsBetween(v, xi);\n\t\t\tfor (const c of temp) cs.add(c);\n\t\t}\n\t\tfor (const c of cs) {\n\t\t\tconst d = c.satisfactionDegree();\n\t\t\tif (d === Constraint.UNDEFINED) continue;\n\t\t\tif (d < cd) cd = d;\n\t\t\tif (cd <= bestCons || cd <= rc) return cd;  // If it is determined that a better solution than the current solution cannot be obtained\n\t\t}\n\t\treturn cd;\n\t}\n\n\t#testX12(X1, X2, xi, consX1xi, consX12, cr) {\n\t\tlet csd = 1;\n\t\tconst cs = new Set();\n\n\t\tfor (const v of X1) {\n\t\t\tconst temp = this._pro.constraintsBetween(v, xi);\n\t\t\tfor (const c of temp) cs.add(c);\n\t\t}\n\t\tfor (const v of X2) {\n\t\t\tconst temp = this._pro.constraintsBetween(v, xi);\n\t\t\tfor (const c of temp) cs.add(c);\n\t\t}\n\t\tfor (const c of cs) {\n\t\t\tconst sd = c.satisfactionDegree();\n\t\t\tif (sd === Constraint.UNDEFINED) continue;\n\t\t\tif (sd < csd) csd = sd;\n\t\t}\n\t\tfor (const c of cs) {\n\t\t\tconst sd = c.satisfactionDegree();\n\t\t\tif (sd === Constraint.UNDEFINED) continue;\n\t\t\tif (sd < consX1xi || sd < consX12) cr.add(c);\n\t\t}\n\t\treturn csd;\n\t}\n\n\texec() {\n\t\tthis.#endTime      = (this._timeLimit === null) ? Number.MAX_VALUE : (Date.now() + this._timeLimit);\n\t\tthis.#iterCount    = 0;\n\t\tthis.#globalReturn = -1;\n\n\t\tconst wsd = this._pro.worstSatisfactionDegree();\n\t\tif (this._pro.emptyVariableSize() === 0) {\n\t\t\tthis._pro.clearAllVariables();\n\t\t}\n\t\tconst X1 = new Set();\n\t\tconst X2 = new Set();  // Currently assigned variables.\n\t\tconst X3 = new Set();  // Currently unassigned variables.\n\t\tfor (const v of this._pro.variables()) {\n\t\t\t(!v.isEmpty() ? X2 : X3).add(v);\n\t\t}\n\n\t\tconst cr       = new Set();\n\t\tconst initCons = this.#initTest(X2, cr);\n\t\tlet rc;\n\t\tlet initSol = null;\n\n\t\tif (X3.size === 0) {\n\t\t\trc      = initCons;\n\t\t\tinitSol = AssignmentList.fromVariables(X2);\n\t\t} else {\n\t\t\trc = this.#lb;\n\t\t}\n\t\tconst X3p = FlexibleLocalChangesEx.#setPlusSet(this.#choose(X2, cr), X3);\n\t\tconst X2p = FlexibleLocalChangesEx.#setMinusSet(X2, X3p);\n\t\tlet result = this.#flcVariables(X1, X2p, X3p, this.#lt, this.#lt, rc);\n\t\tif (result < rc) {\n\t\t\tif (initSol !== null) {\n\t\t\t\tinitSol.apply();\n\t\t\t}\n\t\t}\n\t\tresult = this._pro.worstSatisfactionDegree();\n\t\treturn result > wsd && result > 0 && (this.#globalReturn !== 0 || this._targetDeg === null);\n\t}\n\n}\n\n/**\n * This class implements the SRS algorithm.\n *\n * @author Takuto Yanagida\n * @version 2023-04-10\n */\n\nclass SRS3 extends Solver {\n\n\t// Threshold for adopting a candidate assignment at repair time (should be 0 if strictly following SRS 3)\n\tstatic REPAIR_THRESHOLD = 0;\n\n\t#closedList          = new Set();\n\t#openList            = new Set();  // LinkedHashSet is used in the original implementation.\n\t#nodes               = [];\n\t#neighborConstraints = [];  // Cache\n\n\t#c_stars = new Set();  // ArrayList is used in the original implementation.\n\n\t#iterCount;\n\t#endTime;\n\t#isRandom = true;\n\n\tconstructor(p) {\n\t\tsuper(p);\n\t\tfor (const c of this._pro.constraints()) {\n\t\t\tthis.#nodes.push(new CrispSRS3.TreeNode(c));\n\t\t\tthis.#neighborConstraints.push(null);\n\t\t}\n\t}\n\n\tname() {\n\t\treturn 'SRS 3';\n\t}\n\n\tfoundSolution(solution, worstDegree) {\n\t\treturn false;\n\t}\n\n\t#getNeighborConstraints(c) {\n\t\tconst index = c.index();\n\n\t\tif (this.#neighborConstraints[index] === null) {\n\t\t\tthis.#neighborConstraints[index] = c.neighbors();\n\t\t}\n\t\treturn this.#neighborConstraints[index];\n\t}\n\n\t#repair(c0) {\n\t\tif (this._debug) console.log('repair');\n\n\t\tconst candidates = new AssignmentList();\n\t\tconst minDeg0    = c0.satisfactionDegree();  // Target c0 should certainly be an improvement over this.\n\t\tconst min        = this._pro.worstSatisfactionDegree();  // Lower bound of neighborhood constraints.\n\t\tlet maxDeg0 = c0.satisfactionDegree();  // Satisfaction degree of target c0 for the most improvement so far.\n\n\t\t// If a candidate satisfying the condition is stronger than the previous candidates,\n\t\t// it is replaced, and if no candidate is found until the end, it fails.\n\t\tfor (let i = 0; i < c0.size(); ++i) {\n\t\t\tconst v     = c0.at(i);\n\t\t\tconst v_val = v.value();  // Save the value\n\t\t\tconst v_c   = v.constraints();\n\n\t\t\tout: for (const d of v.domain()) {\n\t\t\t\tif (v_val === d) continue;\n\t\t\t\tv.assign(d);\n\t\t\t\tconst deg0 = c0.satisfactionDegree();\n\t\t\t\t// If target c0 cannot be improved, the assignment is rejected.\n\t\t\t\tif (minDeg0 > deg0 || maxDeg0 - deg0 > SRS3.REPAIR_THRESHOLD) continue;\n\n\t\t\t\tfor (const c of v_c) {\n\t\t\t\t\tif (c === c0) continue;\n\t\t\t\t\tconst deg = c.satisfactionDegree();\n\t\t\t\t\t// If one of the neighborhood constraints c is less than or equal to the worst, the assignment is rejected.\n\t\t\t\t\tif (deg !== Constraint.UNDEFINED && deg < min) continue out;\n\t\t\t\t}\n\t\t\t\tif (deg0 > maxDeg0) {\n\t\t\t\t\tmaxDeg0 = deg0;\n\t\t\t\t\tcandidates.clear();\n\t\t\t\t}\n\t\t\t\tcandidates.addVariable(v, d);\n\t\t\t}\n\t\t\tv.assign(v_val);  // Restore the value\n\t\t}\n\t\tif (candidates.size() > 0) {\n\t\t\tconst e = this.#isRandom ? candidates.arbitraryAssignment() : candidates.get(0);\n\t\t\tconsole.log(e);\n\t\t\te.apply();\n\t\t\tif (this._debug) console.log('\\t' + e);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t#shrink(node) {\n\t\tif (this._debug) console.log('shrink');\n\n\t\tlet removeCStar = false;\n\t\twhile (true) {\n\t\t\tnode = node.parent();\n\t\t\tif (this.#c_stars.delete(node)) {\n\t\t\t\tremoveCStar = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (!this.#repair(node.parent().getObject())) break;\n\t\t}\n\t\tconst temp = [];\n\t\tnode.getDescendants(temp);  // temp contains node.\n\n\t\tfor (const n of temp) {\n\t\t\tn.clear();  // Prepare for reuse\n\t\t\tthis.#openList.delete(n);\n\t\t\tthis.#closedList.delete(n);\n\t\t}\n\n\t\tif (!removeCStar) {\n\t\t\tthis.#openList.add(node);\n\t\t}\n\t}\n\n\t#spread(node) {\n\t\tif (this._debug) console.log('spread');\n\t\tthis.#closedList.add(node);\n\n\t\tfor (const c of this.#getNeighborConstraints(node.getObject())) {\n\t\t\tconst cn = this.#nodes[c.index()];\n\n\t\t\tif (!this.#closedList.has(cn) && !this.#openList.has(cn)) {  // For constraints that are not included in Open or Closed.\n\t\t\t\tnode.add(cn);\n\t\t\t\tthis.#openList.add(cn);\n\t\t\t}\n\t\t}\n\t}\n\n\t#srs() {\n\t\tif (this._debug) console.log('srs');\n\n\t\tconst [wsdcs,] = this._pro.constraintsWithWorstSatisfactionDegree();\n\t\tfor (const c of wsdcs) {\n\t\t\tconst cn = this.#nodes[c.index()];\n\t\t\tcn.setParent(null);\n\t\t\tthis.#c_stars.add(cn);\n\t\t}\n\t\tthis.#closedList.clear();\n\t\tthis.#openList.clear();\n\t\tfor (const n of this.#c_stars) {\n\t\t\tthis.#openList.add(n);\n\t\t}\n\n\t\twhile (this.#c_stars.size && this.#openList.size) {\n\t\t\tif (this._iterLimit && this._iterLimit < iterCount++) {  // Failure if repeated a specified number\n\t\t\t\tif (this._debug) console.log('stop: number of iterations has reached the limit');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (this.#endTime < Date.now()) {  // Failure if time limit is exceeded\n\t\t\t\tif (this._debug) console.log('stop: time limit has been reached');\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst node = this.#openList.values().next().value;\n\t\t\tthis.#openList.delete(node);\n\n\t\t\tif (this.#repair(node.getObject())) {\n\t\t\t\tif (this.#c_stars.delete(node)) continue;  // If the repaired node is included in C* (to be deleted)\n\t\t\t\tif (this.#repair(node.parent().getObject())) {\n\t\t\t\t\tthis.#shrink(node);  // When its improvement leads to the improvement of its parents\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.#spread(node);\n\t\t}\n\t\treturn true;\n\t}\n\n\texec() {\n\t\tthis.#endTime   = (this._timeLimit === null) ? Number.MAX_VALUE : (Date.now() + this._timeLimit);\n\t\tthis.#iterCount = 0;\n\t\tif (this._targetDeg && this._targetDeg <= this._pro.worstSatisfactionDegree()) {\n\t\t\treturn true;\n\t\t}\n\t\tconst sol = new AssignmentList();\n\n\t\tlet success = false;\n\t\twhile (true) {\n\t\t\tconst ret = this.#srs();\n\t\t\tif (!ret || this.#c_stars.size) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tconst solutionWorstDeg = this._pro.worstSatisfactionDegree();\n\t\t\tif (this._debug) {\n\t\t\t\tconsole.log(`\\tfound a solution: ${solutionWorstDeg}\\t${this._targetDeg}`);\n\t\t\t}\n\t\t\tsol.setProblem(this._pro);\n\n\t\t\tif (this.foundSolution(sol, solutionWorstDeg)) {  // Call hook\n\t\t\t\tsuccess = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (this._targetDeg === null) {  // Satisfaction degree is not specified\n\t\t\t\tsuccess = true;\n\t\t\t} else if (this._targetDeg <= solutionWorstDeg) {  // The current degree exceeded the specified degree.\n\t\t\t\tif (this._debug) console.log('stop: current degree is above the target');\n\t\t\t\tsuccess = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn success;\n\t}\n\n\t/**\n\t * Sets the randomness of the algorithm.\n\t * Enabling randomness reduces the risk of falling into a local solution, but makes the solution unrepeatable.\n\t * @param flag If true, randomness is enabled.\n\t */\n\tsetRandomness(flag) {\n\t\tthis.#isRandom = flag;\n\t}\n\n}\n\n{\n\n\tclass TreeNode {\n\n\t\t#children = [];\n\t\t#parent;\n\t\t#obj;\n\n\t\tconstructor(obj) {\n\t\t\tthis.#obj = obj;\n\t\t}\n\n\t\tadd(tn) {\n\t\t\ttn.#parent = this;\n\t\t\tthis.#children.push(tn);\n\t\t}\n\n\t\tclear() {\n\t\t\tfor (const tn of this.#children) {\n\t\t\t\ttn.#parent = null;\n\t\t\t}\n\t\t\tthis.#children.length = 0;\n\t\t}\n\n\t\tgetDescendants(tns) {\n\t\t\ttns.push(this);\n\n\t\t\tfor (const tn of this.#children) {\n\t\t\t\ttn.getDescendants(tns);\n\t\t\t}\n\t\t}\n\n\t\tgetObject() {\n\t\t\treturn this.#obj;\n\t\t}\n\n\t\tparent() {\n\t\t\treturn this.#parent;\n\t\t}\n\n\t\tsetParent(p) {\n\t\t\tthis.#parent = p;\n\t\t}\n\n\t}\n\tCrispSRS3.TreeNode = TreeNode;\n\n}\n\n/**\n * This class implements the SRS algorithm with PF.\n *\n * @author Takuto Yanagida\n * @version 2023-03-31\n */\n\nclass SRS3_PF extends SRS3 {\n\n\tconstructor(p) {\n\t\tsuper(p);\n\t}\n\n\tname() {\n\t\treturn 'SRS 3 + PF';\n\t}\n\n\texec() {\n\t\tlet deg = 0;\n\t\tlet uvs = 0;\n\t\tif (this._debug) {\n\t\t\tdeg = this._pro.worstSatisfactionDegree();\n\t\t\tuvs = this._pro.emptyVariableSize();\n\t\t}\n\t\tconst at = new AssignmentList();\n\t\tat.setProblem(this._pro);\n\n\t\tconst res = super.exec();\n\n\t\tif (res) {\n\t\t\tPostStabilization.apply(this._pro, at);\n\t\t}\n\t\tif (this._debug) {\n\t\t\tconsole.log(`result: ${res ? 'success' : 'failure'}`);\n\t\t\tconsole.log(`satisfaction degree: ${deg} -> ${this._pro.worstSatisfactionDegree()}`);\n\t\t\tconsole.log(`uUnassigned size: ${uvs} -> ${this._pro.emptyVariableSize()}`);\n\t\t}\n\t\treturn res;\n\t}\n\n}\n\n\n/**\n * The class implements AC-3, one of the arc consistency algorithms.\n *\n * @author Takuto Yanagida\n * @version 2023-04-10\n */\n\nclass AC3 {\n\n\tstatic #checkConsistency(c, v_j) {\n\t\tfor (const val of v_j.domain()) {  // Is there a partner that satisfies the constraint?\n\t\t\tv_j.assign(val);\n\n\t\t\tif (c.isSatisfied() === 1) {  // It exists!\n\t\t\t\treturn true;  // Current assignment of v_i is consistent.\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tstatic #reviseDomain(p, v_i, v_j) {\n\t\tconst val_i = v_i.value();\n\t\tconst val_j = v_j.value();  // Save the value.\n\t\tconst d_i   = v_i.domain();\n\t\tconst temp  = [];\n\n\t\tconst cs = p.constraintsBetween(v_i, v_j);\n\n\t\tvals: for (const val of d_i) {\n\t\t\tv_i.assign(val);\n\n\t\t\tfor (const c of cs) {\n\t\t\t\tif (c.size() !== 2) continue;  // Check the next constraint\n\t\t\t\tif (!AC3.#checkConsistency(c, v_j)) continue vals;   // Since there is no partner satisfying the constraint, check the next value.\n\t\t\t}\n\t\t\ttemp.push(val);\n\t\t}\n\t\tv_i.assign(val_i);  // Restore the value.\n\t\tv_j.assign(val_j);  // Restore the value.\n\n\t\tif (temp.length !== d_i.size()) {\n\t\t\tconst nd = p.createDomain({ values: temp });\n\t\t\tv_i.setDomain(nd);\n\t\t\tconsole.log(d_i.size() + ' -> ' + nd.size());\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tstatic apply(p) {\n\t\tconst cs = [];\n\n\t\tfor (const c of p.constraints()) {\n\t\t\tif (c.size() === 2) cs.add(c);\n\t\t}\n\t\twhile (!cs.isEmpty()) {\n\t\t\tconst c   = cs.remove(cs.size() - 1);\n\t\t\tconst v_k = c.at(0);\n\t\t\tconst v_m = c.at(1);\n\n\t\t\tif (AC3.#reviseDomain(p, v_k, v_m)) {\n\t\t\t\tfor (const c1 of p.constraints()) {\n\t\t\t\t\tif (c1.size() === 2 && c1.at(1) === v_k && c1.at(0) !== v_m) {\n\t\t\t\t\t\tcs.add(0, c1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n}\n\n/**\n * Utility class that performs node consistency.\n *\n * @author Takuto Yanagida\n * @version 2023-04-10\n */\n\nclass NodeConsistency {\n\n\t/**\n\t * Guarantees consistency of fuzzy unary constraints. The domain of each variable is replaced as needed.\n\t * Deletes elements from domains that do not meet the specified worst satisfaction degree.\n\t * @param p A problem.\n\t * @param threshold Worst satisfaction degree.\n\t * @return True if there is no empty domain.\n\t */\n\tstatic apply(p, threshold) {\n\t\tfor (const v of p.variables()) {\n\t\t\tconst d       = v.domain();\n\t\t\tconst origVal = v.value();  // Save the value.\n\t\t\tconst elms    = [];\n\n\t\t\tfor (let i = 0; i < v.size(); ++i) {\n\t\t\t\tconst c = v.at(i);\n\t\t\t\tif (c.size() !== 1) continue;\n\n\t\t\t\tfor (const val of d) {\n\t\t\t\t\tv.assign(val);\n\n\t\t\t\t\tif (c.satisfactionDegree() >= threshold) {\n\t\t\t\t\t\telms.push(val);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tp.removeConstraint(c);\n\t\t\t}\n\t\t\tv.assign(origVal);  // Restore the value.\n\t\t\tif (elms.length === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tv.setDomain(p.createDomain({ values: elms }));\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Guarantees consistency of crisp unary constraints. The domain of each variable is replaced as needed.\n\t * It cannot be applied to crisp views of fuzzy constraint satisfaction problems because it changes the structure of the constraint graph.\n\t * @param p A crisp problem.\n\t * @return True if there is no empty domain.\n\t */\n\tstatic apply(p) {\n\t\tfor (const v of p.variables()) {\n\t\t\tconst d       = v.domain();\n\t\t\tconst origVal = v.value();  // Save the value.\n\t\t\tconst elms    = [];\n\n\t\t\tfor (let i = 0; i < v.size(); ++i) {\n\t\t\t\tconst c = v.at(i);\n\t\t\t\tif (c.size() !== 1) continue;\n\n\t\t\t\tfor (const val of d) {\n\t\t\t\t\tv.assign(val);\n\n\t\t\t\t\tif (c.isSatisfied() === 1) {\n\t\t\t\t\t\telms.push(val);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tp.removeConstraint(c);\n\t\t\t}\n\t\t\tv.assign(origVal);  // Restore the value.\n\t\t\tif (elms.length === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tv.setDomain(p.createDomain({ values: elms }));\n\t\t}\n\t\treturn true;\n\t}\n\n}\n\n/**\n * Class of post-stabilization.\n *\n * @author Takuto Yanagida\n * @version 2023-03-26\n */\n\nclass PostStabilization {\n\n\tstatic apply(p, orig) {\n\t\tconsole.log('start post-stabilization');\n\n\t\tlet stabilized;\n\t\tlet count = 0;\n\n\t\tdo {\n\t\t\tconsole.log('post-stabilization: count ' + count++);\n\n\t\t\tstabilized = false;\n\t\t\tlet C_min = p.worstSatisfactionDegree();\n\n\t\t\tfor (let i = 0; i < p.variableSize(); ++i) {\n\t\t\t\tconst v = p.variableAt(i);\n\t\t\t\tconst org = v.value();\n\n\t\t\t\tconst a = orig.get(i);\n\t\t\t\tif (org === a.value()) continue;\n\n\t\t\t\ta.apply();  // Try to assign the original.\n\t\t\t\tif (p.worstSatisfactionDegree() >= C_min) {\n\t\t\t\t\tstabilized = true;\n\t\t\t\t} else {\n\t\t\t\t\tv.assign(org);  // Restore.\n\t\t\t\t}\n\t\t\t}\n\t\t} while (stabilized);\n\n\t\tconsole.log('finish post-stabilization');\n\t\treturn true;\n\t}\n\n}\n\n"]}