{"version":3,"sources":["problem.js"],"names":["Element","index","name","userObject","solverObject","setIndex","this","setName","Relation","CrispRelation","isSatisfied","vals","Exception","asFuzzyRelation","FuzzyRelationView","CrispTabledRelation","elms","doms","mul","constructor","Array","length","m","i","size","indexOf","CrispRelationFunction","fn","super","FuzzyRelation","satisfactionDegree","asCrispRelation","CrispRelationView","FuzzyTabledRelation","FuzzyRelationFunction","that","Constraint","static","rel","r","crispRelation","fuzzyRelation","isFuzzy","toString","s","UNDEFINED","at","constrains","v","emptyVariableSize","isDefined","neighbors","highestConsistencyDegree","lowestConsistencyDegree","Constraint1","IndexOutOfBoundsException","isEmpty","value","cs","n","c","push","sd","cd","val","domain","Constraint2","v1","v2","sum","val1","val2","d1","d2","Constraint3","v3","val3","d3","ConstraintN","vars","vs","includes","I","emptyIndices","checkHCD","checkLCD","currentStep","d","Domain","contains","Symbol","iterator","random","Math","floor","DomainArbitrary","DomainRanged","min","max","next","done","Variable","Number","MIN_VALUE","owner","cons","dom","INVALID","connect","isConstrainedBy","IllegalArgumentException","disconnect","filter","assign","clear","setDomain","constraints","j","Problem","_isFuzzy","_vars","_cons","addVariable","createDomain","args","values","createVariable","Error","createConstraint","variables","relation","removeConstraint","remove","clearAllVariables","reverseVariables","reverse","sortVariables","comparator","sort","variableSize","variableAt","variableOf","hasVariable","constraintSize","constraintAt","constraintOf","hasConstraint","constraintsBetween","constraintsWithWorstSatisfactionDegree","cur","worstSatisfactionDegree","averageSatisfactionDegree","ave","num","constraintDensity","hasEmptyDomain","CrispProblem","satisfiedConstraintRate","satisfiedConstraintSize","count","violatingConstraints","violatingConstraintSize"],"mappings":"AAOA,MAAMA,QAELC,IAAU,EACVC,GAAS,GAKTC,WAAa,KAKbC,aAAe,KAGfC,SAASJ,GACRK,MAAKL,EAASA,CACf,CAOAM,QAAQL,GACPI,MAAKJ,EAAQA,CACd,CAQAD,QACC,OAAOK,MAAKL,CACb,CAOAC,OACC,OAAOI,MAAKJ,CACb,EAaD,MAAMM,UAWN,MAAMC,sBAAsBD,SAO3BE,eAAeC,GACd,MAAM,IAAIC,SACX,CAMAC,kBACC,OAAO,IAAIC,kBAAkBR,KAC9B,EAWD,MAAMS,4BAA4BN,cAEjCO,GACAC,GACAC,GAEAC,YAAYH,EAAMC,GACjBX,MAAKU,EAAQ,IAAIA,GACjBV,MAAKW,EAAQ,IAAIA,GACjBX,MAAKY,EAAQ,IAAIE,MAAMH,EAAKI,QAE5B,IAAIC,EAAI,EACR,IAAK,IAAIC,EAAIjB,MAAKY,EAAKG,OAAS,EAAGE,GAAK,IAAKA,EAC5CjB,MAAKY,EAAKK,GAAKD,EACfA,GAAKL,EAAKM,GAAGC,MAEf,CAOAd,eAAeC,GACd,GAAIL,MAAKY,EAAKG,SAAWV,EAAKU,OAC7B,MAAM,IAAIT,UAEX,IAAIX,EAAQ,EACZ,IAAK,IAAIsB,EAAI,EAAGA,EAAIjB,MAAKY,EAAKG,SAAUE,EACvCtB,GAASK,MAAKY,EAAKK,GAAKjB,MAAKW,EAAMM,GAAGE,QAAQd,EAAKY,IAEpD,OAAOjB,MAAKU,EAAMf,EACnB,EAWD,MAAMyB,8BAA8BjB,cAEnCkB,GAEAR,YAAYQ,GACXC,QACAtB,MAAKqB,EAAMA,CACZ,CAOAjB,eAAeC,GACd,OAAOL,MAAKqB,KAAOhB,EACpB,EAWD,MAAMkB,sBAAsBrB,SAO3BsB,sBAAsBnB,GACrB,MAAM,IAAIC,SACX,CAMAmB,kBACC,OAAO,IAAIC,kBAAkB1B,KAC9B,EAWD,MAAM2B,4BAA4BJ,cAEjCb,GACAC,GACAC,GAEAC,YAAYH,EAAMC,GACjBX,MAAKU,EAAQ,IAAIA,GACjBV,MAAKW,EAAQ,IAAIA,GACjBX,MAAKY,EAAQ,IAAIE,MAAMH,EAAKI,QAE5B,IAAIC,EAAI,EACR,IAAK,IAAIC,EAAIjB,MAAKY,EAAKG,OAAS,EAAGE,GAAK,IAAKA,EAC5CjB,MAAKY,EAAKK,GAAKD,EACfA,GAAKL,EAAKM,GAAGC,MAEf,CAOAM,sBAAsBnB,GACrB,GAAIL,MAAKY,EAAKG,SAAWV,EAAKU,OAC7B,MAAM,IAAIT,UAEX,IAAIX,EAAQ,EACZ,IAAK,IAAIsB,EAAI,EAAGA,EAAIjB,MAAKY,EAAKG,SAAUE,EACvCtB,GAASK,MAAKY,EAAKK,GAAKjB,MAAKW,EAAMM,GAAGE,QAAQd,EAAKY,IAEpD,OAAOjB,MAAKU,EAAMf,EACnB,EAWD,MAAMiC,8BAA8BL,cAEnCF,GAEAR,YAAYQ,GACXC,QACAtB,MAAKqB,EAAMA,CACZ,CAOAG,sBAAsBnB,GACrB,OAAOL,MAAKqB,KAAOhB,EACpB,EAWD,MAAMqB,0BAA0BvB,cAE/BU,YAAYgB,GACX7B,KAAK6B,KAAOA,CACb,CAEAzB,eAAeC,GACd,OAA8C,IAAvCL,KAAK6B,KAAKL,mBAAmBnB,EACrC,EAID,MAAMG,0BAA0Be,cAE/BV,YAAYgB,GACX7B,KAAK6B,KAAOA,CACb,CAEAL,sBAAsBnB,GACrB,OAAOL,KAAK6B,KAAKzB,YAAYC,GAAQ,EAAI,CAC1C,EAYD,MAAMyB,mBAAmBpC,QAKxBqC,kBAAoB,EAEpBC,IAGAnB,YAAYoB,GACXX,QACAtB,KAAKgC,IAAMC,CACZ,CAMAC,gBACC,OAAOlC,KAAKgC,GACb,CAMAG,gBACC,OAAOnC,KAAKgC,GACb,CAMAI,UACC,OAAOpC,KAAKgC,eAAeT,aAC5B,CAMAc,WACC,MAAMC,EAAItC,KAAKwB,qBACf,MAAQ,IAAGxB,KAAKL,UAA0B,KAAhBK,KAAKJ,OAAgB,GAAM,IAAGI,KAAKJ,eAAe0C,IAAMR,WAAWS,UAAY,YAAcD,GACxH,CAMApB,OAAQ,CAORsB,GAAG7C,GAAQ,CAOX8C,WAAWC,GAAI,CAQfvB,QAAQuB,GAAI,CAMZC,oBAAqB,CAOrBC,YAAa,CAMbxC,cAAe,CAMfoB,qBAAsB,CAMtBqB,YAAa,CAQbC,2BAA4B,CAQ5BC,0BAA2B,EAY5B,MAAMC,oBAAoBlB,WAEzBY,GAGA7B,YAAYoB,EAAGS,GACdpB,MAAMW,GACNjC,MAAK0C,EAAKA,CACX,CAKAxB,OACC,OAAO,CACR,CAKAsB,GAAG7C,GACF,GAAc,IAAVA,EAAa,OAAOK,MAAK0C,EAC7B,MAAM,IAAIO,yBACX,CAKAR,WAAWC,GACV,OAAOA,IAAM1C,MAAK0C,CACnB,CAKAvB,QAAQuB,GACP,OAAQA,IAAM1C,MAAK0C,EAAM,GAAK,CAC/B,CAKAC,oBACC,OAAO3C,MAAK0C,EAAGQ,UAAY,EAAI,CAChC,CAKAN,YACC,OAAQ5C,MAAK0C,EAAGQ,SACjB,CAKA9C,cACC,OAAIJ,MAAK0C,EAAGQ,UAAkBpB,WAAWS,UAClCvC,KAAKkC,gBAAgB9B,YAAYJ,MAAK0C,EAAGS,SAAW,EAAI,CAChE,CAKA3B,qBACC,OAAIxB,MAAK0C,EAAGQ,UAAkBpB,WAAWS,UAClCvC,KAAKmC,gBAAgBX,mBAAmBxB,MAAK0C,EAAGS,QACxD,CAKAN,YACC,MAAMO,EAAK,GACX,IAAK,IAAInC,EAAI,EAAGoC,EAAIrD,MAAK0C,EAAGxB,OAAQD,EAAIoC,IAAKpC,EAAG,CAC/C,MAAMqC,EAAItD,MAAK0C,EAAGF,GAAGvB,GACjBqC,IAAMtD,MAAMoD,EAAGG,KAAKD,EACzB,CACA,OAAOF,CACR,CAKAN,2BACC,MAAMU,EAAKxD,KAAKwB,qBAChB,GAAIgC,IAAO1B,WAAWS,UACrB,OAAOiB,EAER,IAAIC,EAAK,EAET,IAAK,MAAMC,KAAO1D,MAAK0C,EAAGiB,SAAU,CACnC,MAAMrB,EAAItC,KAAKmC,gBAAgBX,mBAAmBkC,GAElD,GADIpB,EAAImB,IAAIA,EAAKnB,GACN,IAAPmB,EAAU,KACf,CACA,OAAOA,CACR,CAKAV,0BACC,MAAMS,EAAKxD,KAAKwB,qBAChB,GAAIgC,IAAO1B,WAAWS,UACrB,OAAOiB,EAER,IAAIC,EAAK,EAET,IAAK,MAAMC,KAAO1D,MAAK0C,EAAGiB,SAAU,CACnC,MAAMrB,EAAItC,KAAKmC,gBAAgBX,mBAAmBkC,GAElD,GADIpB,EAAImB,IAAIA,EAAKnB,GACN,IAAPmB,EAAU,KACf,CACA,OAAOA,CACR,EAYD,MAAMG,oBAAoB9B,WAEzB+B,GACAC,GAGAjD,YAAYoB,EAAG4B,EAAIC,GAClBxC,MAAMW,GACNjC,MAAK6D,EAAMA,EACX7D,MAAK8D,EAAMA,CACZ,CAKA5C,OACC,OAAO,CACR,CAKAsB,GAAG7C,GACF,GAAc,IAAVA,EAAa,OAAOK,MAAK6D,EAC7B,GAAc,IAAVlE,EAAa,OAAOK,MAAK8D,EAC7B,MAAM,IAAIb,yBACX,CAKAR,WAAWC,GACV,OAAO1C,MAAK6D,IAAQnB,GAAK1C,MAAK8D,IAAQpB,CACvC,CAKAvB,QAAQuB,GACP,OAAIA,IAAM1C,MAAK6D,EAAY,EACvBnB,IAAM1C,MAAK8D,EAAY,GACnB,CACT,CAKAnB,oBACC,IAAIoB,EAAM,EAGV,OAFI/D,MAAK6D,EAAIX,aAAaa,EACtB/D,MAAK8D,EAAIZ,aAAaa,EACnBA,CACR,CAKAnB,YACC,OAAQ5C,MAAK6D,EAAIX,YAAclD,MAAK8D,EAAIZ,SACzC,CAKA9C,cACC,OAAIJ,MAAK6D,EAAIX,WAAalD,MAAK8D,EAAIZ,UAAkBpB,WAAWS,UACzDvC,KAAKkC,gBAAgB9B,YAAYJ,MAAK6D,EAAIV,QAASnD,MAAK8D,EAAIX,SAAW,EAAI,CACnF,CAKA3B,qBACC,OAAIxB,MAAK6D,EAAIX,WAAalD,MAAK8D,EAAIZ,UAAkBpB,WAAWS,UACzDvC,KAAKmC,gBAAgBX,mBAAmBxB,MAAK6D,EAAIV,QAASnD,MAAK8D,EAAIX,QAC3E,CAKAN,YACC,MAAMO,EAAK,GACX,IAAK,IAAInC,EAAI,EAAGoC,EAAIrD,MAAK6D,EAAI3C,OAAQD,EAAIoC,IAAKpC,EAAG,CAChD,MAAMqC,EAAItD,MAAK6D,EAAIrB,GAAGvB,GAClBqC,IAAMtD,MAAMoD,EAAGG,KAAKD,EACzB,CACA,IAAK,IAAIrC,EAAI,EAAGoC,EAAIrD,MAAK8D,EAAI5C,OAAQD,EAAIoC,IAAKpC,EAAG,CAChD,MAAMqC,EAAItD,MAAK8D,EAAItB,GAAGvB,GAClBqC,IAAMtD,MAAMoD,EAAGG,KAAKD,EACzB,CACA,OAAOF,CACR,CAKAN,2BACC,MAAMU,EAAKxD,KAAKwB,qBAChB,GAAIgC,IAAO1B,WAAWS,UACrB,OAAOiB,EAER,IAAIC,EAAK,EACT,MAAMO,EAAOhE,MAAK6D,EAAIV,QAChBc,EAAOjE,MAAK8D,EAAIX,QAChBe,EAAOlE,MAAK6D,EAAIF,SAChBQ,EAAOnE,MAAK8D,EAAIH,SAEtB,GAAG3D,MAAK6D,EAAIX,YAAclD,MAAK8D,EAAIZ,UAClC,IAAK,MAAMc,KAAQE,EAAI,CACtB,MAAM5B,EAAItC,KAAKmC,gBAAgBX,mBAAmBwC,EAAMC,GAExD,GADI3B,EAAImB,IAAIA,EAAKnB,GACN,IAAPmB,EAAU,KACf,MACM,IAAKzD,MAAK6D,EAAIX,WAAalD,MAAK8D,EAAIZ,UAC1C,IAAK,MAAMe,KAAQE,EAAI,CACtB,MAAM7B,EAAItC,KAAKmC,gBAAgBX,mBAAmBwC,EAAMC,GAExD,GADI3B,EAAImB,IAAIA,EAAKnB,GACN,IAAPmB,EAAU,KACf,MAEA,IAAK,MAAMO,KAAQE,EAClB,IAAK,MAAMD,KAAQE,EAAI,CACtB,MAAM7B,EAAItC,KAAKmC,gBAAgBX,mBAAmBwC,EAAMC,GAExD,GADI3B,EAAImB,IAAIA,EAAKnB,GACN,IAAPmB,EAAU,KACf,CAGF,OAAOA,CACR,CAKAV,0BACC,MAAMS,EAAKxD,KAAKwB,qBAChB,GAAGgC,IAAO1B,WAAWS,UACpB,OAAOiB,EAER,IAAIC,EAAK,EACT,MAAMO,EAAOhE,MAAK6D,EAAIV,QAChBc,EAAOjE,MAAK8D,EAAIX,QAChBe,EAAOlE,MAAK6D,EAAIF,SAChBQ,EAAOnE,MAAK8D,EAAIH,SAEtB,GAAI3D,MAAK6D,EAAIX,YAAclD,MAAK8D,EAAIZ,UACnC,IAAK,MAAMc,KAAQE,EAAI,CACtB,MAAM5B,EAAItC,KAAKmC,gBAAgBX,mBAAmBwC,EAAMC,GAExD,GADI3B,EAAImB,IAAIA,EAAKnB,GACN,IAAPmB,EAAU,KACf,MACM,IAAKzD,MAAK6D,EAAIX,WAAalD,MAAK8D,EAAIZ,UAC1C,IAAK,MAAMe,KAAQE,EAAI,CACtB,MAAM7B,EAAItC,KAAKmC,gBAAgBX,mBAAmBwC,EAAMC,GAExD,GADI3B,EAAImB,IAAIA,EAAKnB,GACN,IAAPmB,EAAU,KACf,MAEA,IAAK,MAAMO,KAAQE,EAClB,IAAK,MAAMD,KAAQE,EAAI,CACtB,MAAM7B,EAAItC,KAAKmC,gBAAgBX,mBAAmBwC,EAAMC,GAExD,GADI3B,EAAImB,IAAIA,EAAKnB,GACN,IAAPmB,EAAU,KACf,CAGF,OAAOA,CACR,EAYD,MAAMW,oBAAoBtC,WAEzB+B,GACAC,GACAO,GAGAxD,YAAYoB,EAAG4B,EAAIC,EAAIO,GACtB/C,MAAMW,GACNjC,MAAK6D,EAAMA,EACX7D,MAAK8D,EAAMA,EACX9D,MAAKqE,EAAMA,CACZ,CAKAnD,OACC,OAAO,CACR,CAKAsB,GAAG7C,GACF,GAAc,IAAVA,EAAa,OAAOK,MAAK6D,EAC7B,GAAc,IAAVlE,EAAa,OAAOK,MAAK8D,EAC7B,GAAc,IAAVnE,EAAa,OAAOK,MAAKqE,EAC7B,MAAM,IAAIpB,yBACX,CAKAR,WAAWC,GACV,OAAO1C,MAAK6D,IAAQnB,GAAK1C,MAAK8D,IAAQpB,GAAK1C,MAAKqE,IAAQ3B,CACzD,CAKAvB,QAAQuB,GACP,OAAIA,IAAM1C,MAAK6D,EAAY,EACvBnB,IAAM1C,MAAK8D,EAAY,EACvBpB,IAAM1C,MAAKqE,EAAY,GACnB,CACT,CAKA1B,oBACC,IAAIoB,EAAM,EAIV,OAHI/D,MAAK6D,EAAIX,aAAaa,EACtB/D,MAAK8D,EAAIZ,aAAaa,EACtB/D,MAAKqE,EAAInB,aAAaa,EACnBA,CACR,CAKAnB,YACC,OAAQ5C,MAAK6D,EAAIX,YAAclD,MAAK8D,EAAIZ,YAAclD,MAAKqE,EAAInB,SAChE,CAKA9C,cACC,OAAIJ,MAAK6D,EAAIX,WAAalD,MAAK8D,EAAIZ,WAAalD,MAAKqE,EAAInB,WAAmB,EACrElD,KAAKkC,gBAAgB9B,YAAYJ,MAAK6D,EAAIV,QAASnD,MAAK8D,EAAIX,QAASnD,MAAKqE,EAAIlB,SAAW,EAAI,CACrG,CAKA3B,qBACC,OAAIxB,MAAK6D,EAAIX,WAAalD,MAAK8D,EAAIZ,WAAalD,MAAKqE,EAAInB,UAAkBpB,WAAWS,UAC/EvC,KAAKmC,gBAAgBX,mBAAmBxB,MAAK6D,EAAIV,QAASnD,MAAK8D,EAAIX,QAASnD,MAAKqE,EAAIlB,QAC7F,CAKAN,YACC,MAAMO,EAAK,GACX,IAAK,IAAInC,EAAI,EAAGoC,EAAIrD,MAAK6D,EAAI3C,OAAQD,EAAIoC,IAAKpC,EAAG,CAChD,MAAMqC,EAAItD,MAAK6D,EAAIrB,GAAGvB,GAClBqC,IAAMtD,MAAMoD,EAAGG,KAAKD,EACzB,CACA,IAAK,IAAIrC,EAAI,EAAGoC,EAAIrD,MAAK8D,EAAI5C,OAAQD,EAAIoC,IAAKpC,EAAG,CAChD,MAAMqC,EAAItD,MAAK8D,EAAItB,GAAGvB,GAClBqC,IAAMtD,MAAMoD,EAAGG,KAAKD,EACzB,CACA,IAAK,IAAIrC,EAAI,EAAGoC,EAAIrD,MAAKqE,EAAInD,OAAQD,EAAIoC,IAAKpC,EAAG,CAChD,MAAMqC,EAAItD,MAAKqE,EAAI7B,GAAGvB,GAClBqC,IAAMtD,MAAMoD,EAAGG,KAAKD,EACzB,CACA,OAAOF,CACR,CAKAN,2BACC,MAAMU,EAAKxD,KAAKwB,qBAChB,GAAIgC,IAAO1B,WAAWS,UACrB,OAAOiB,EAER,IAAIC,EAAK,EACT,MAAMO,EAAOhE,MAAK6D,EAAIV,QAChBc,EAAOjE,MAAK8D,EAAIX,QAChBmB,EAAOtE,MAAKqE,EAAIlB,QAChBe,EAAOlE,MAAK6D,EAAIF,SAChBQ,EAAOnE,MAAK8D,EAAIH,SAChBY,EAAOvE,MAAKqE,EAAIV,SAEtB,IAAI3D,MAAK6D,EAAIX,WAAclD,MAAK8D,EAAIZ,WAAclD,MAAKqE,EAAInB,UAMpD,GAAKlD,MAAK6D,EAAIX,YAAalD,MAAK8D,EAAIZ,WAAclD,MAAKqE,EAAInB,UAM3D,GAAKlD,MAAK6D,EAAIX,WAAclD,MAAK8D,EAAIZ,YAAalD,MAAKqE,EAAInB,UAO3D,GAAIlD,MAAK6D,EAAIX,WAAalD,MAAK8D,EAAIZ,YAAclD,MAAKqE,EAAInB,UAChE,IAAK,MAAMc,KAAQE,EAClB,IAAK,MAAMD,KAAQE,EAAI,CACtB,MAAM7B,EAAItC,KAAKmC,gBAAgBX,mBAAmBwC,EAAMC,EAAMK,GAE9D,GADIhC,EAAImB,IAAIA,EAAKnB,GACN,IAAPmB,EAAU,KACf,MAEK,GAAIzD,MAAK6D,EAAIX,YAAclD,MAAK8D,EAAIZ,WAAalD,MAAKqE,EAAInB,UAChE,IAAK,MAAMc,KAAQE,EAClB,IAAK,MAAMI,KAAQC,EAAI,CACtB,MAAMjC,EAAItC,KAAKmC,gBAAgBX,mBAAmBwC,EAAMC,EAAMK,GAE9D,GADIhC,EAAImB,IAAIA,EAAKnB,GACN,IAAPmB,EAAU,KACf,MAEK,IAAKzD,MAAK6D,EAAIX,WAAalD,MAAK8D,EAAIZ,WAAalD,MAAKqE,EAAInB,UAChE,IAAK,MAAMe,KAAQE,EAClB,IAAK,MAAMG,KAAQC,EAAI,CACtB,MAAMjC,EAAItC,KAAKmC,gBAAgBX,mBAAmBwC,EAAMC,EAAMK,GAE9D,GADIhC,EAAImB,IAAIA,EAAKnB,GACN,IAAPmB,EAAU,KACf,MAGD,IAAK,MAAMO,KAAQE,EAClB,IAAK,MAAMD,KAAQE,EAClB,IAAK,MAAMG,KAAQC,EAAI,CACtB,MAAMjC,EAAItC,KAAKmC,gBAAgBX,mBAAmBwC,EAAMC,EAAMK,GAE9D,GADIhC,EAAImB,IAAIA,EAAKnB,GACN,IAAPmB,EAAU,KACf,MArCF,IAAK,MAAMa,KAAQC,EAAI,CACtB,MAAMjC,EAAItC,KAAKmC,gBAAgBX,mBAAmBwC,EAAMC,EAAMK,GAE9D,GADIhC,EAAImB,IAAIA,EAAKnB,GACN,IAAPmB,EAAU,KACf,MAVA,IAAK,MAAMQ,KAAQE,EAAI,CACtB,MAAM7B,EAAItC,KAAKmC,gBAAgBX,mBAAmBwC,EAAMC,EAAMK,GAE9D,GADIhC,EAAImB,IAAIA,EAAKnB,GACN,IAAPmB,EAAU,KACf,MAVA,IAAK,MAAMO,KAAQE,EAAI,CACtB,MAAM5B,EAAItC,KAAKmC,gBAAgBX,mBAAmBwC,EAAMC,EAAMK,GAE9D,GADIhC,EAAImB,IAAIA,EAAKnB,GACN,IAAPmB,EAAU,KACf,CAiDD,OAAOA,CACR,CAKAV,0BACC,MAAMS,EAAKxD,KAAKwB,qBAChB,GAAIgC,IAAO1B,WAAWS,UACrB,OAAOiB,EAER,IAAIC,EAAK,EACT,MAAMO,EAAOhE,MAAK6D,EAAIV,QAChBc,EAAOjE,MAAK8D,EAAIX,QAChBmB,EAAOtE,MAAKqE,EAAIlB,QAChBe,EAAOlE,MAAK6D,EAAIF,SAChBQ,EAAOnE,MAAK8D,EAAIH,SAChBY,EAAOvE,MAAKqE,EAAIV,SAEtB,IAAI3D,MAAK6D,EAAIX,WAAclD,MAAK8D,EAAIZ,WAAclD,MAAKqE,EAAInB,UAMpD,GAAKlD,MAAK6D,EAAIX,YAAalD,MAAK8D,EAAIZ,WAAclD,MAAKqE,EAAInB,UAM3D,GAAKlD,MAAK6D,EAAIX,WAAclD,MAAK8D,EAAIZ,YAAalD,MAAKqE,EAAInB,UAM3D,GAAIlD,MAAK6D,EAAIX,WAAalD,MAAK8D,EAAIZ,YAAclD,MAAKqE,EAAInB,UAChE,IAAK,MAAMc,KAAQE,EAClB,IAAK,MAAMD,KAAQE,EAAI,CACtB,MAAM7B,EAAItC,KAAKmC,gBAAgBX,mBAAmBwC,EAAMC,EAAMK,GAE9D,GADIhC,EAAImB,IAAIA,EAAKnB,GACN,IAAPmB,EAAU,KACf,MAEK,GAAIzD,MAAK6D,EAAIX,YAAclD,MAAK8D,EAAIZ,WAAalD,MAAKqE,EAAInB,UAChE,IAAK,MAAMc,KAAQE,EAClB,IAAK,MAAMI,KAAQC,EAAI,CACtB,MAAMjC,EAAItC,KAAKmC,gBAAgBX,mBAAmBwC,EAAMC,EAAMK,GAE9D,GADIhC,EAAImB,IAAIA,EAAKnB,GACN,IAAPmB,EAAU,KACf,MAEK,IAAKzD,MAAK6D,EAAIX,WAAalD,MAAK8D,EAAIZ,WAAalD,MAAKqE,EAAInB,UAChE,IAAK,MAAMe,KAAQE,EAClB,IAAK,MAAMG,KAAQC,EAAI,CACtB,MAAMjC,EAAItC,KAAKmC,gBAAgBX,mBAAmBwC,EAAMC,EAAMK,GAE9D,GADIhC,EAAImB,IAAIA,EAAKnB,GACN,IAAPmB,EAAU,KACf,MAGD,IAAK,MAAMO,KAAQE,EAClB,IAAK,MAAMD,KAAQE,EAClB,IAAK,MAAMG,KAAQC,EAAI,CACtB,MAAMjC,EAAItC,KAAKmC,gBAAgBX,mBAAmBwC,EAAMC,EAAMK,GAE9D,GADIhC,EAAImB,IAAIA,EAAKnB,GACN,IAAPmB,EAAU,KACf,MApCF,IAAK,MAAMa,KAAQC,EAAI,CACtB,MAAMjC,EAAItC,KAAKmC,gBAAgBX,mBAAmBwC,EAAMC,EAAMK,GAE9D,GADIhC,EAAImB,IAAIA,EAAKnB,GACN,IAAPmB,EAAU,KACf,MAVA,IAAK,MAAMQ,KAAQE,EAAI,CACtB,MAAM7B,EAAItC,KAAKmC,gBAAgBX,mBAAmBwC,EAAMC,EAAMK,GAE9D,GADIhC,EAAImB,IAAIA,EAAKnB,GACN,IAAPmB,EAAU,KACf,MAVA,IAAK,MAAMO,KAAQE,EAAI,CACtB,MAAM5B,EAAItC,KAAKmC,gBAAgBX,mBAAmBwC,EAAMC,EAAMK,GAE9D,GADIhC,EAAImB,IAAIA,EAAKnB,GACN,IAAPmB,EAAU,KACf,CAgDD,OAAOA,CACR,EAYD,MAAMe,oBAAoB1C,WAEzB2C,GACApE,GAGAQ,YAAYoB,KAAMyC,GACjBpD,MAAMW,GACNjC,MAAKyE,EAAQ,IAAIC,GACjB1E,MAAKK,EAAQ,IAAIS,MAAMd,MAAKyE,EAAM1D,OACnC,CAKAG,OACC,OAAOlB,MAAKyE,EAAM1D,MACnB,CAKAyB,GAAG7C,GACF,OAAOK,MAAKyE,EAAM9E,EACnB,CAKA8C,WAAWC,GACV,OAAO1C,MAAKyE,EAAME,SAASjC,EAC5B,CAKAvB,QAAQuB,GACP,OAAO1C,MAAKyE,EAAMtD,QAAQuB,EAC3B,CAKAC,oBACC,IAAIoB,EAAM,EACV,IAAK,MAAMrB,KAAK1C,MAAKyE,EAChB/B,EAAEQ,aAAaa,EAEpB,OAAOA,CACR,CAKAnB,YACC,IAAK,MAAMF,KAAK1C,MAAKyE,EACpB,GAAI/B,EAAEQ,UAAW,OAAO,EAEzB,OAAO,CACR,CAKA9C,cACC,IAAK,IAAIa,EAAI,EAAGA,EAAIjB,MAAKyE,EAAM1D,SAAUE,EAAG,CAC3C,GAAIjB,MAAKyE,EAAMxD,GAAGiC,UAAW,OAAQ,EACrClD,MAAKK,EAAMY,GAAKjB,MAAKyE,EAAMxD,GAAGkC,OAC/B,CACA,OAAOnD,KAAKkC,gBAAgB9B,eAAeJ,MAAKK,GAAS,EAAI,CAC9D,CAKAmB,qBACC,IAAK,IAAIP,EAAI,EAAGA,EAAIjB,MAAKyE,EAAM1D,SAAUE,EAAG,CAC3C,MAAMyB,EAAI1C,MAAKyE,EAAMxD,GACrB,GAAIyB,EAAEQ,UAAW,OAAOpB,WAAWS,UACnCvC,MAAKK,EAAMY,GAAKyB,EAAES,OACnB,CACA,OAAOnD,KAAKmC,gBAAgBX,sBAAsBxB,MAAKK,EACxD,CAKAwC,YACC,MAAMO,EAAK,GACX,IAAK,MAAMV,KAAK1C,MAAKyE,EACpB,IAAK,IAAIxD,EAAI,EAAG2D,EAAIlC,EAAExB,OAAQD,EAAI2D,IAAK3D,EAAG,CACzC,MAAMqC,EAAIZ,EAAEF,GAAGvB,GACXqC,IAAMtD,MAAMoD,EAAGG,KAAKD,EACzB,CAED,OAAOF,CACR,CAKAN,2BACC,MAAMU,EAAKxD,KAAKwB,qBAChB,GAAIgC,IAAO1B,WAAWS,UACrB,OAAOiB,EAER,MAAMqB,EAAe,IAAI/D,MAAMd,KAAK2C,qBACpC,IAAIW,EAAI,EAER,IAAK,IAAIrC,EAAI,EAAGA,EAAIjB,MAAKyE,EAAM1D,SAAUE,EACpCjB,MAAKyE,EAAMxD,GAAGiC,UACjB2B,EAAavB,KAAOrC,EAEpBjB,MAAKK,EAAMY,GAAKjB,MAAKyE,EAAMxD,GAAGkC,QAGhC,OAAOnD,KAAK8E,SAASD,EAAc,EAAG,EACvC,CAKA9B,0BACC,MAAMS,EAAKxD,KAAKwB,qBAChB,GAAIgC,IAAO1B,WAAWS,UACrB,OAAOiB,EAER,MAAMqB,EAAe,IAAI/D,MAAMd,KAAK2C,qBACpC,IAAIW,EAAI,EAER,IAAK,IAAIrC,EAAI,EAAGA,EAAIjB,MAAKyE,EAAM1D,SAAUE,EACpCjB,MAAKyE,EAAMxD,GAAGiC,UACjB2B,EAAavB,KAAOrC,EAEpBjB,MAAKK,EAAMY,GAAKjB,MAAKyE,EAAMxD,GAAGkC,QAGhC,OAAOnD,KAAK+E,SAASF,EAAc,EAAG,EACvC,CAEAC,SAASD,EAAcG,EAAavB,GACnC,MAAM9D,EAAQkF,EAAaG,GACrBC,EAAQjF,MAAKyE,EAAM9E,GAAOgE,SAEhC,GAAIqB,IAAgBH,EAAa9D,OAAS,EACzC,IAAK,MAAM2C,KAAOuB,EAAG,CACpBjF,MAAKK,EAAMV,GAAS+D,EACpB,MAAMpB,EAAItC,KAAKmC,gBAAgBX,mBAAmBxB,MAAKK,GAEvD,GADIiC,EAAImB,IAAIA,EAAKnB,GACN,IAAPmB,EAAU,KACf,MAEA,IAAK,MAAMC,KAAOuB,EACjBjF,MAAKK,EAAMV,GAAS+D,EACpBD,EAAKzD,KAAK+E,SAASF,EAAcG,EAAc,EAAGvB,GAGpD,OAAOA,CACR,CAEAsB,SAASF,EAAcG,EAAavB,GACnC,MAAM9D,EAAQkF,EAAaG,GACrBC,EAAQjF,MAAKyE,EAAM9E,GAAOgE,SAEhC,GAAIqB,IAAgBH,EAAa9D,OAAS,EACzC,IAAK,MAAM2C,KAAOuB,EAAG,CACpBjF,MAAKK,EAAMV,GAAS+D,EACpB,MAAMpB,EAAItC,KAAKmC,gBAAgBX,mBAAmBxB,MAAKK,GAEvD,GADIiC,EAAImB,IAAIA,EAAKnB,GACN,IAAPmB,EAAU,KACf,MAEA,IAAK,MAAMC,KAAOuB,EACjBjF,MAAKK,EAAMV,GAAS+D,EACpBD,EAAKzD,KAAK+E,SAASF,EAAcG,EAAc,EAAGvB,GAGpD,OAAOA,CACR,EAaD,MAAMyB,OAQLC,SAASzB,GAAM,CAQfvC,QAAQuC,GAAM,CAOdxC,OAAQ,CAQRsB,GAAG7C,GAAQ,CAKX,CAACyF,OAAOC,YAAa,CAOrBC,SACC,OAAOtF,KAAKwC,GAAG+C,KAAKC,MAAMD,KAAKD,SAAWtF,KAAKkB,QAChD,EAWD,MAAMuE,wBAAwBP,OAE7B7E,GAEAQ,YAAYR,GACXiB,QACAtB,MAAKK,EAAQ,IAAIA,EAClB,CAKA8E,SAASzB,GACR,OAAO1D,MAAKK,EAAMsE,SAASjB,EAC5B,CAKAvC,QAAQuC,GACP,OAAO1D,MAAKK,EAAMc,QAAQuC,EAC3B,CAKAxC,OACC,OAAOlB,MAAKK,EAAMU,MACnB,CAKAyB,GAAG7C,GACF,OAAOK,MAAKK,EAAMV,EACnB,CAKA,CAACyF,OAAOC,YACP,OAAOrF,MAAKK,EAAM+E,OAAOC,WAC1B,EAWD,MAAMK,qBAAqBR,OAE1BS,GACAC,GAEA/E,YAAY8E,EAAKC,GAChBtE,QACAtB,MAAK2F,EAAa,EAANA,EACZ3F,MAAK4F,EAAa,EAANA,CACb,CAKAT,SAASzB,GACR,OAAO1D,MAAK2F,GAAQjC,GAAOA,GAAO1D,MAAK4F,CACxC,CAKAzE,QAAQuC,GACP,OAAQ1D,MAAK2F,GAAQjC,GAAOA,GAAO1D,MAAK4F,EAASlC,EAAM1D,MAAK2F,GAAS,CACtE,CAKAzE,OACC,OAAOlB,MAAK4F,EAAO5F,MAAK2F,EAAO,CAChC,CAKAnD,GAAG7C,GACF,OAAOK,MAAK2F,EAAOhG,CACpB,CAKA,CAACyF,OAAOC,YACP,IAAI3B,EAAM1D,MAAK2F,EACf,MAAO,CACNE,KAAMA,IAAOnC,GAAO1D,MAAK4F,EAAO,CAAEzC,MAAOO,IAAOoC,MAAM,GAAU,CAAEA,MAAM,GAE1E,EAYD,MAAMC,iBAAiBrG,QAEtBqC,SAAkBiE,OAAOC,UAEzBC,GACAC,GAAQ,GACRC,GACA1C,GAAQqC,UAASM,EAGjBxF,YAAYqF,EAAOjB,GAClB3D,QACAtB,MAAKkG,EAASA,EACdlG,MAAKoG,EAASnB,CACf,CAGAqB,QAAQhD,GACP,GAAItD,KAAKuG,gBAAgBjD,GACxB,MAAM,IAAIkD,yBAEXxG,MAAKmG,EAAM5C,KAAKD,EACjB,CAGAmD,WAAWnD,GACV,IAAKtD,KAAKuG,gBAAgBjD,GACzB,MAAM,IAAIkD,yBAEXxG,MAAKmG,EAAQnG,MAAKmG,EAAMO,QAAOrD,GAAKA,IAAMC,GAC3C,CAMAqD,OAAOxD,GACNnD,MAAK0D,EAAOP,CACb,CAKAyD,QACC5G,KAAK2G,OAAOZ,UAASM,EACtB,CAMAnD,UACC,OAAOlD,KAAKmD,UAAY4C,UAASM,CAClC,CAOAQ,UAAU5B,GACTjF,MAAKoG,EAAOnB,EACZjF,KAAK4G,OACN,CAMAV,QACC,OAAOlG,MAAKkG,CACb,CAMAhF,OACC,OAAOlB,MAAKmG,EAAMpF,MACnB,CAOAyB,GAAG7C,GACF,OAAOK,MAAKmG,EAAMxG,EACnB,CAOAmH,cACC,MAAO,IAAI9G,MAAKmG,EACjB,CAMAxC,SACC,OAAO3D,MAAKoG,CACb,CAOAG,gBAAgBjD,GACf,OAAOtD,MAAKmG,EAAMxB,SAASrB,EAC5B,CAMAjB,WACC,MAAQ,IAAGrC,KAAKL,UAA0B,KAAhBK,KAAKJ,OAAgB,GAAM,IAAGI,KAAKJ,eAAeI,KAAKkD,UAAY,UAAYlD,KAAKmD,SAC/G,CAMAA,QACC,OAAOnD,MAAK0D,CACb,CAMAb,YACC,MAAM6B,EAAK,GACX,IAAK,MAAMpB,KAAKtD,MAAKmG,EACpB,IAAI,IAAIY,EAAI,EAAG/F,EAAIsC,EAAEpC,OAAQ6F,EAAI/F,EAAG+F,GAAK,EAAG,CAC3C,MAAMrE,EAAIY,EAAEd,GAAGuE,GACXrE,IAAM1C,MAAM0E,EAAGnB,KAAKb,EACzB,CAED,OAAOgC,CACR,EAYD,MAAMsC,QAELC,UAAW,EACXC,MAAW,GACXC,MAAW,GAQXC,YAAY1E,GACXA,EAAE3C,SAASC,KAAKkH,MAAMnG,QACtBf,KAAKkH,MAAM3D,KAAKb,EACjB,CAYA2E,aAAaC,GACZ,OAAIA,EAAKC,OACD,IAAI9B,gBAAgB6B,EAAKC,QACtB,QAASD,GAAQ,QAASA,EAC7B,IAAI5B,aAAa4B,EAAK3B,IAAK2B,EAAK1B,KAEjC,IACR,CAWA4B,eAAeF,GACd,GAAIA,EAAKnE,QAAUmE,EAAK3D,OAAOwB,SAASmC,EAAKnE,OAC5C,MAAM,IAAIsE,MAEX,MAAM/E,EAAI,IAAIqD,SAAS/F,KAAMsH,EAAK3D,QAIlC,OAHA3D,KAAKoH,YAAY1E,GACb4E,EAAK1H,MAAM8C,EAAEzC,QAAQqH,EAAK1H,MAC1B0H,EAAKnE,OAAOT,EAAEiE,OAAOW,EAAKnE,OACvBT,CACR,CAWAgF,iBAAiBJ,GAChB,IAAK,MAAM5E,KAAK4E,EAAKK,UACpB,GAAIjF,EAAEwD,UAAYlG,KAAM,OAAO,KAEhC,IAAIsD,EACkCA,EAAR,IAA1BgE,EAAKK,UAAU5G,OAAuB,IAAIiC,YAAYsE,EAAKM,YAAaN,EAAKK,WAC9C,IAA1BL,EAAKK,UAAU5G,OAAkB,IAAI6C,YAAY0D,EAAKM,YAAaN,EAAKK,WAC9C,IAA1BL,EAAKK,UAAU5G,OAAkB,IAAIqD,YAAYkD,EAAKM,YAAaN,EAAKK,WACxE,IAAInD,YAAY8C,EAAKM,SAAUN,EAAKK,WAC7CrE,EAAEvD,SAASC,KAAKmH,MAAMpG,QACtBf,KAAKmH,MAAM5D,KAAKD,GAChB,IAAK,MAAMZ,KAAK4E,EAAKK,UAAWjF,EAAE4D,QAAQhD,GAG1C,OAFIA,EAAElB,YAAWpC,KAAKiH,UAAW,GAC7BK,EAAK1H,MAAM0D,EAAErD,QAAQqH,EAAK1H,MACvB0D,CACR,CAQAuE,iBAAiBvE,GAChB,MAAM3D,EAAQK,KAAKmH,MAAMhG,QAAQmC,GACjCtD,KAAKmH,MAAMW,OAAOxE,GAClB,IAAK,IAAIrC,EAAItB,EAAOsB,EAAIjB,KAAKmH,MAAMpG,SAAUE,EAC5CjB,KAAKmH,MAAMlG,GAAGlB,SAASkB,GAExB,IAAK,IAAIA,EAAI,EAAGA,EAAIqC,EAAEpC,SAAUD,EAC/BqC,EAAEd,GAAGvB,GAAGwF,WAAWnD,GAEpBtD,KAAKiH,UAAW,EAChB,IAAK,IAAIhG,EAAI,EAAGoC,EAAIrD,KAAKmH,MAAMpG,OAAQE,EAAIoC,IAAKpC,EAC/C,GAAIjB,KAAKmH,MAAMlG,GAAGmB,UAAW,CAC5BpC,KAAKiH,UAAW,EAChB,KACD,CAEF,CAKAc,oBACC,IAAK,MAAMrF,KAAK1C,KAAKkH,MACpBxE,EAAEkE,OAEJ,CAMAoB,mBACChI,KAAKkH,MAAMe,UACX,IAAK,IAAIhH,EAAI,EAAGoC,EAAIrD,KAAKkH,MAAMnG,OAAQE,EAAIoC,IAAKpC,EAC/CjB,KAAKkH,MAAMjG,GAAGlB,SAASkB,EAEzB,CAOAiH,cAAcC,GACbnI,KAAKkH,MAAMkB,KAAKD,GAChB,IAAK,IAAIlH,EAAI,EAAGoC,EAAIrD,KAAKkH,MAAMnG,OAAQE,EAAIoC,IAAKpC,EAC/CjB,KAAKkH,MAAMjG,GAAGlB,SAASkB,EAEzB,CAQAoH,eACC,OAAOrI,KAAKkH,MAAMnG,MACnB,CAOAuH,WAAW3I,GACV,OAAOK,KAAKkH,MAAMvH,EACnB,CAOA4I,WAAW3I,GACV,IAAK,MAAM8C,KAAK1C,KAAKkH,MACpB,GAAIxE,EAAE9C,SAAWA,EAAM,OAAO8C,EAE/B,OAAO,IACR,CAOA8F,YAAY9F,GACX,OAAO1C,KAAKkH,MAAMvC,SAASjC,EAC5B,CAOAiF,YACC,OAAO3H,KAAKkH,KACb,CAQAuB,iBACC,OAAOzI,KAAKmH,MAAMpG,MACnB,CAOA2H,aAAa/I,GACZ,OAAOK,KAAKmH,MAAMxH,EACnB,CAOAgJ,aAAa/I,GACZ,IAAK,MAAM0D,KAAKtD,KAAKmH,MACpB,GAAI7D,EAAE1D,SAAWA,EAAM,OAAO0D,EAE/B,OAAO,IACR,CAOAsF,cAActF,GACb,OAAOtD,KAAKmH,MAAMxC,SAASrB,EAC5B,CAOAwD,cACC,OAAO9G,KAAKmH,KACb,CAUA0B,mBAAmBhF,EAAIC,GACtB,MAAMV,EAAK,GACX,IAAK,IAAInC,EAAI,EAAGoC,EAAIQ,EAAG3C,OAAQD,EAAIoC,IAAKpC,EAAG,CAC1C,MAAMqC,EAAIO,EAAGrB,GAAGvB,GACZqC,EAAEb,WAAWqB,IAAKV,EAAGG,KAAKD,EAC/B,CACD,CAMAwF,yCACC,MAAM1F,EAAK,GACX,IAAI2F,EAAM,EACV,IAAK,MAAMzF,KAAKtD,KAAKmH,MAAO,CAC3B,MAAM7E,EAAIgB,EAAE9B,qBACRc,EAAIyG,GACPA,EAAMzG,EACNc,EAAGrC,OAAS,EACZqC,EAAGG,KAAKD,IACEhB,EAAIyG,EAAyB,GAAnB/C,OAAOC,WAC3B7C,EAAGG,KAAKD,EAEV,CACA,MAAO,CAACF,EAAI2F,EACb,CASAC,0BACC,IAAI5F,EAAK,EACT,IAAK,MAAME,KAAKtD,KAAKmH,MAAO,CAC3B,MAAM7E,EAAIgB,EAAE9B,qBACZ,GAAIc,IAAMR,WAAWS,UAAW,OAAOT,WAAWS,UAC9CD,EAAIc,IAAIA,EAAKd,EAClB,CACA,OAAOc,CACR,CAMA6F,4BACC,IAAIC,EAAM,EACV,IAAK,MAAM5F,KAAKtD,KAAKmH,MACpB+B,GAAO5F,EAAE9B,qBAGV,OADA0H,GAAYlJ,KAAKmH,MAAMpG,OAChBmI,CACR,CAMAvG,oBACC,IAAIwG,EAAM,EACV,IAAK,MAAMzG,KAAK1C,KAAKkH,MAChBxE,EAAEQ,WAAWiG,IAElB,OAAOA,CACR,CAMAC,oBACC,OAAOpJ,KAAKyI,iBAAmBzI,KAAKqI,cACrC,CAMAgB,iBACC,IAAK,MAAM3G,KAAK1C,KAAKkH,MACpB,GAA0B,IAAtBxE,EAAEiB,SAASzC,OAAc,OAAO,EAErC,OAAO,CACR,CAMAkB,UACC,OAAOpC,KAAKiH,QACb,EAWD,MAAMqC,qBAAqBtC,QAW1BU,iBAAiBJ,GAChB,GAAGA,EAAKM,oBAAoBrG,cAAe,MAAM,IAAIkG,MACrD,OAAOnG,MAAMoG,iBAAiBJ,EAC/B,CAMAlF,UACC,OAAO,CACR,CAMAmH,0BACC,OAAOvJ,KAAKwJ,0BAA4BxJ,KAAKmH,MAAMpG,MACpD,CAOAyI,0BACC,IAAIC,EAAQ,EACZ,IAAK,IAAIxI,EAAI,EAAGA,EAAIjB,KAAKmH,MAAMpG,SAAUE,EACJ,IAAhCjB,KAAKmH,MAAMlG,GAAGb,iBAAuBqJ,EAE1C,OAAOA,CACR,CAOAC,uBACC,MAAMtG,EAAK,GACX,IAAK,MAAME,KAAKtD,KAAKmH,MACI,IAApB7D,EAAElD,eAAqBgD,EAAGG,KAAKD,GAEpC,OAAOF,CACR,CAOAuG,0BACC,IAAIF,EAAQ,EACZ,IAAK,MAAMnG,KAAKtD,KAAKmH,MACI,IAApB7D,EAAElD,iBAAuBqJ,EAE9B,OAAOA,CACR","file":"problem.min.js","sourcesContent":["/**\n * The common class of variables and constraints.\n *\n * @author Takuto Yanagida\n * @version 2022-08-15\n */\n\nclass Element {\n\n\t#index = -1;\n\t#name  = '';\n\n\t/**\n\t * It is used when the user wishes to associate an arbitrary object with each element.\n\t */\n\tuserObject = null;\n\n\t/**\n\t * Used when the solver wants to associate an arbitrary object with each element.\n\t */\n\tsolverObject = null;\n\n\t// Called only from Problem.\n\tsetIndex(index) {\n\t\tthis.#index = index;\n\t}\n\n\t/**\n\t * Sets the name.\n\t *\n\t * @param name String representing the name.\n\t */\n\tsetName(name) {\n\t\tthis.#name = name;\n\t}\n\n\t/**\n\t * Get the index on the owned problem.\n\t * Each variable and constraint is assigned a serial number as an index, which is used to access it through the problem.\n\t *\n\t * @return Integer value representing the index.\n\t */\n\tindex() {\n\t\treturn this.#index;\n\t}\n\n\t/**\n\t * Gets the name.\n\t *\n\t * @return String representing the name.\n\t */\n\tname() {\n\t\treturn this.#name;\n\t}\n\n}\n\n\n/**\n * An interface that represents the relationship between variables.\n * Use CrispRelation or FuzzyRelation class that implement this interface.\n *\n * @author Takuto Yanagida\n * @version 2023-03-25\n */\n\nclass Relation {\n\n}\n\n/**\n * The class represents crisp relationships between variables.\n *\n * @author Takuto Yanagida\n * @version 2023-03-25\n */\n\nclass CrispRelation extends Relation {\n\n\t/**\n\t * Gets whether or not the relation is satisfied in this crisp relation.\n\t * @param vals Values of each variable\n\t * @return Whether or not it is satisfied.\n\t */\n\tisSatisfied(...vals) {\n\t\tthrow new Exception();\n\t}\n\n\t/**\n\t * Returns a view as a fuzzy relation.\n\t * @return A fuzzy relation.\n\t */\n\tasFuzzyRelation() {\n\t\treturn new FuzzyRelationView(this);\n\t}\n\n}\n\n/**\n * This class represents crisp relationships by table.\n *\n * @author Takuto YANAGIDA\n * @version 2023-03-26\n */\n\nclass CrispTabledRelation extends CrispRelation {\n\n\t#elms;\n\t#doms;\n\t#mul;\n\n\tconstructor(elms, doms) {\n\t\tthis.#elms = [...elms];\n\t\tthis.#doms = [...doms];\n\t\tthis.#mul  = new Array(doms.length);\n\n\t\tlet m = 1;\n\t\tfor (let i = this.#mul.length - 1; i >= 0; --i) {\n\t\t\tthis.#mul[i] = m;\n\t\t\tm *= doms[i].size();\n\t\t}\n\t}\n\n\t/**\n\t * Gets whether or not the relation is satisfied in this crisp relation.\n\t * @param vals Values of each variable\n\t * @return Whether or not it is satisfied.\n\t */\n\tisSatisfied(...vals) {\n\t\tif (this.#mul.length !== vals.length) {\n\t\t\tthrow new Exception();\n\t\t}\n\t\tlet index = 0;\n\t\tfor (let i = 0; i < this.#mul.length; ++i) {\n\t\t\tindex += this.#mul[i] * this.#doms[i].indexOf(vals[i]);\n\t\t}\n\t\treturn this.#elms[index];\n\t}\n\n}\n\n/**\n * Crisp relations defined by functions.\n *\n * @author Takuto Yanagida\n * @version 2023-04-04\n */\n\nclass CrispRelationFunction extends CrispRelation {\n\n\t#fn;\n\n\tconstructor(fn) {\n\t\tsuper();\n\t\tthis.#fn = fn;\n\t}\n\n\t/**\n\t * Gets whether or not the relation is satisfied in this crisp relation.\n\t * @param vals Values of each variable\n\t * @return Whether or not it is satisfied.\n\t */\n\tisSatisfied(...vals) {\n\t\treturn this.#fn(...vals);\n\t}\n\n}\n\n/**\n * The class represents fuzzy relationships between variables.\n *\n * @author Takuto Yanagida\n * @version 2023-03-25\n */\n\nclass FuzzyRelation extends Relation {\n\n\t/**\n\t * Gets the satisfaction degree in this fuzzy relation.\n\t * @param vals Values of each variable\n\t * @return A satisfaction degree d (0 <= d <= 1).\n\t */\n\tsatisfactionDegree(...vals) {\n\t\tthrow new Exception();\n\t}\n\n\t/**\n\t * Returns a view as a crisp relation.\n\t * @return A crisp relation.\n\t */\n\tasCrispRelation() {\n\t\treturn new CrispRelationView(this);\n\t}\n\n}\n\n/**\n * This class represents fuzzy relationships by table.\n *\n * @author Takuto YANAGIDA\n * @version 2023-03-26\n */\n\nclass FuzzyTabledRelation extends FuzzyRelation {\n\n\t#elms;\n\t#doms;\n\t#mul;\n\n\tconstructor(elms, doms) {\n\t\tthis.#elms = [...elms];\n\t\tthis.#doms = [...doms];\n\t\tthis.#mul  = new Array(doms.length);\n\n\t\tlet m = 1;\n\t\tfor (let i = this.#mul.length - 1; i >= 0; --i) {\n\t\t\tthis.#mul[i] = m;\n\t\t\tm *= doms[i].size();\n\t\t}\n\t}\n\n\t/**\n\t * Gets the satisfaction degree in this fuzzy relation.\n\t * @param vals Values of each variable\n\t * @return A satisfaction degree d (0 <= d <= 1).\n\t */\n\tsatisfactionDegree(...vals) {\n\t\tif (this.#mul.length !== vals.length) {\n\t\t\tthrow new Exception();\n\t\t}\n\t\tlet index = 0;\n\t\tfor (let i = 0; i < this.#mul.length; ++i) {\n\t\t\tindex += this.#mul[i] * this.#doms[i].indexOf(vals[i]);\n\t\t}\n\t\treturn this.#elms[index];\n\t}\n\n}\n\n/**\n * Fuzzy relations defined by functions.\n *\n * @author Takuto Yanagida\n * @version 2023-04-04\n */\n\nclass FuzzyRelationFunction extends FuzzyRelation {\n\n\t#fn;\n\n\tconstructor(fn) {\n\t\tsuper();\n\t\tthis.#fn = fn;\n\t}\n\n\t/**\n\t * Gets the satisfaction degree in this fuzzy relation.\n\t * @param vals Values of each variable\n\t * @return A satisfaction degree d (0 <= d <= 1).\n\t */\n\tsatisfactionDegree(...vals) {\n\t\treturn this.#fn(...vals);\n\t}\n\n}\n\n/**\n * View of relations.\n *\n * @author Takuto Yanagida\n * @version 2023-03-25\n */\n\nclass CrispRelationView extends CrispRelation {\n\n\tconstructor(that) {\n\t\tthis.that = that;\n\t}\n\n\tisSatisfied(...vals) {\n\t\treturn this.that.satisfactionDegree(vals) === 1;\n\t}\n\n}\n\nclass FuzzyRelationView extends FuzzyRelation {\n\n\tconstructor(that) {\n\t\tthis.that = that;\n\t}\n\n\tsatisfactionDegree(...vals) {\n\t\treturn this.that.isSatisfied(vals) ? 1 : 0;\n\t}\n\n}\n\n\n/**\n * The class represents a constraint.\n *\n * @author Takuto Yanagida\n * @version 2023-04-10\n */\n\nclass Constraint extends Element {\n\n\t/**\n\t * The constant indicating that the satisfaction degree is not defined.\n\t */\n\tstatic UNDEFINED = -1;\n\n\trel;\n\n\t// Called only from Problem.\n\tconstructor(r) {\n\t\tsuper();\n\t\tthis.rel = r;\n\t}\n\n\t/**\n\t * Returns the crisp relation between variables.\n\t * @return Relation.\n\t */\n\tcrispRelation() {\n\t\treturn this.rel;\n\t}\n\n\t/**\n\t * Returns the fuzzy relation between variables.\n\t * @return Relation.\n\t */\n\tfuzzyRelation() {\n\t\treturn this.rel;\n\t}\n\n\t/**\n\t * Returns whether this is a fuzzy constraint.\n\t * @return True if it is fuzzy constraint.\n\t */\n\tisFuzzy() {\n\t\treturn this.rel instanceof FuzzyRelation;\n\t}\n\n\t/**\n\t * Returns a string representation.\n\t * @return A string representation.\n\t */\n\ttoString() {\n\t\tconst s = this.satisfactionDegree();\n\t\treturn `c${this.index()}${this.name() === '' ? '' : `(${this.name()})`} = ${s === Constraint.UNDEFINED ? 'UNDEFINED' : s}`;\n\t}\n\n\t/**\n\t * Returns the order of the constraint, i.e., the number of (associated) variables in the scope.\n\t * @return Order.\n\t */\n\tsize() {}\n\n\t/**\n\t * Gets the associated variable by specifying its index.\n\t * @param index Index.\n\t * @return A variable.\n\t */\n\tat(index) {}\n\n\t/**\n\t * Returns whether the specified variable is associated or not.\n\t * @param v A variable.\n\t * @return True if it is associated.\n\t */\n\tconstrains(v) {}\n\n\t/**\n\t * Gets the index of a specified variable.\n\t * If not found, returns -1.\n\t * @param v A variable.\n\t * @return Index.\n\t */\n\tindexOf(v) {}\n\n\t/**\n\t * Returns the number of scope variables that have not been assigned a value.\n\t * @return Number of variables\n\t */\n\temptyVariableSize() {}\n\n\t/**\n\t * Returns whether or not the satisfaction (degree) is defined.\n\t * Satisfaction (degree) is defined when all associated variables have values assigned to them.\n\t * @return True if it is defined.\n\t */\n\tisDefined() {}\n\n\t/**\n\t * Returns whether or not this constraint is satisfied.\n\t * @return 1 if satisfied, 0 if not, UNDEFINED if undefined\n\t */\n\tisSatisfied() {}\n\n\t/**\n\t * Gets the current satisfaction degree.\n\t * @return Degree 0 - 1, UNDEFINED if undefined.\n\t */\n\tsatisfactionDegree() {}\n\n\t/**\n\t * Returns the set of constraints connected via the associated variables.\n\t * @return A set of constraints.\n\t */\n\tneighbors() {}\n\n\t/**\n\t * Calculates the highest consistency degree.\n\t * That is, it seeks the highest satisfaction degree of the possible combinations of variable assignments for a given constraint.\n\t * When all associated variables have been assigned values, it returns the same value as getSatisfactionDegree().\n\t * @return The highest consistency degree.\n\t */\n\thighestConsistencyDegree() {}\n\n\t/**\n\t * Calculates the lowest consistency degree.\n\t * That is, it seeks the lowest satisfaction degree of the possible combinations of variable assignments for a given constraint.\n\t * When all associated variables have been assigned values, it returns the same value as getSatisfactionDegree().\n\t * @return The lowest consistency degree.\n\t */\n\tlowestConsistencyDegree() {}\n\n}\n\n/**\n * The class represents an unary constraint.\n * The constructor is not called directly, since it is created by the Problem.\n *\n * @author Takuto Yanagida\n * @version 2023-04-10\n */\n\nclass Constraint1 extends Constraint {\n\n\t#v;\n\n\t// Called only from Problem.\n\tconstructor(r, v) {\n\t\tsuper(r);\n\t\tthis.#v = v;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tsize() {\n\t\treturn 1;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tat(index) {\n\t\tif (index === 0) return this.#v;\n\t\tthrow new IndexOutOfBoundsException();\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tconstrains(v) {\n\t\treturn v === this.#v;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tindexOf(v) {\n\t\treturn (v === this.#v) ? 0 : -1;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\temptyVariableSize() {\n\t\treturn this.#v.isEmpty() ? 1 : 0;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tisDefined() {\n\t\treturn !this.#v.isEmpty();\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tisSatisfied() {\n\t\tif (this.#v.isEmpty()) return Constraint.UNDEFINED;\n\t\treturn this.crispRelation().isSatisfied(this.#v.value()) ? 1 : 0;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tsatisfactionDegree() {\n\t\tif (this.#v.isEmpty()) return Constraint.UNDEFINED;\n\t\treturn this.fuzzyRelation().satisfactionDegree(this.#v.value());\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tneighbors() {\n\t\tconst cs = [];\n\t\tfor (let i = 0, n = this.#v.size(); i < n; ++i) {\n\t\t\tconst c = this.#v.at(i);\n\t\t\tif (c !== this) cs.push(c);\n\t\t}\n\t\treturn cs;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\thighestConsistencyDegree() {\n\t\tconst sd = this.satisfactionDegree();\n\t\tif (sd !== Constraint.UNDEFINED) {\n\t\t\treturn sd;\n\t\t}\n\t\tlet cd = 0;\n\n\t\tfor (const val of this.#v.domain()) {\n\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val);\n\t\t\tif (s > cd) cd = s;\n\t\t\tif (cd === 1) break;\n\t\t}\n\t\treturn cd;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tlowestConsistencyDegree() {\n\t\tconst sd = this.satisfactionDegree();\n\t\tif (sd !== Constraint.UNDEFINED) {\n\t\t\treturn sd;\n\t\t}\n\t\tlet cd = 1;\n\n\t\tfor (const val of this.#v.domain()) {\n\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val);\n\t\t\tif (s < cd) cd = s;\n\t\t\tif (cd === 0) break;\n\t\t}\n\t\treturn cd;\n\t}\n\n}\n\n/**\n * The class represents an binary constraint.\n * The constructor is not called directly, since it is created by the Problem.\n *\n * @author Takuto Yanagida\n * @version 2023-04-10\n */\n\nclass Constraint2 extends Constraint {\n\n\t#v1;\n\t#v2;\n\n\t// Called only from Problem.\n\tconstructor(r, v1, v2) {\n\t\tsuper(r);\n\t\tthis.#v1 = v1;\n\t\tthis.#v2 = v2;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tsize() {\n\t\treturn 2;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tat(index) {\n\t\tif (index === 0) return this.#v1;\n\t\tif (index === 1) return this.#v2;\n\t\tthrow new IndexOutOfBoundsException();\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tconstrains(v) {\n\t\treturn this.#v1 === v || this.#v2 === v;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tindexOf(v) {\n\t\tif (v === this.#v1) return 0;\n\t\tif (v === this.#v2) return 1;\n\t\treturn -1;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\temptyVariableSize() {\n\t\tlet sum = 0;\n\t\tif (this.#v1.isEmpty()) ++sum;\n\t\tif (this.#v2.isEmpty()) ++sum;\n\t\treturn sum;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tisDefined() {\n\t\treturn !this.#v1.isEmpty() && !this.#v2.isEmpty();\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tisSatisfied() {\n\t\tif (this.#v1.isEmpty() || this.#v2.isEmpty()) return Constraint.UNDEFINED;\n\t\treturn this.crispRelation().isSatisfied(this.#v1.value(), this.#v2.value()) ? 1 : 0;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tsatisfactionDegree() {\n\t\tif (this.#v1.isEmpty() || this.#v2.isEmpty()) return Constraint.UNDEFINED;\n\t\treturn this.fuzzyRelation().satisfactionDegree(this.#v1.value(), this.#v2.value());\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tneighbors() {\n\t\tconst cs = [];\n\t\tfor (let i = 0, n = this.#v1.size(); i < n; ++i) {\n\t\t\tconst c = this.#v1.at(i);\n\t\t\tif (c !== this) cs.push(c);\n\t\t}\n\t\tfor (let i = 0, n = this.#v2.size(); i < n; ++i) {\n\t\t\tconst c = this.#v2.at(i);\n\t\t\tif (c !== this) cs.push(c);\n\t\t}\n\t\treturn cs;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\thighestConsistencyDegree() {\n\t\tconst sd = this.satisfactionDegree();\n\t\tif (sd !== Constraint.UNDEFINED) {\n\t\t\treturn sd;\n\t\t}\n\t\tlet cd = 0;\n\t\tconst val1 = this.#v1.value();\n\t\tconst val2 = this.#v2.value();\n\t\tconst d1   = this.#v1.domain();\n\t\tconst d2   = this.#v2.domain();\n\n\t\tif(this.#v1.isEmpty() && !this.#v2.isEmpty()) {\n\t\t\tfor (const val1 of d1) {\n\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2);\n\t\t\t\tif (s > cd) cd = s;\n\t\t\t\tif (cd === 1) break;\n\t\t\t}\n\t\t} else if (!this.#v1.isEmpty() && this.#v2.isEmpty()) {\n\t\t\tfor (const val2 of d2) {\n\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2);\n\t\t\t\tif (s > cd) cd = s;\n\t\t\t\tif (cd === 1) break;\n\t\t\t}\n\t\t} else {\n\t\t\tfor (const val1 of d1) {\n\t\t\t\tfor (const val2 of d2) {\n\t\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2);\n\t\t\t\t\tif (s > cd) cd = s;\n\t\t\t\t\tif (cd === 1) break;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn cd;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tlowestConsistencyDegree() {\n\t\tconst sd = this.satisfactionDegree();\n\t\tif(sd !== Constraint.UNDEFINED) {\n\t\t\treturn sd;\n\t\t}\n\t\tlet cd = 1;\n\t\tconst val1 = this.#v1.value();\n\t\tconst val2 = this.#v2.value();\n\t\tconst d1   = this.#v1.domain();\n\t\tconst d2   = this.#v2.domain();\n\n\t\tif (this.#v1.isEmpty() && !this.#v2.isEmpty()) {\n\t\t\tfor (const val1 of d1) {\n\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2);\n\t\t\t\tif (s < cd) cd = s;\n\t\t\t\tif (cd === 0) break;\n\t\t\t}\n\t\t} else if (!this.#v1.isEmpty() && this.#v2.isEmpty()) {\n\t\t\tfor (const val2 of d2) {\n\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2);\n\t\t\t\tif (s < cd) cd = s;\n\t\t\t\tif (cd === 0) break;\n\t\t\t}\n\t\t} else {\n\t\t\tfor (const val1 of d1) {\n\t\t\t\tfor (const val2 of d2) {\n\t\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2);\n\t\t\t\t\tif (s < cd) cd = s;\n\t\t\t\t\tif (cd === 0) break;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn cd;\n\t}\n\n}\n\n/**\n * The class represents an 3-ary constraint.\n * The constructor is not called directly, since it is created by the Problem.\n *\n * @author Takuto Yanagida\n * @version 2023-04-10\n */\n\nclass Constraint3 extends Constraint {\n\n\t#v1;\n\t#v2;\n\t#v3;\n\n\t// Called only from Problem.\n\tconstructor(r, v1, v2, v3) {\n\t\tsuper(r);\n\t\tthis.#v1 = v1;\n\t\tthis.#v2 = v2;\n\t\tthis.#v3 = v3;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tsize() {\n\t\treturn 3;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tat(index) {\n\t\tif (index === 0) return this.#v1;\n\t\tif (index === 1) return this.#v2;\n\t\tif (index === 2) return this.#v3;\n\t\tthrow new IndexOutOfBoundsException();\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tconstrains(v) {\n\t\treturn this.#v1 === v || this.#v2 === v || this.#v3 === v;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tindexOf(v) {\n\t\tif (v === this.#v1) return 0;\n\t\tif (v === this.#v2) return 1;\n\t\tif (v === this.#v3) return 2;\n\t\treturn -1;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\temptyVariableSize() {\n\t\tlet sum = 0;\n\t\tif (this.#v1.isEmpty()) ++sum;\n\t\tif (this.#v2.isEmpty()) ++sum;\n\t\tif (this.#v3.isEmpty()) ++sum;\n\t\treturn sum;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tisDefined() {\n\t\treturn !this.#v1.isEmpty() && !this.#v2.isEmpty() && !this.#v3.isEmpty();\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tisSatisfied() {\n\t\tif (this.#v1.isEmpty() || this.#v2.isEmpty() || this.#v3.isEmpty()) return -1;\n\t\treturn this.crispRelation().isSatisfied(this.#v1.value(), this.#v2.value(), this.#v3.value()) ? 1 : 0;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tsatisfactionDegree() {\n\t\tif (this.#v1.isEmpty() || this.#v2.isEmpty() || this.#v3.isEmpty()) return Constraint.UNDEFINED;\n\t\treturn this.fuzzyRelation().satisfactionDegree(this.#v1.value(), this.#v2.value(), this.#v3.value());\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tneighbors() {\n\t\tconst cs = [];\n\t\tfor (let i = 0, n = this.#v1.size(); i < n; ++i) {\n\t\t\tconst c = this.#v1.at(i);\n\t\t\tif (c !== this) cs.push(c);\n\t\t}\n\t\tfor (let i = 0, n = this.#v2.size(); i < n; ++i) {\n\t\t\tconst c = this.#v2.at(i);\n\t\t\tif (c !== this) cs.push(c);\n\t\t}\n\t\tfor (let i = 0, n = this.#v3.size(); i < n; ++i) {\n\t\t\tconst c = this.#v3.at(i);\n\t\t\tif (c !== this) cs.push(c);\n\t\t}\n\t\treturn cs;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\thighestConsistencyDegree() {\n\t\tconst sd = this.satisfactionDegree();\n\t\tif (sd !== Constraint.UNDEFINED) {\n\t\t\treturn sd;\n\t\t}\n\t\tlet cd = 1;\n\t\tconst val1 = this.#v1.value();\n\t\tconst val2 = this.#v2.value();\n\t\tconst val3 = this.#v3.value();\n\t\tconst d1   = this.#v1.domain();\n\t\tconst d2   = this.#v2.domain();\n\t\tconst d3   = this.#v3.domain();\n\n\t\tif (this.#v1.isEmpty() && !this.#v2.isEmpty() && !this.#v3.isEmpty()) {\n\t\t\tfor (const val1 of d1) {\n\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2, val3);\n\t\t\t\tif (s > cd) cd = s;\n\t\t\t\tif (cd === 1) break;\n\t\t\t}\n\t\t} else if (!this.#v1.isEmpty() && this.#v2.isEmpty() && !this.#v3.isEmpty()) {\n\t\t\tfor (const val2 of d2) {\n\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2, val3);\n\t\t\t\tif (s > cd) cd = s;\n\t\t\t\tif (cd === 1) break;\n\t\t\t}\n\t\t} else if (!this.#v1.isEmpty() && !this.#v2.isEmpty() && this.#v3.isEmpty()) {\n\t\t\tfor (const val3 of d3) {\n\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2, val3);\n\t\t\t\tif (s > cd) cd = s;\n\t\t\t\tif (cd === 1) break;\n\t\t\t}\n\n\t\t} else if (this.#v1.isEmpty() && this.#v2.isEmpty() && !this.#v3.isEmpty()) {\n\t\t\tfor (const val1 of d1) {\n\t\t\t\tfor (const val2 of d2) {\n\t\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2, val3);\n\t\t\t\t\tif (s > cd) cd = s;\n\t\t\t\t\tif (cd === 1) break;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (this.#v1.isEmpty() && !this.#v2.isEmpty() && this.#v3.isEmpty()) {\n\t\t\tfor (const val1 of d1) {\n\t\t\t\tfor (const val3 of d3) {\n\t\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2, val3);\n\t\t\t\t\tif (s > cd) cd = s;\n\t\t\t\t\tif (cd === 1) break;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (!this.#v1.isEmpty() && this.#v2.isEmpty() && this.#v3.isEmpty()) {\n\t\t\tfor (const val2 of d2) {\n\t\t\t\tfor (const val3 of d3) {\n\t\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2, val3);\n\t\t\t\t\tif (s > cd) cd = s;\n\t\t\t\t\tif (cd === 1) break;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (const val1 of d1) {\n\t\t\t\tfor (const val2 of d2) {\n\t\t\t\t\tfor (const val3 of d3) {\n\t\t\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2, val3);\n\t\t\t\t\t\tif (s > cd) cd = s;\n\t\t\t\t\t\tif (cd === 1) break;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn cd;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tlowestConsistencyDegree() {\n\t\tconst sd = this.satisfactionDegree();\n\t\tif (sd !== Constraint.UNDEFINED) {\n\t\t\treturn sd;\n\t\t}\n\t\tlet cd = 1;\n\t\tconst val1 = this.#v1.value();\n\t\tconst val2 = this.#v2.value();\n\t\tconst val3 = this.#v3.value();\n\t\tconst d1   = this.#v1.domain();\n\t\tconst d2   = this.#v2.domain();\n\t\tconst d3   = this.#v3.domain();\n\n\t\tif (this.#v1.isEmpty() && !this.#v2.isEmpty() && !this.#v3.isEmpty()) {\n\t\t\tfor (const val1 of d1) {\n\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2, val3);\n\t\t\t\tif (s < cd) cd = s;\n\t\t\t\tif (cd === 0) break;\n\t\t\t}\n\t\t} else if (!this.#v1.isEmpty() && this.#v2.isEmpty() && !this.#v3.isEmpty()) {\n\t\t\tfor (const val2 of d2) {\n\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2, val3);\n\t\t\t\tif (s < cd) cd = s;\n\t\t\t\tif (cd === 0) break;\n\t\t\t}\n\t\t} else if (!this.#v1.isEmpty() && !this.#v2.isEmpty() && this.#v3.isEmpty()) {\n\t\t\tfor (const val3 of d3) {\n\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2, val3);\n\t\t\t\tif (s < cd) cd = s;\n\t\t\t\tif (cd === 0) break;\n\t\t\t}\n\t\t} else if (this.#v1.isEmpty() && this.#v2.isEmpty() && !this.#v3.isEmpty()) {\n\t\t\tfor (const val1 of d1) {\n\t\t\t\tfor (const val2 of d2) {\n\t\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2, val3);\n\t\t\t\t\tif (s < cd) cd = s;\n\t\t\t\t\tif (cd === 0) break;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (this.#v1.isEmpty() && !this.#v2.isEmpty() && this.#v3.isEmpty()) {\n\t\t\tfor (const val1 of d1) {\n\t\t\t\tfor (const val3 of d3) {\n\t\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2, val3);\n\t\t\t\t\tif (s < cd) cd = s;\n\t\t\t\t\tif (cd === 0) break;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (!this.#v1.isEmpty() && this.#v2.isEmpty() && this.#v3.isEmpty()) {\n\t\t\tfor (const val2 of d2) {\n\t\t\t\tfor (const val3 of d3) {\n\t\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2, val3);\n\t\t\t\t\tif (s < cd) cd = s;\n\t\t\t\t\tif (cd === 0) break;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (const val1 of d1) {\n\t\t\t\tfor (const val2 of d2) {\n\t\t\t\t\tfor (const val3 of d3) {\n\t\t\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2, val3);\n\t\t\t\t\t\tif (s < cd) cd = s;\n\t\t\t\t\t\tif (cd === 0) break;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn cd;\n\t}\n\n}\n\n/**\n * The class represents an n-ary constraint.\n * The constructor is not called directly, since it is created by the Problem.\n *\n * @author Takuto Yanagida\n * @version 2023-04-10\n */\n\nclass ConstraintN extends Constraint {\n\n\t#vars;\n\t#vals;  // For reuse.\n\n\t// Called only from Problem.\n\tconstructor(r, ...vs) {\n\t\tsuper(r);\n\t\tthis.#vars = [...vs];\n\t\tthis.#vals = new Array(this.#vars.length);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tsize() {\n\t\treturn this.#vars.length;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tat(index) {\n\t\treturn this.#vars[index];\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tconstrains(v) {\n\t\treturn this.#vars.includes(v);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tindexOf(v) {\n\t\treturn this.#vars.indexOf(v);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\temptyVariableSize() {\n\t\tlet sum = 0;\n\t\tfor (const v of this.#vars) {\n\t\t\tif (v.isEmpty()) ++sum;\n\t\t}\n\t\treturn sum;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tisDefined() {\n\t\tfor (const v of this.#vars) {\n\t\t\tif (v.isEmpty()) return false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tisSatisfied() {\n\t\tfor (let i = 0; i < this.#vars.length; ++i) {\n\t\t\tif (this.#vars[i].isEmpty()) return -1;\n\t\t\tthis.#vals[i] = this.#vars[i].value();\n\t\t}\n\t\treturn this.crispRelation().isSatisfied(...this.#vals) ? 1 : 0;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tsatisfactionDegree() {\n\t\tfor (let i = 0; i < this.#vars.length; ++i) {\n\t\t\tconst v = this.#vars[i];\n\t\t\tif (v.isEmpty()) return Constraint.UNDEFINED;\n\t\t\tthis.#vals[i] = v.value();\n\t\t}\n\t\treturn this.fuzzyRelation().satisfactionDegree(...this.#vals);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tneighbors() {\n\t\tconst cs = [];\n\t\tfor (const v of this.#vars) {\n\t\t\tfor (let i = 0, I = v.size(); i < I; ++i) {\n\t\t\t\tconst c = v.at(i);\n\t\t\t\tif (c !== this) cs.push(c);\n\t\t\t}\n\t\t}\n\t\treturn cs;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\thighestConsistencyDegree() {\n\t\tconst sd = this.satisfactionDegree();\n\t\tif (sd !== Constraint.UNDEFINED) {\n\t\t\treturn sd;\n\t\t}\n\t\tconst emptyIndices = new Array(this.emptyVariableSize());\n\t\tlet c = 0;\n\n\t\tfor (let i = 0; i < this.#vars.length; ++i) {\n\t\t\tif (this.#vars[i].isEmpty()) {\n\t\t\t\temptyIndices[c++] = i;\n\t\t\t} else {\n\t\t\t\tthis.#vals[i] = this.#vars[i].value();\n\t\t\t}\n\t\t}\n\t\treturn this.checkHCD(emptyIndices, 0, 0);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tlowestConsistencyDegree() {\n\t\tconst sd = this.satisfactionDegree();\n\t\tif (sd !== Constraint.UNDEFINED) {\n\t\t\treturn sd;\n\t\t}\n\t\tconst emptyIndices = new Array(this.emptyVariableSize());\n\t\tlet c = 0;\n\n\t\tfor (let i = 0; i < this.#vars.length; ++i) {\n\t\t\tif (this.#vars[i].isEmpty()) {\n\t\t\t\temptyIndices[c++] = i;\n\t\t\t} else {\n\t\t\t\tthis.#vals[i] = this.#vars[i].value();\n\t\t\t}\n\t\t}\n\t\treturn this.checkLCD(emptyIndices, 0, 1);\n\t}\n\n\tcheckHCD(emptyIndices, currentStep, cd) {\n\t\tconst index = emptyIndices[currentStep];\n\t\tconst d     = this.#vars[index].domain();\n\n\t\tif (currentStep === emptyIndices.length - 1) {\n\t\t\tfor (const val of d) {\n\t\t\t\tthis.#vals[index] = val;\n\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(this.#vals);\n\t\t\t\tif (s > cd) cd = s;\n\t\t\t\tif (cd === 1) break;\n\t\t\t}\n\t\t} else {\n\t\t\tfor (const val of d) {\n\t\t\t\tthis.#vals[index] = val;\n\t\t\t\tcd = this.checkLCD(emptyIndices, currentStep + 1, cd);\n\t\t\t}\n\t\t}\n\t\treturn cd;\n\t}\n\n\tcheckLCD(emptyIndices, currentStep, cd) {\n\t\tconst index = emptyIndices[currentStep];\n\t\tconst d     = this.#vars[index].domain();\n\n\t\tif (currentStep === emptyIndices.length - 1) {\n\t\t\tfor (const val of d) {\n\t\t\t\tthis.#vals[index] = val;\n\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(this.#vals);\n\t\t\t\tif (s < cd) cd = s;\n\t\t\t\tif (cd === 0) break;\n\t\t\t}\n\t\t} else {\n\t\t\tfor (const val of d) {\n\t\t\t\tthis.#vals[index] = val;\n\t\t\t\tcd = this.checkLCD(emptyIndices, currentStep + 1, cd);\n\t\t\t}\n\t\t}\n\t\treturn cd;\n\t}\n\n}\n\n\n/**\n * An abstract class that represents a variable domain.\n * The domain is immutable.\n *\n * @author Takuto Yanagida\n * @version 2023-04-10\n */\n\nclass Domain {\n\n\t/**\n\t * Checks whether the specified value is included as an element of the domain.\n\t *\n\t * @param val A value.\n\t * @return True if the value is included.\n\t */\n\tcontains(val) {}\n\n\t/**\n\t * Gets the index of the specified value. If it does not exist, -1 is returned.\n\t *\n\t * @param val A value.\n\t * @return The index.\n\t */\n\tindexOf(val) {}\n\n\t/**\n\t * Gets the size of the domain, including the pruned elements.\n\t *\n\t * @return The size.\n\t */\n\tsize() {}\n\n\t/**\n\t * Gets the value at the specified index. The retrieved value may have been pruned.\n\t *\n\t * @param index An index.\n\t * @return The value.\n\t */\n\tat(index) {}\n\n\t/**\n\t * Gets the iterator of the values of the domain.\n\t */\n\t[Symbol.iterator]() {}\n\n\t/**\n\t * Gets an arbitrary value, regardless of whether it has been pruned or not.\n\t *\n\t * @return A value.\n\t */\n\trandom() {\n\t\treturn this.at(Math.floor(Math.random() * this.size()));\n\t}\n\n}\n\n/**\n * A variable domain with arbitrary elements.\n *\n * @author Takuto Yanagida\n * @version 2023-04-10\n */\n\nclass DomainArbitrary extends Domain {\n\n\t#vals;\n\n\tconstructor(vals) {\n\t\tsuper();\n\t\tthis.#vals = [...vals];\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tcontains(val) {\n\t\treturn this.#vals.includes(val);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tindexOf(val) {\n\t\treturn this.#vals.indexOf(val);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tsize() {\n\t\treturn this.#vals.length;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tat(index) {\n\t\treturn this.#vals[index];\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\t[Symbol.iterator]() {\n\t\treturn this.#vals[Symbol.iterator]();\n\t}\n\n}\n\n/**\n * A variable domain with contiguous integer elements.\n *\n * @author Takuto Yanagida\n * @version 2023-04-10\n */\n\nclass DomainRanged extends Domain {\n\n\t#min;\n\t#max;\n\n\tconstructor(min, max) {\n\t\tsuper();\n\t\tthis.#min = min | 0;\n\t\tthis.#max = max | 0;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tcontains(val) {\n\t\treturn this.#min <= val && val <= this.#max;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tindexOf(val) {\n\t\treturn (this.#min <= val && val <= this.#max) ? (val - this.#min) : -1;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tsize() {\n\t\treturn this.#max - this.#min + 1;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tat(index) {\n\t\treturn this.#min + index;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\t[Symbol.iterator]() {\n\t\tlet val = this.#min;\n\t\treturn {\n\t\t\tnext: () => (val <= this.#max ? { value: val++, done: false } : { done: true }),\n\t\t};\n\t}\n\n}\n\n\n/**\n * Class that represents a variable.\n *\n * @author Takuto Yanagida\n * @version 2023-04-10\n */\n\nclass Variable extends Element {\n\n\tstatic #INVALID = Number.MIN_VALUE;\n\n\t#owner;\n\t#cons = [];\n\t#dom;\n\t#val  = Variable.#INVALID;\n\n\t// Called only from Problem.\n\tconstructor(owner, d) {\n\t\tsuper();\n\t\tthis.#owner = owner;\n\t\tthis.#dom   = d;\n\t}\n\n\t// Called only from Problem.\n\tconnect(c) {\n\t\tif (this.isConstrainedBy(c)) {\n\t\t\tthrow new IllegalArgumentException();\n\t\t}\n\t\tthis.#cons.push(c);\n\t}\n\n\t// Called only from Problem.\n\tdisconnect(c) {\n\t\tif (!this.isConstrainedBy(c)) {\n\t\t\tthrow new IllegalArgumentException();\n\t\t}\n\t\tthis.#cons = this.#cons.filter(n => n !== c);\n\t}\n\n\t/**\n\t * Assign a value.\n\t * @param value Value.\n\t */\n\tassign(value) {\n\t\tthis.#val = value;  // Do not change val_ except here.\n\t}\n\n\t/**\n\t * Sets the state of the variable to unassigned.\n\t */\n\tclear() {\n\t\tthis.assign(Variable.#INVALID);  // Do not use the invalid value except here and below (isEmpty).\n\t}\n\n\t/**\n\t * Returns whether the value is unassigned or not.\n\t * @return True if unassigned.\n\t */\n\tisEmpty() {\n\t\treturn this.value() === Variable.#INVALID;\n\t}\n\n\t/**\n\t * Assign the domain.\n\t * The variable will be in unassigned state.\n\t * @param d Domain to be assigned.\n\t */\n\tsetDomain(d) {\n\t\tthis.#dom = d;\n\t\tthis.clear();\n\t}\n\n\t/**\n\t * Returns the problem that owns this variable.\n\t * @return Owner.\n\t */\n\towner() {\n\t\treturn this.#owner;\n\t}\n\n\t/**\n\t * Returns the number of associated constraints.\n\t * @return Number of constraints.\n\t */\n\tsize() {\n\t\treturn this.#cons.length;\n\t}\n\n\t/**\n\t * Retrieves the associated constraints by specifying their indices.\n\t * @param index Index.\n\t * @return A constraint.\n\t */\n\tat(index) {\n\t\treturn this.#cons[index];\n\t}\n\n\t/**\n\t * Returns an array containing all the constraints associated with the variable.\n\t * If there are no constraints, returns an empty array.\n\t * @return An array of constraints.\n\t */\n\tconstraints() {\n\t\treturn [...this.#cons];\n\t}\n\n\t/**\n\t * Returns the domain of the variable.\n\t * @return The domain.\n\t */\n\tdomain() {\n\t\treturn this.#dom;\n\t}\n\n\t/**\n\t * Returns whether or not the variable is associated with the specified constraint.\n\t * @param c A constraint.\n\t * @return True if associated.\n\t */\n\tisConstrainedBy(c) {\n\t\treturn this.#cons.includes(c);\n\t}\n\n\t/**\n\t * Returns a string representation.\n\t * @return A string representation.\n\t */\n\ttoString() {\n\t\treturn `x${this.index()}${this.name() === '' ? '' : `(${this.name()})`} = ${this.isEmpty() ? '<empty>' : this.value()}`;\n\t}\n\n\t/**\n\t * Returns the value of the variable.\n\t * @returnThe value of the variable.\n\t */\n\tvalue() {\n\t\treturn this.#val;\n\t}\n\n\t/**\n\t * Returns the set of variables connected via the associated constraints.\n\t * @return An array of variables\n\t */\n\tneighbors() {\n\t\tconst vs = [];\n\t\tfor (const c of this.#cons) {\n\t\t\tfor(let j = 0, m = c.size(); j < m; j += 1) {\n\t\t\t\tconst v = c.at(j);\n\t\t\t\tif (v !== this) vs.push(v);\n\t\t\t}\n\t\t}\n\t\treturn vs;\n\t}\n\n}\n\n\n/**\n * The class represents a constraint satisfaction problem.\n *\n * @author Takuto Yanagida\n * @version 2023-04-07\n */\n\nclass Problem {\n\n\t_isFuzzy = false;\n\t_vars    = [];\n\t_cons    = [];\n\n\t// Generation Methods --------\n\n\t/**\n\t * Adds a variable to this problem.\n\t * @param Variable v A variable.\n\t */\n\taddVariable(v) {\n\t\tv.setIndex(this._vars.length);\n\t\tthis._vars.push(v);\n\t}\n\n\t/**\n\t * Generates a domain.\n\t * @param args {\n\t *   @type Array 'values' Multiple values.\n\t *\n\t *   @type Number 'min' Minimum value.\n\t *   @type Number 'max' Maximum value.\n\t * }\n\t * @return A domain.\n\t */\n\tcreateDomain(args) {\n\t\tif (args.values) {\n\t\t\treturn new DomainArbitrary(args.values);\n\t\t} else if ('min' in args && 'max' in args) {\n\t\t\treturn new DomainRanged(args.min, args.max);\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Generates a variable.\n\t * @param Array args {\n\t *   @type string 'name'   Display name.\n\t *   @type Domain 'domain' A domain.\n\t *   @type *      'value'  A value.\n\t * }\n\t * @return A variable.\n\t */\n\tcreateVariable(args) {\n\t\tif (args.value && !args.domain.contains(args.value)) {\n\t\t\tthrow new Error();\n\t\t}\n\t\tconst v = new Variable(this, args.domain);\n\t\tthis.addVariable(v);\n\t\tif (args.name) v.setName(args.name);\n\t\tif (args.value) v.assign(args.value);\n\t\treturn v;\n\t}\n\n\t/**\n\t * Generates a constraint.\n\t * @param Array args {\n\t *   @type string   'name'      Display name.\n\t *   @type Array    'variables' Variables.\n\t *   @type Relation 'relation'  A relation.\n\t * }\n\t * @return A constraint.\n\t */\n\tcreateConstraint(args) {\n\t\tfor (const v of args.variables) {\n\t\t\tif (v.owner() !== this) return null;\n\t\t}\n\t\tlet c;\n\t\tif (args.variables.length === 1)      c = new Constraint1(args.relation, ...args.variables);\n\t\telse if (args.variables.length === 2) c = new Constraint2(args.relation, ...args.variables);\n\t\telse if (args.variables.length === 3) c = new Constraint3(args.relation, ...args.variables);\n\t\telse c = new ConstraintN(args.relation, args.variables);\n\t\tc.setIndex(this._cons.length);\n\t\tthis._cons.push(c);\n\t\tfor (const v of args.variables) v.connect(c);\n\t\tif (c.isFuzzy()) this._isFuzzy = true;\n\t\tif (args.name) c.setName(args.name);\n\t\treturn c;\n\t}\n\n\t//  Modification Methods --------\n\n\t/**\n\t * Remove the constraint.\n\t * @param c Constraints to be removed.\n\t */\n\tremoveConstraint(c) {\n\t\tconst index = this._cons.indexOf(c);\n\t\tthis._cons.remove(c);\n\t\tfor (let i = index; i < this._cons.length; ++i) {\n\t\t\tthis._cons[i].setIndex(i);\n\t\t}\n\t\tfor (let i = 0; i < c.size(); ++i) {\n\t\t\tc.at(i).disconnect(c);\n\t\t}\n\t\tthis._isFuzzy = false;\n\t\tfor (let i = 0, n = this._cons.length; i < n; ++i) {\n\t\t\tif (this._cons[i].isFuzzy()) {\n\t\t\t\tthis._isFuzzy = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Changes the status of all variables to unassigned.\n\t */\n\tclearAllVariables() {\n\t\tfor (const v of this._vars) {\n\t\t\tv.clear();\n\t\t}\n\t}\n\n\t/**\n\t * Reverse the order of variables.\n\t * The index of each variable is reassigned.\n\t */\n\treverseVariables() {\n\t\tthis._vars.reverse();\n\t\tfor (let i = 0, n = this._vars.length; i < n; ++i) {\n\t\t\tthis._vars[i].setIndex(i);\n\t\t}\n\t}\n\n\t/**\n\t * Sorts variables using a specified comparator.\n\t * The index of each variable is reassigned.\n\t * @param comparator A comparator.\n\t */\n\tsortVariables(comparator) {\n\t\tthis._vars.sort(comparator);\n\t\tfor (let i = 0, n = this._vars.length; i < n; ++i) {\n\t\t\tthis._vars[i].setIndex(i);\n\t\t}\n\t}\n\n\t// Methods for Variables --------\n\n\t/**\n\t * Returns the number of variables in the problem.\n\t * @return Number of variables\n\t */\n\tvariableSize() {\n\t\treturn this._vars.length;\n\t}\n\n\t/**\n\t * Returns a variable by index.\n\t * @param index Index (0 <= index < getVariableSize()).\n\t * @return A variable\n\t */\n\tvariableAt(index) {\n\t\treturn this._vars[index];\n\t}\n\n\t/**\n\t * Returns a variable by name.\n\t * @param name Name.\n\t * @return A variable.\n\t */\n\tvariableOf(name) {\n\t\tfor (const v of this._vars) {\n\t\t\tif (v.name() === name) return v;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns whether the variable is contained or not.\n\t * @param v A variable.\n\t * @return True if contained.\n\t */\n\thasVariable(v) {\n\t\treturn this._vars.includes(v);\n\t}\n\n\t/**\n\t * Returns the list of variables.\n\t * The returned list is not allowed to be modified.\n\t * @return The variable list.\n\t */\n\tvariables() {\n\t\treturn this._vars;\n\t}\n\n\t// Methods for Constraints --------\n\n\t/**\n\t * Gets the number of constraints in the problem.\n\t * @return Number of constraints\n\t */\n\tconstraintSize() {\n\t\treturn this._cons.length;\n\t}\n\n\t/**\n\t * Returns a constraint with an index.\n\t * @param index Index (0 <= index < constraintSize()).\n\t * @return A constraint.\n\t */\n\tconstraintAt(index) {\n\t\treturn this._cons[index];\n\t}\n\n\t/**\n\t * Returns a constraint by name.\n\t * @param name Name.\n\t * @return A constraint.\n\t */\n\tconstraintOf(name) {\n\t\tfor (const c of this._cons) {\n\t\t\tif (c.name() === name) return c;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns whether the constraint is contained or not.\n\t * @param c A constraint\n\t * @return True if contained.\n\t */\n\thasConstraint(c) {\n\t\treturn this._cons.includes(c);\n\t}\n\n\t/**\n\t * Returns the list of constraint.\n\t * The returned list is not allowed to be modified.\n\t * @return The constraint list.\n\t */\n\tconstraints() {\n\t\treturn this._cons;\n\t}\n\n\t/**\n\t * Gets the constraints that exist between the specified variables.\n\t * Returns an empty array if no constraints exist.\n\t * If there are multiple constraints between two variables (including the case of n-ary constraints (2 < n)), they will be included in the return array.\n\t * @param v1 Variable 1\n\t * @param v2 Variable 2\n\t * @return Constraints.\n\t */\n\tconstraintsBetween(v1, v2) {\n\t\tconst cs = [];\n\t\tfor (let i = 0, n = v1.size(); i < n; ++i) {\n\t\t\tconst c = v1.at(i);\n\t\t\tif (c.constrains(v2)) cs.push(c);\n\t\t}\n\t}\n\n\t/**\n\t * Finds the set of worst satisfiable constraints in a fuzzy constraint satisfaction problem.\n\t * @return Array of constraints and worst satisfaction degree.\n\t */\n\tconstraintsWithWorstSatisfactionDegree() {\n\t\tconst cs = [];\n\t\tlet cur = 1;\n\t\tfor (const c of this._cons) {\n\t\t\tconst s = c.satisfactionDegree();\n\t\t\tif (s < cur) {\n\t\t\t\tcur = s;\n\t\t\t\tcs.length = 0;\n\t\t\t\tcs.push(c);\n\t\t\t} else if (s - cur < Number.MIN_VALUE * 10) {\n\t\t\t\tcs.push(c);\n\t\t\t}\n\t\t}\n\t\treturn [cs, cur];\n\t}\n\n\t// State acquisition methods --------\n\n\t/**\n\t * Returns the worst satisfaction degree for the constraints contained in the fuzzy constraint satisfaction problem.\n\t * If the degree cannot be determined because the variable has not yet been assigned a value or for some other reason, -1 is returned.\n\t * @return Worst satisfaction degree.\n\t */\n\tworstSatisfactionDegree() {\n\t\tlet cs = 1;\n\t\tfor (const c of this._cons) {\n\t\t\tconst s = c.satisfactionDegree();\n\t\t\tif (s === Constraint.UNDEFINED) return Constraint.UNDEFINED;\n\t\t\tif (s < cs) cs = s;\n\t\t}\n\t\treturn cs;\n\t}\n\n\t/**\n\t * Gets the average of satisfaction degrees of the fuzzy constraints.\n\t * @return Average of satisfaction degrees.\n\t */\n\taverageSatisfactionDegree() {\n\t\tlet ave = 0;\n\t\tfor (const c of this._cons) {\n\t\t\tave += c.satisfactionDegree();\n\t\t}\n\t\tave = ave / this._cons.length;\n\t\treturn ave;\n\t}\n\n\t/**\n\t * Returns the number of variables in the problem that have not been assigned a value.\n\t * @return Number of variables with no value assigned.\n\t */\n\temptyVariableSize() {\n\t\tlet num = 0;\n\t\tfor (const v of this._vars) {\n\t\t\tif (v.isEmpty()) num++;\n\t\t}\n\t\treturn num;\n\t}\n\n\t/**\n\t * Gets the constraint density (number of constraints/number of variables).\n\t * @return Constraint density.\n\t */\n\tconstraintDensity() {\n\t\treturn this.constraintSize() / this.variableSize();\n\t}\n\n\t/**\n\t * Returns whether the constraint satisfaction problem has any variables with empty domain.\n\t * @return True if it exists.\n\t */\n\thasEmptyDomain() {\n\t\tfor (const v of this._vars) {\n\t\t\tif (v.domain().size() === 0) return true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns whether the problem is a fuzzy constraint satisfaction problem, i.e., whether it contains fuzzy constraints.\n\t * @return True if it is a fuzzy constraint satisfaction problem.\n\t */\n\tisFuzzy() {\n\t\treturn this._isFuzzy;\n\t}\n\n}\n\n/**\n * The class represents a crisp constraint satisfaction problem.\n *\n * @author Takuto Yanagida\n * @version 2023-04-10\n */\n\nclass CrispProblem extends Problem {\n\n\t/**\n\t * Generates a crisp constraint.\n\t * @param Array args {\n\t *   @type string   'name'      Display name.\n\t *   @type Array    'variables' Variables.\n\t *   @type Relation 'relation'  A relation.\n\t * }\n\t * @return A constraint.\n\t */\n\tcreateConstraint(args) {\n\t\tif(args.relation instanceof FuzzyRelation) throw new Error();\n\t\treturn super.createConstraint(args);\n\t}\n\n\t/**\n\t * Returns whether the problem is a fuzzy constraint satisfaction problem, i.e., whether it contains fuzzy constraints.\n\t * @return Always returns false.\n\t */\n\tisFuzzy() {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns the rate of constraints that are satisfied out of all constraints.\n\t * @return Rate of satisfied constraints.\n\t */\n\tsatisfiedConstraintRate() {\n\t\treturn this.satisfiedConstraintSize() / this._cons.length;\n\t}\n\n\t/**\n\t * Returns the number of satisfied constraints.\n\t * Undefined constraints are ignored.\n\t * @return Number of satisfied constraints.\n\t */\n\tsatisfiedConstraintSize() {\n\t\tlet count = 0;\n\t\tfor (let i = 0; i < this._cons.length; ++i) {\n\t\t\tif (this._cons[i].isSatisfied() === 1) ++count;\n\t\t}\n\t\treturn count;\n\t}\n\n\t/**\n\t * Returns a list of violating constraints.\n\t * Undefined constraints are ignored.\n\t * @return Array of constraints.\n\t */\n\tviolatingConstraints() {\n\t\tconst cs = [];\n\t\tfor (const c of this._cons) {\n\t\t\tif (c.isSatisfied() === 0) cs.push(c);\n\t\t}\n\t\treturn cs;\n\t}\n\n\t/**\n\t * Returns the number of violating constraints.\n\t * Undefined constraints are ignored.\n\t * @return Number of violating constraints.\n\t */\n\tviolatingConstraintSize() {\n\t\tlet count = 0;\n\t\tfor (const c of this._cons) {\n\t\t\tif (c.isSatisfied() === 0) ++count;\n\t\t}\n\t\treturn count;\n\t}\n\n}\n\n"]}