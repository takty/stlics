{"version":3,"sources":["problem.js"],"names":["Element","index","name","userObject","solverObject","setIndex","this","setName","Relation","CrispRelation","isSatisfied","vals","Exception","asFuzzyRelation","FuzzyRelationView","CrispTabledRelation","elms","doms","mul","constructor","Array","length","m","i","size","indexOf","CrispRelationFunction","fn","super","FuzzyRelation","satisfactionDegree","asCrispRelation","CrispRelationView","FuzzyTabledRelation","FuzzyRelationFunction","that","Constraint","static","rel","r","crispRelation","fuzzyRelation","isFuzzy","toString","s","UNDEFINED","at","Symbol","iterator","has","v","emptyVariableSize","isDefined","neighbors","highestConsistencyDegree","lowestConsistencyDegree","Constraint1","vars","IndexOutOfBoundsException","isEmpty","value","cs","c","push","sd","cd","val","domain","Constraint2","v1","v2","sum","val1","val2","d1","d2","Constraint3","v3","val3","d3","ConstraintN","vs","includes","emptyIndices","checkHCD","checkLCD","currentStep","d","Domain","contains","random","Math","floor","DomainArbitrary","DomainRanged","min","max","next","done","Variable","Number","MIN_VALUE","owner","dom","INVALID","cons","connect","IllegalArgumentException","disconnect","filter","n","assign","clear","setDomain","j","Problem","_isFuzzy","_vars","_cons","addVariable","createDomain","args","values","createVariable","Error","createConstraint","variables","relation","removeConstraint","remove","clearAllVariables","reverseVariables","reverse","sortVariables","comparator","sort","variableSize","variableAt","variableOf","hasVariable","constraintSize","constraintAt","constraintOf","hasConstraint","constraints","constraintsBetween","constraintsWithWorstSatisfactionDegree","cur","worstSatisfactionDegree","averageSatisfactionDegree","ave","num","constraintDensity","hasEmptyDomain","CrispProblem","satisfiedConstraintRate","satisfiedConstraintSize","count","violatingConstraints","violatingConstraintSize"],"mappings":"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","file":"problem.min.js","sourcesContent":["/**\n * The common class of variables and constraints.\n *\n * @author Takuto Yanagida\n * @version 2022-08-15\n */\n\nclass Element {\n\n\t#index = -1;\n\t#name  = '';\n\n\t/**\n\t * It is used when the user wishes to associate an arbitrary object with each element.\n\t */\n\tuserObject = null;\n\n\t/**\n\t * Used when the solver wants to associate an arbitrary object with each element.\n\t */\n\tsolverObject = null;\n\n\t// Called only from Problem.\n\tsetIndex(index) {\n\t\tthis.#index = index;\n\t}\n\n\t/**\n\t * Sets the name.\n\t *\n\t * @param name String representing the name.\n\t */\n\tsetName(name) {\n\t\tthis.#name = name;\n\t}\n\n\t/**\n\t * Get the index on the owned problem.\n\t * Each variable and constraint is assigned a serial number as an index, which is used to access it through the problem.\n\t *\n\t * @return Integer value representing the index.\n\t */\n\tindex() {\n\t\treturn this.#index;\n\t}\n\n\t/**\n\t * Gets the name.\n\t *\n\t * @return String representing the name.\n\t */\n\tname() {\n\t\treturn this.#name;\n\t}\n\n}\n\n\n/**\n * An interface that represents the relationship between variables.\n * Use CrispRelation or FuzzyRelation class that implement this interface.\n *\n * @author Takuto Yanagida\n * @version 2023-03-25\n */\n\nclass Relation {\n\n}\n\n/**\n * The class represents crisp relationships between variables.\n *\n * @author Takuto Yanagida\n * @version 2023-03-25\n */\n\nclass CrispRelation extends Relation {\n\n\t/**\n\t * Gets whether or not the relation is satisfied in this crisp relation.\n\t * @param vals Values of each variable\n\t * @return Whether or not it is satisfied.\n\t */\n\tisSatisfied(...vals) {\n\t\tthrow new Exception();\n\t}\n\n\t/**\n\t * Returns a view as a fuzzy relation.\n\t * @return A fuzzy relation.\n\t */\n\tasFuzzyRelation() {\n\t\treturn new FuzzyRelationView(this);\n\t}\n\n}\n\n/**\n * This class represents crisp relationships by table.\n *\n * @author Takuto YANAGIDA\n * @version 2023-03-26\n */\n\nclass CrispTabledRelation extends CrispRelation {\n\n\t#elms;\n\t#doms;\n\t#mul;\n\n\tconstructor(elms, doms) {\n\t\tthis.#elms = [...elms];\n\t\tthis.#doms = [...doms];\n\t\tthis.#mul  = new Array(doms.length);\n\n\t\tlet m = 1;\n\t\tfor (let i = this.#mul.length - 1; i >= 0; --i) {\n\t\t\tthis.#mul[i] = m;\n\t\t\tm *= doms[i].size();\n\t\t}\n\t}\n\n\t/**\n\t * Gets whether or not the relation is satisfied in this crisp relation.\n\t * @param vals Values of each variable\n\t * @return Whether or not it is satisfied.\n\t */\n\tisSatisfied(...vals) {\n\t\tif (this.#mul.length !== vals.length) {\n\t\t\tthrow new Exception();\n\t\t}\n\t\tlet index = 0;\n\t\tfor (let i = 0; i < this.#mul.length; ++i) {\n\t\t\tindex += this.#mul[i] * this.#doms[i].indexOf(vals[i]);\n\t\t}\n\t\treturn this.#elms[index];\n\t}\n\n}\n\n/**\n * Crisp relations defined by functions.\n *\n * @author Takuto Yanagida\n * @version 2023-04-04\n */\n\nclass CrispRelationFunction extends CrispRelation {\n\n\t#fn;\n\n\tconstructor(fn) {\n\t\tsuper();\n\t\tthis.#fn = fn;\n\t}\n\n\t/**\n\t * Gets whether or not the relation is satisfied in this crisp relation.\n\t * @param vals Values of each variable\n\t * @return Whether or not it is satisfied.\n\t */\n\tisSatisfied(...vals) {\n\t\treturn this.#fn(...vals);\n\t}\n\n}\n\n/**\n * The class represents fuzzy relationships between variables.\n *\n * @author Takuto Yanagida\n * @version 2023-03-25\n */\n\nclass FuzzyRelation extends Relation {\n\n\t/**\n\t * Gets the satisfaction degree in this fuzzy relation.\n\t * @param vals Values of each variable\n\t * @return A satisfaction degree d (0 <= d <= 1).\n\t */\n\tsatisfactionDegree(...vals) {\n\t\tthrow new Exception();\n\t}\n\n\t/**\n\t * Returns a view as a crisp relation.\n\t * @return A crisp relation.\n\t */\n\tasCrispRelation() {\n\t\treturn new CrispRelationView(this);\n\t}\n\n}\n\n/**\n * This class represents fuzzy relationships by table.\n *\n * @author Takuto YANAGIDA\n * @version 2023-03-26\n */\n\nclass FuzzyTabledRelation extends FuzzyRelation {\n\n\t#elms;\n\t#doms;\n\t#mul;\n\n\tconstructor(elms, doms) {\n\t\tthis.#elms = [...elms];\n\t\tthis.#doms = [...doms];\n\t\tthis.#mul  = new Array(doms.length);\n\n\t\tlet m = 1;\n\t\tfor (let i = this.#mul.length - 1; i >= 0; --i) {\n\t\t\tthis.#mul[i] = m;\n\t\t\tm *= doms[i].size();\n\t\t}\n\t}\n\n\t/**\n\t * Gets the satisfaction degree in this fuzzy relation.\n\t * @param vals Values of each variable\n\t * @return A satisfaction degree d (0 <= d <= 1).\n\t */\n\tsatisfactionDegree(...vals) {\n\t\tif (this.#mul.length !== vals.length) {\n\t\t\tthrow new Exception();\n\t\t}\n\t\tlet index = 0;\n\t\tfor (let i = 0; i < this.#mul.length; ++i) {\n\t\t\tindex += this.#mul[i] * this.#doms[i].indexOf(vals[i]);\n\t\t}\n\t\treturn this.#elms[index];\n\t}\n\n}\n\n/**\n * Fuzzy relations defined by functions.\n *\n * @author Takuto Yanagida\n * @version 2023-04-04\n */\n\nclass FuzzyRelationFunction extends FuzzyRelation {\n\n\t#fn;\n\n\tconstructor(fn) {\n\t\tsuper();\n\t\tthis.#fn = fn;\n\t}\n\n\t/**\n\t * Gets the satisfaction degree in this fuzzy relation.\n\t * @param vals Values of each variable\n\t * @return A satisfaction degree d (0 <= d <= 1).\n\t */\n\tsatisfactionDegree(...vals) {\n\t\treturn this.#fn(...vals);\n\t}\n\n}\n\n/**\n * View of relations.\n *\n * @author Takuto Yanagida\n * @version 2023-03-25\n */\n\nclass CrispRelationView extends CrispRelation {\n\n\tconstructor(that) {\n\t\tthis.that = that;\n\t}\n\n\tisSatisfied(...vals) {\n\t\treturn this.that.satisfactionDegree(vals) === 1;\n\t}\n\n}\n\nclass FuzzyRelationView extends FuzzyRelation {\n\n\tconstructor(that) {\n\t\tthis.that = that;\n\t}\n\n\tsatisfactionDegree(...vals) {\n\t\treturn this.that.isSatisfied(vals) ? 1 : 0;\n\t}\n\n}\n\n\n/**\n * The class represents a constraint.\n *\n * @author Takuto Yanagida\n * @version 2023-04-11\n */\n\nclass Constraint extends Element {\n\n\t/**\n\t * The constant indicating that the satisfaction degree is not defined.\n\t */\n\tstatic UNDEFINED = -1;\n\n\trel;\n\n\t// Called only from Problem.\n\tconstructor(r) {\n\t\tsuper();\n\t\tthis.rel = r;\n\t}\n\n\t/**\n\t * Returns the crisp relation between variables.\n\t * @return Relation.\n\t */\n\tcrispRelation() {\n\t\treturn this.rel;\n\t}\n\n\t/**\n\t * Returns the fuzzy relation between variables.\n\t * @return Relation.\n\t */\n\tfuzzyRelation() {\n\t\treturn this.rel;\n\t}\n\n\t/**\n\t * Returns whether this is a fuzzy constraint.\n\t * @return True if it is fuzzy constraint.\n\t */\n\tisFuzzy() {\n\t\treturn this.rel instanceof FuzzyRelation;\n\t}\n\n\t/**\n\t * Returns a string representation.\n\t * @return A string representation.\n\t */\n\ttoString() {\n\t\tconst s = this.satisfactionDegree();\n\t\treturn `c${this.index()}${this.name() === '' ? '' : `(${this.name()})`} = ${s === Constraint.UNDEFINED ? 'UNDEFINED' : s}`;\n\t}\n\n\t/**\n\t * Returns the order of the constraint, i.e., the number of (associated) variables in the scope.\n\t * @return Order.\n\t */\n\tsize() {}\n\n\t/**\n\t * Gets the associated variable by specifying its index.\n\t * @param index Index.\n\t * @return A variable.\n\t */\n\tat(index) {}\n\n\t/**\n\t * Gets the iterator of the associated variables.\n\t */\n\t[Symbol.iterator]() {}\n\n\t/**\n\t * Returns whether the specified variable is associated or not.\n\t * @param v A variable.\n\t * @return True if it is associated.\n\t */\n\thas(v) {}\n\n\t/**\n\t * Gets the index of a specified variable.\n\t * If not found, returns -1.\n\t * @param v A variable.\n\t * @return Index.\n\t */\n\tindexOf(v) {}\n\n\t/**\n\t * Returns the number of scope variables that have not been assigned a value.\n\t * @return Number of variables\n\t */\n\temptyVariableSize() {}\n\n\t/**\n\t * Returns whether or not the satisfaction (degree) is defined.\n\t * Satisfaction (degree) is defined when all associated variables have values assigned to them.\n\t * @return True if it is defined.\n\t */\n\tisDefined() {}\n\n\t/**\n\t * Returns whether or not this constraint is satisfied.\n\t * @return 1 if satisfied, 0 if not, UNDEFINED if undefined\n\t */\n\tisSatisfied() {}\n\n\t/**\n\t * Gets the current satisfaction degree.\n\t * @return Degree 0 - 1, UNDEFINED if undefined.\n\t */\n\tsatisfactionDegree() {}\n\n\t/**\n\t * Returns the set of constraints connected via the associated variables.\n\t * @return A set of constraints.\n\t */\n\tneighbors() {}\n\n\t/**\n\t * Calculates the highest consistency degree.\n\t * That is, it seeks the highest satisfaction degree of the possible combinations of variable assignments for a given constraint.\n\t * When all associated variables have been assigned values, it returns the same value as getSatisfactionDegree().\n\t * @return The highest consistency degree.\n\t */\n\thighestConsistencyDegree() {}\n\n\t/**\n\t * Calculates the lowest consistency degree.\n\t * That is, it seeks the lowest satisfaction degree of the possible combinations of variable assignments for a given constraint.\n\t * When all associated variables have been assigned values, it returns the same value as getSatisfactionDegree().\n\t * @return The lowest consistency degree.\n\t */\n\tlowestConsistencyDegree() {}\n\n}\n\n/**\n * The class represents an unary constraint.\n * The constructor is not called directly, since it is created by the Problem.\n *\n * @author Takuto Yanagida\n * @version 2023-04-11\n */\n\nclass Constraint1 extends Constraint {\n\n\t#vars = [null];\n\n\t// Called only from Problem.\n\tconstructor(r, v) {\n\t\tsuper(r);\n\t\tthis.#vars[0] = v;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tsize() {\n\t\treturn 1;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tat(index) {\n\t\tif (index === 0) return this.#vars[0];\n\t\tthrow new IndexOutOfBoundsException();\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\t[Symbol.iterator]() {\n\t\treturn this.#vars[Symbol.iterator]();\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\thas(v) {\n\t\treturn v === this.#vars[0];\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tindexOf(v) {\n\t\treturn (v === this.#vars[0]) ? 0 : -1;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\temptyVariableSize() {\n\t\treturn this.#vars[0].isEmpty() ? 1 : 0;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tisDefined() {\n\t\treturn !this.#vars[0].isEmpty();\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tisSatisfied() {\n\t\tif (this.#vars[0].isEmpty()) return Constraint.UNDEFINED;\n\t\treturn this.crispRelation().isSatisfied(this.#vars[0].value()) ? 1 : 0;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tsatisfactionDegree() {\n\t\tif (this.#vars[0].isEmpty()) return Constraint.UNDEFINED;\n\t\treturn this.fuzzyRelation().satisfactionDegree(this.#vars[0].value());\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tneighbors() {\n\t\tconst cs = [];\n\t\tfor (const c of this.#vars[0]) {\n\t\t\tif (c !== this) cs.push(c);\n\t\t}\n\t\treturn cs;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\thighestConsistencyDegree() {\n\t\tconst sd = this.satisfactionDegree();\n\t\tif (sd !== Constraint.UNDEFINED) {\n\t\t\treturn sd;\n\t\t}\n\t\tlet cd = 0;\n\n\t\tfor (const val of this.#vars[0].domain()) {\n\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val);\n\t\t\tif (s > cd) cd = s;\n\t\t\tif (cd === 1) break;\n\t\t}\n\t\treturn cd;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tlowestConsistencyDegree() {\n\t\tconst sd = this.satisfactionDegree();\n\t\tif (sd !== Constraint.UNDEFINED) {\n\t\t\treturn sd;\n\t\t}\n\t\tlet cd = 1;\n\n\t\tfor (const val of this.#vars[0].domain()) {\n\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val);\n\t\t\tif (s < cd) cd = s;\n\t\t\tif (cd === 0) break;\n\t\t}\n\t\treturn cd;\n\t}\n\n}\n\n/**\n * The class represents an binary constraint.\n * The constructor is not called directly, since it is created by the Problem.\n *\n * @author Takuto Yanagida\n * @version 2023-04-11\n */\n\nclass Constraint2 extends Constraint {\n\n\t#vars = [null, null];\n\n\t// Called only from Problem.\n\tconstructor(r, v1, v2) {\n\t\tsuper(r);\n\t\tthis.#vars[0] = v1;\n\t\tthis.#vars[1] = v2;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tsize() {\n\t\treturn 2;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tat(index) {\n\t\tif (index === 0) return this.#vars[0];\n\t\tif (index === 1) return this.#vars[1];\n\t\tthrow new IndexOutOfBoundsException();\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\t[Symbol.iterator]() {\n\t\treturn this.#vars[Symbol.iterator]();\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\thas(v) {\n\t\treturn this.#vars[0] === v || this.#vars[1] === v;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tindexOf(v) {\n\t\tif (v === this.#vars[0]) return 0;\n\t\tif (v === this.#vars[1]) return 1;\n\t\treturn -1;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\temptyVariableSize() {\n\t\tlet sum = 0;\n\t\tif (this.#vars[0].isEmpty()) ++sum;\n\t\tif (this.#vars[1].isEmpty()) ++sum;\n\t\treturn sum;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tisDefined() {\n\t\treturn !this.#vars[0].isEmpty() && !this.#vars[1].isEmpty();\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tisSatisfied() {\n\t\tif (this.#vars[0].isEmpty() || this.#vars[1].isEmpty()) return Constraint.UNDEFINED;\n\t\treturn this.crispRelation().isSatisfied(this.#vars[0].value(), this.#vars[1].value()) ? 1 : 0;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tsatisfactionDegree() {\n\t\tif (this.#vars[0].isEmpty() || this.#vars[1].isEmpty()) return Constraint.UNDEFINED;\n\t\treturn this.fuzzyRelation().satisfactionDegree(this.#vars[0].value(), this.#vars[1].value());\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tneighbors() {\n\t\tconst cs = [];\n\t\tfor (const c of this.#vars[0]) {\n\t\t\tif (c !== this) cs.push(c);\n\t\t}\n\t\tfor (const c of this.#vars[1]) {\n\t\t\tif (c !== this) cs.push(c);\n\t\t}\n\t\treturn cs;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\thighestConsistencyDegree() {\n\t\tconst sd = this.satisfactionDegree();\n\t\tif (sd !== Constraint.UNDEFINED) {\n\t\t\treturn sd;\n\t\t}\n\t\tlet cd = 0;\n\t\tconst val1 = this.#vars[0].value();\n\t\tconst val2 = this.#vars[1].value();\n\t\tconst d1   = this.#vars[0].domain();\n\t\tconst d2   = this.#vars[1].domain();\n\n\t\tif(this.#vars[0].isEmpty() && !this.#vars[1].isEmpty()) {\n\t\t\tfor (const val1 of d1) {\n\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2);\n\t\t\t\tif (s > cd) cd = s;\n\t\t\t\tif (cd === 1) break;\n\t\t\t}\n\t\t} else if (!this.#vars[0].isEmpty() && this.#vars[1].isEmpty()) {\n\t\t\tfor (const val2 of d2) {\n\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2);\n\t\t\t\tif (s > cd) cd = s;\n\t\t\t\tif (cd === 1) break;\n\t\t\t}\n\t\t} else {\n\t\t\tfor (const val1 of d1) {\n\t\t\t\tfor (const val2 of d2) {\n\t\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2);\n\t\t\t\t\tif (s > cd) cd = s;\n\t\t\t\t\tif (cd === 1) break;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn cd;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tlowestConsistencyDegree() {\n\t\tconst sd = this.satisfactionDegree();\n\t\tif(sd !== Constraint.UNDEFINED) {\n\t\t\treturn sd;\n\t\t}\n\t\tlet cd = 1;\n\t\tconst val1 = this.#vars[0].value();\n\t\tconst val2 = this.#vars[1].value();\n\t\tconst d1   = this.#vars[0].domain();\n\t\tconst d2   = this.#vars[1].domain();\n\n\t\tif (this.#vars[0].isEmpty() && !this.#vars[1].isEmpty()) {\n\t\t\tfor (const val1 of d1) {\n\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2);\n\t\t\t\tif (s < cd) cd = s;\n\t\t\t\tif (cd === 0) break;\n\t\t\t}\n\t\t} else if (!this.#vars[0].isEmpty() && this.#vars[1].isEmpty()) {\n\t\t\tfor (const val2 of d2) {\n\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2);\n\t\t\t\tif (s < cd) cd = s;\n\t\t\t\tif (cd === 0) break;\n\t\t\t}\n\t\t} else {\n\t\t\tfor (const val1 of d1) {\n\t\t\t\tfor (const val2 of d2) {\n\t\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2);\n\t\t\t\t\tif (s < cd) cd = s;\n\t\t\t\t\tif (cd === 0) break;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn cd;\n\t}\n\n}\n\n/**\n * The class represents an 3-ary constraint.\n * The constructor is not called directly, since it is created by the Problem.\n *\n * @author Takuto Yanagida\n * @version 2023-04-11\n */\n\nclass Constraint3 extends Constraint {\n\n\t#vars = [null, null, null];\n\n\t// Called only from Problem.\n\tconstructor(r, v1, v2, v3) {\n\t\tsuper(r);\n\t\tthis.#vars[0] = v1;\n\t\tthis.#vars[1] = v2;\n\t\tthis.#vars[2] = v3;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tsize() {\n\t\treturn 3;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tat(index) {\n\t\tif (index === 0) return this.#vars[0];\n\t\tif (index === 1) return this.#vars[1];\n\t\tif (index === 2) return this.#vars[2];\n\t\tthrow new IndexOutOfBoundsException();\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\t[Symbol.iterator]() {\n\t\treturn this.#vars[Symbol.iterator]();\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\thas(v) {\n\t\treturn this.#vars[0] === v || this.#vars[1] === v || this.#vars[2] === v;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tindexOf(v) {\n\t\tif (v === this.#vars[0]) return 0;\n\t\tif (v === this.#vars[1]) return 1;\n\t\tif (v === this.#vars[2]) return 2;\n\t\treturn -1;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\temptyVariableSize() {\n\t\tlet sum = 0;\n\t\tif (this.#vars[0].isEmpty()) ++sum;\n\t\tif (this.#vars[1].isEmpty()) ++sum;\n\t\tif (this.#vars[2].isEmpty()) ++sum;\n\t\treturn sum;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tisDefined() {\n\t\treturn !this.#vars[0].isEmpty() && !this.#vars[1].isEmpty() && !this.#vars[2].isEmpty();\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tisSatisfied() {\n\t\tif (this.#vars[0].isEmpty() || this.#vars[1].isEmpty() || this.#vars[2].isEmpty()) return -1;\n\t\treturn this.crispRelation().isSatisfied(this.#vars[0].value(), this.#vars[1].value(), this.#vars[2].value()) ? 1 : 0;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tsatisfactionDegree() {\n\t\tif (this.#vars[0].isEmpty() || this.#vars[1].isEmpty() || this.#vars[2].isEmpty()) return Constraint.UNDEFINED;\n\t\treturn this.fuzzyRelation().satisfactionDegree(this.#vars[0].value(), this.#vars[1].value(), this.#vars[2].value());\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tneighbors() {\n\t\tconst cs = [];\n\t\tfor (const c of this.#vars[0]) {\n\t\t\tif (c !== this) cs.push(c);\n\t\t}\n\t\tfor (const c of this.#vars[1]) {\n\t\t\tif (c !== this) cs.push(c);\n\t\t}\n\t\tfor (const c of this.#vars[2]) {\n\t\t\tif (c !== this) cs.push(c);\n\t\t}\n\t\treturn cs;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\thighestConsistencyDegree() {\n\t\tconst sd = this.satisfactionDegree();\n\t\tif (sd !== Constraint.UNDEFINED) {\n\t\t\treturn sd;\n\t\t}\n\t\tlet cd = 1;\n\t\tconst val1 = this.#vars[0].value();\n\t\tconst val2 = this.#vars[1].value();\n\t\tconst val3 = this.#vars[2].value();\n\t\tconst d1   = this.#vars[0].domain();\n\t\tconst d2   = this.#vars[1].domain();\n\t\tconst d3   = this.#vars[2].domain();\n\n\t\tif (this.#vars[0].isEmpty() && !this.#vars[1].isEmpty() && !this.#vars[2].isEmpty()) {\n\t\t\tfor (const val1 of d1) {\n\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2, val3);\n\t\t\t\tif (s > cd) cd = s;\n\t\t\t\tif (cd === 1) break;\n\t\t\t}\n\t\t} else if (!this.#vars[0].isEmpty() && this.#vars[1].isEmpty() && !this.#vars[2].isEmpty()) {\n\t\t\tfor (const val2 of d2) {\n\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2, val3);\n\t\t\t\tif (s > cd) cd = s;\n\t\t\t\tif (cd === 1) break;\n\t\t\t}\n\t\t} else if (!this.#vars[0].isEmpty() && !this.#vars[1].isEmpty() && this.#vars[2].isEmpty()) {\n\t\t\tfor (const val3 of d3) {\n\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2, val3);\n\t\t\t\tif (s > cd) cd = s;\n\t\t\t\tif (cd === 1) break;\n\t\t\t}\n\n\t\t} else if (this.#vars[0].isEmpty() && this.#vars[1].isEmpty() && !this.#vars[2].isEmpty()) {\n\t\t\tfor (const val1 of d1) {\n\t\t\t\tfor (const val2 of d2) {\n\t\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2, val3);\n\t\t\t\t\tif (s > cd) cd = s;\n\t\t\t\t\tif (cd === 1) break;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (this.#vars[0].isEmpty() && !this.#vars[1].isEmpty() && this.#vars[2].isEmpty()) {\n\t\t\tfor (const val1 of d1) {\n\t\t\t\tfor (const val3 of d3) {\n\t\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2, val3);\n\t\t\t\t\tif (s > cd) cd = s;\n\t\t\t\t\tif (cd === 1) break;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (!this.#vars[0].isEmpty() && this.#vars[1].isEmpty() && this.#vars[2].isEmpty()) {\n\t\t\tfor (const val2 of d2) {\n\t\t\t\tfor (const val3 of d3) {\n\t\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2, val3);\n\t\t\t\t\tif (s > cd) cd = s;\n\t\t\t\t\tif (cd === 1) break;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (const val1 of d1) {\n\t\t\t\tfor (const val2 of d2) {\n\t\t\t\t\tfor (const val3 of d3) {\n\t\t\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2, val3);\n\t\t\t\t\t\tif (s > cd) cd = s;\n\t\t\t\t\t\tif (cd === 1) break;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn cd;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tlowestConsistencyDegree() {\n\t\tconst sd = this.satisfactionDegree();\n\t\tif (sd !== Constraint.UNDEFINED) {\n\t\t\treturn sd;\n\t\t}\n\t\tlet cd = 1;\n\t\tconst val1 = this.#vars[0].value();\n\t\tconst val2 = this.#vars[1].value();\n\t\tconst val3 = this.#vars[2].value();\n\t\tconst d1   = this.#vars[0].domain();\n\t\tconst d2   = this.#vars[1].domain();\n\t\tconst d3   = this.#vars[2].domain();\n\n\t\tif (this.#vars[0].isEmpty() && !this.#vars[1].isEmpty() && !this.#vars[2].isEmpty()) {\n\t\t\tfor (const val1 of d1) {\n\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2, val3);\n\t\t\t\tif (s < cd) cd = s;\n\t\t\t\tif (cd === 0) break;\n\t\t\t}\n\t\t} else if (!this.#vars[0].isEmpty() && this.#vars[1].isEmpty() && !this.#vars[2].isEmpty()) {\n\t\t\tfor (const val2 of d2) {\n\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2, val3);\n\t\t\t\tif (s < cd) cd = s;\n\t\t\t\tif (cd === 0) break;\n\t\t\t}\n\t\t} else if (!this.#vars[0].isEmpty() && !this.#vars[1].isEmpty() && this.#vars[2].isEmpty()) {\n\t\t\tfor (const val3 of d3) {\n\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2, val3);\n\t\t\t\tif (s < cd) cd = s;\n\t\t\t\tif (cd === 0) break;\n\t\t\t}\n\t\t} else if (this.#vars[0].isEmpty() && this.#vars[1].isEmpty() && !this.#vars[2].isEmpty()) {\n\t\t\tfor (const val1 of d1) {\n\t\t\t\tfor (const val2 of d2) {\n\t\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2, val3);\n\t\t\t\t\tif (s < cd) cd = s;\n\t\t\t\t\tif (cd === 0) break;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (this.#vars[0].isEmpty() && !this.#vars[1].isEmpty() && this.#vars[2].isEmpty()) {\n\t\t\tfor (const val1 of d1) {\n\t\t\t\tfor (const val3 of d3) {\n\t\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2, val3);\n\t\t\t\t\tif (s < cd) cd = s;\n\t\t\t\t\tif (cd === 0) break;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (!this.#vars[0].isEmpty() && this.#vars[1].isEmpty() && this.#vars[2].isEmpty()) {\n\t\t\tfor (const val2 of d2) {\n\t\t\t\tfor (const val3 of d3) {\n\t\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2, val3);\n\t\t\t\t\tif (s < cd) cd = s;\n\t\t\t\t\tif (cd === 0) break;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (const val1 of d1) {\n\t\t\t\tfor (const val2 of d2) {\n\t\t\t\t\tfor (const val3 of d3) {\n\t\t\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2, val3);\n\t\t\t\t\t\tif (s < cd) cd = s;\n\t\t\t\t\t\tif (cd === 0) break;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn cd;\n\t}\n\n}\n\n/**\n * The class represents an n-ary constraint.\n * The constructor is not called directly, since it is created by the Problem.\n *\n * @author Takuto Yanagida\n * @version 2023-04-11\n */\n\nclass ConstraintN extends Constraint {\n\n\t#vars;\n\t#vals;  // For reuse.\n\n\t// Called only from Problem.\n\tconstructor(r, ...vs) {\n\t\tsuper(r);\n\t\tthis.#vars = [...vs];\n\t\tthis.#vals = new Array(this.#vars.length);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tsize() {\n\t\treturn this.#vars.length;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tat(index) {\n\t\treturn this.#vars[index];\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\t[Symbol.iterator]() {\n\t\treturn this.#vars[Symbol.iterator]();\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\thas(v) {\n\t\treturn this.#vars.includes(v);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tindexOf(v) {\n\t\treturn this.#vars.indexOf(v);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\temptyVariableSize() {\n\t\tlet sum = 0;\n\t\tfor (const v of this.#vars) {\n\t\t\tif (v.isEmpty()) ++sum;\n\t\t}\n\t\treturn sum;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tisDefined() {\n\t\tfor (const v of this.#vars) {\n\t\t\tif (v.isEmpty()) return false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tisSatisfied() {\n\t\tfor (let i = 0; i < this.#vars.length; ++i) {\n\t\t\tif (this.#vars[i].isEmpty()) return -1;\n\t\t\tthis.#vals[i] = this.#vars[i].value();\n\t\t}\n\t\treturn this.crispRelation().isSatisfied(...this.#vals) ? 1 : 0;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tsatisfactionDegree() {\n\t\tfor (let i = 0; i < this.#vars.length; ++i) {\n\t\t\tconst v = this.#vars[i];\n\t\t\tif (v.isEmpty()) return Constraint.UNDEFINED;\n\t\t\tthis.#vals[i] = v.value();\n\t\t}\n\t\treturn this.fuzzyRelation().satisfactionDegree(...this.#vals);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tneighbors() {\n\t\tconst cs = [];\n\t\tfor (const v of this.#vars) {\n\t\t\tfor (const c of v) {\n\t\t\t\tif (c !== this) cs.push(c);\n\t\t\t}\n\t\t}\n\t\treturn cs;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\thighestConsistencyDegree() {\n\t\tconst sd = this.satisfactionDegree();\n\t\tif (sd !== Constraint.UNDEFINED) {\n\t\t\treturn sd;\n\t\t}\n\t\tconst emptyIndices = new Array(this.emptyVariableSize());\n\t\tlet c = 0;\n\n\t\tfor (let i = 0; i < this.#vars.length; ++i) {\n\t\t\tif (this.#vars[i].isEmpty()) {\n\t\t\t\temptyIndices[c++] = i;\n\t\t\t} else {\n\t\t\t\tthis.#vals[i] = this.#vars[i].value();\n\t\t\t}\n\t\t}\n\t\treturn this.checkHCD(emptyIndices, 0, 0);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tlowestConsistencyDegree() {\n\t\tconst sd = this.satisfactionDegree();\n\t\tif (sd !== Constraint.UNDEFINED) {\n\t\t\treturn sd;\n\t\t}\n\t\tconst emptyIndices = new Array(this.emptyVariableSize());\n\t\tlet c = 0;\n\n\t\tfor (let i = 0; i < this.#vars.length; ++i) {\n\t\t\tif (this.#vars[i].isEmpty()) {\n\t\t\t\temptyIndices[c++] = i;\n\t\t\t} else {\n\t\t\t\tthis.#vals[i] = this.#vars[i].value();\n\t\t\t}\n\t\t}\n\t\treturn this.checkLCD(emptyIndices, 0, 1);\n\t}\n\n\tcheckHCD(emptyIndices, currentStep, cd) {\n\t\tconst index = emptyIndices[currentStep];\n\t\tconst d     = this.#vars[index].domain();\n\n\t\tif (currentStep === emptyIndices.length - 1) {\n\t\t\tfor (const val of d) {\n\t\t\t\tthis.#vals[index] = val;\n\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(this.#vals);\n\t\t\t\tif (s > cd) cd = s;\n\t\t\t\tif (cd === 1) break;\n\t\t\t}\n\t\t} else {\n\t\t\tfor (const val of d) {\n\t\t\t\tthis.#vals[index] = val;\n\t\t\t\tcd = this.checkLCD(emptyIndices, currentStep + 1, cd);\n\t\t\t}\n\t\t}\n\t\treturn cd;\n\t}\n\n\tcheckLCD(emptyIndices, currentStep, cd) {\n\t\tconst index = emptyIndices[currentStep];\n\t\tconst d     = this.#vars[index].domain();\n\n\t\tif (currentStep === emptyIndices.length - 1) {\n\t\t\tfor (const val of d) {\n\t\t\t\tthis.#vals[index] = val;\n\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(this.#vals);\n\t\t\t\tif (s < cd) cd = s;\n\t\t\t\tif (cd === 0) break;\n\t\t\t}\n\t\t} else {\n\t\t\tfor (const val of d) {\n\t\t\t\tthis.#vals[index] = val;\n\t\t\t\tcd = this.checkLCD(emptyIndices, currentStep + 1, cd);\n\t\t\t}\n\t\t}\n\t\treturn cd;\n\t}\n\n}\n\n\n/**\n * An abstract class that represents a variable domain.\n * The domain is immutable.\n *\n * @author Takuto Yanagida\n * @version 2023-04-10\n */\n\nclass Domain {\n\n\t/**\n\t * Checks whether the specified value is included as an element of the domain.\n\t *\n\t * @param val A value.\n\t * @return True if the value is included.\n\t */\n\tcontains(val) {}\n\n\t/**\n\t * Gets the index of the specified value. If it does not exist, -1 is returned.\n\t *\n\t * @param val A value.\n\t * @return The index.\n\t */\n\tindexOf(val) {}\n\n\t/**\n\t * Gets the size of the domain, including the pruned elements.\n\t *\n\t * @return The size.\n\t */\n\tsize() {}\n\n\t/**\n\t * Gets the value at the specified index. The retrieved value may have been pruned.\n\t *\n\t * @param index An index.\n\t * @return The value.\n\t */\n\tat(index) {}\n\n\t/**\n\t * Gets the iterator of the values of the domain.\n\t */\n\t[Symbol.iterator]() {}\n\n\t/**\n\t * Gets an arbitrary value, regardless of whether it has been pruned or not.\n\t *\n\t * @return A value.\n\t */\n\trandom() {\n\t\treturn this.at(Math.floor(Math.random() * this.size()));\n\t}\n\n}\n\n/**\n * A variable domain with arbitrary elements.\n *\n * @author Takuto Yanagida\n * @version 2023-04-10\n */\n\nclass DomainArbitrary extends Domain {\n\n\t#vals;\n\n\tconstructor(vals) {\n\t\tsuper();\n\t\tthis.#vals = [...vals];\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tcontains(val) {\n\t\treturn this.#vals.includes(val);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tindexOf(val) {\n\t\treturn this.#vals.indexOf(val);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tsize() {\n\t\treturn this.#vals.length;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tat(index) {\n\t\treturn this.#vals[index];\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\t[Symbol.iterator]() {\n\t\treturn this.#vals[Symbol.iterator]();\n\t}\n\n}\n\n/**\n * A variable domain with contiguous integer elements.\n *\n * @author Takuto Yanagida\n * @version 2023-04-10\n */\n\nclass DomainRanged extends Domain {\n\n\t#min;\n\t#max;\n\n\tconstructor(min, max) {\n\t\tsuper();\n\t\tthis.#min = min | 0;\n\t\tthis.#max = max | 0;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tcontains(val) {\n\t\treturn this.#min <= val && val <= this.#max;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tindexOf(val) {\n\t\treturn (this.#min <= val && val <= this.#max) ? (val - this.#min) : -1;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tsize() {\n\t\treturn this.#max - this.#min + 1;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tat(index) {\n\t\treturn this.#min + index;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\t[Symbol.iterator]() {\n\t\tlet val = this.#min;\n\t\treturn {\n\t\t\tnext: () => (val <= this.#max ? { value: val++, done: false } : { done: true }),\n\t\t};\n\t}\n\n}\n\n\n/**\n * Class that represents a variable.\n *\n * @author Takuto Yanagida\n * @version 2023-04-11\n */\n\nclass Variable extends Element {\n\n\tstatic #INVALID = Number.MIN_VALUE;\n\n\t#owner;\n\t#dom;\n\t#val  = Variable.#INVALID;\n\t#cons = [];\n\n\t// Called only from Problem.\n\tconstructor(owner, d) {\n\t\tsuper();\n\t\tthis.#owner = owner;\n\t\tthis.#dom   = d;\n\t}\n\n\t// Called only from Problem.\n\tconnect(c) {\n\t\tif (this.has(c)) {\n\t\t\tthrow new IllegalArgumentException();\n\t\t}\n\t\tthis.#cons.push(c);\n\t}\n\n\t// Called only from Problem.\n\tdisconnect(c) {\n\t\tif (!this.has(c)) {\n\t\t\tthrow new IllegalArgumentException();\n\t\t}\n\t\tthis.#cons = this.#cons.filter(n => n !== c);\n\t}\n\n\t/**\n\t * Assign a value.\n\t * @param value Value.\n\t */\n\tassign(value) {\n\t\tthis.#val = value;  // Do not change val_ except here.\n\t}\n\n\t/**\n\t * Sets the state of the variable to unassigned.\n\t */\n\tclear() {\n\t\tthis.assign(Variable.#INVALID);  // Do not use the invalid value except here and below (isEmpty).\n\t}\n\n\t/**\n\t * Checks whether the value is unassigned or not.\n\t * @return True if unassigned.\n\t */\n\tisEmpty() {\n\t\treturn this.value() === Variable.#INVALID;\n\t}\n\n\t/**\n\t * Assign the domain.\n\t * The variable will be in unassigned state.\n\t * @param d Domain to be assigned.\n\t */\n\tsetDomain(d) {\n\t\tthis.#dom = d;\n\t\tthis.clear();\n\t}\n\n\t/**\n\t * Gets the problem that owns this variable.\n\t * @return Owner.\n\t */\n\towner() {\n\t\treturn this.#owner;\n\t}\n\n\t/**\n\t * Gets the number of associated constraints.\n\t * @return Number of constraints.\n\t */\n\tsize() {\n\t\treturn this.#cons.length;\n\t}\n\n\t/**\n\t * Gets the associated constraints by specifying their indices.\n\t * @param index Index.\n\t * @return A constraint.\n\t */\n\tat(index) {\n\t\treturn this.#cons[index];\n\t}\n\n\t/**\n\t * Gets the iterator of the associated constraints.\n\t */\n\t[Symbol.iterator]() {\n\t\treturn this.#cons[Symbol.iterator]();\n\t}\n\n\t/**\n\t * Gets the domain of the variable.\n\t * @return The domain.\n\t */\n\tdomain() {\n\t\treturn this.#dom;\n\t}\n\n\t/**\n\t * Checks whether or not the variable is associated with the specified constraint.\n\t * @param c A constraint.\n\t * @return True if associated.\n\t */\n\thas(c) {\n\t\treturn this.#cons.includes(c);\n\t}\n\n\t/**\n\t * Gets a string representation.\n\t * @return A string representation.\n\t */\n\ttoString() {\n\t\treturn `x${this.index()}${this.name() === '' ? '' : `(${this.name()})`} = ${this.isEmpty() ? '<empty>' : this.value()}`;\n\t}\n\n\t/**\n\t * Gets the value of the variable.\n\t * @returnThe value of the variable.\n\t */\n\tvalue() {\n\t\treturn this.#val;\n\t}\n\n\t/**\n\t * Collects the variables connected via the associated constraints.\n\t * @return An array of variables\n\t */\n\tneighbors() {\n\t\tconst vs = [];\n\t\tfor (const c of this.#cons) {\n\t\t\tfor(let j = 0, m = c.size(); j < m; j += 1) {\n\t\t\t\tconst v = c.at(j);\n\t\t\t\tif (v !== this) vs.push(v);\n\t\t\t}\n\t\t}\n\t\treturn vs;\n\t}\n\n}\n\n\n/**\n * The class represents a constraint satisfaction problem.\n *\n * @author Takuto Yanagida\n * @version 2023-04-11\n */\n\nclass Problem {\n\n\t_isFuzzy = false;\n\t_vars    = [];\n\t_cons    = [];\n\n\t// Generation Methods --------\n\n\t/**\n\t * Adds a variable to this problem.\n\t * @param Variable v A variable.\n\t */\n\taddVariable(v) {\n\t\tv.setIndex(this._vars.length);\n\t\tthis._vars.push(v);\n\t}\n\n\t/**\n\t * Generates a domain.\n\t * @param args {\n\t *   @type Array 'values' Multiple values.\n\t *\n\t *   @type Number 'min' Minimum value.\n\t *   @type Number 'max' Maximum value.\n\t * }\n\t * @return A domain.\n\t */\n\tcreateDomain(args) {\n\t\tif (args.values) {\n\t\t\treturn new DomainArbitrary(args.values);\n\t\t} else if ('min' in args && 'max' in args) {\n\t\t\treturn new DomainRanged(args.min, args.max);\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Generates a variable.\n\t * @param Array args {\n\t *   @type string 'name'   Display name.\n\t *   @type Domain 'domain' A domain.\n\t *   @type *      'value'  A value.\n\t * }\n\t * @return A variable.\n\t */\n\tcreateVariable(args) {\n\t\tif (args.value && !args.domain.contains(args.value)) {\n\t\t\tthrow new Error();\n\t\t}\n\t\tconst v = new Variable(this, args.domain);\n\t\tthis.addVariable(v);\n\t\tif (args.name) v.setName(args.name);\n\t\tif (args.value) v.assign(args.value);\n\t\treturn v;\n\t}\n\n\t/**\n\t * Generates a constraint.\n\t * @param Array args {\n\t *   @type string   'name'      Display name.\n\t *   @type Array    'variables' Variables.\n\t *   @type Relation 'relation'  A relation.\n\t * }\n\t * @return A constraint.\n\t */\n\tcreateConstraint(args) {\n\t\tfor (const v of args.variables) {\n\t\t\tif (v.owner() !== this) return null;\n\t\t}\n\t\tlet c;\n\t\tif (args.variables.length === 1)      c = new Constraint1(args.relation, ...args.variables);\n\t\telse if (args.variables.length === 2) c = new Constraint2(args.relation, ...args.variables);\n\t\telse if (args.variables.length === 3) c = new Constraint3(args.relation, ...args.variables);\n\t\telse c = new ConstraintN(args.relation, args.variables);\n\t\tc.setIndex(this._cons.length);\n\t\tthis._cons.push(c);\n\t\tfor (const v of args.variables) v.connect(c);\n\t\tif (c.isFuzzy()) this._isFuzzy = true;\n\t\tif (args.name) c.setName(args.name);\n\t\treturn c;\n\t}\n\n\t//  Modification Methods --------\n\n\t/**\n\t * Remove the constraint.\n\t * @param c Constraints to be removed.\n\t */\n\tremoveConstraint(c) {\n\t\tconst index = this._cons.indexOf(c);\n\t\tthis._cons.remove(c);\n\t\tfor (let i = index; i < this._cons.length; ++i) {\n\t\t\tthis._cons[i].setIndex(i);\n\t\t}\n\t\tfor (let i = 0; i < c.size(); ++i) {\n\t\t\tc.at(i).disconnect(c);\n\t\t}\n\t\tthis._isFuzzy = false;\n\t\tfor (let i = 0, n = this._cons.length; i < n; ++i) {\n\t\t\tif (this._cons[i].isFuzzy()) {\n\t\t\t\tthis._isFuzzy = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Changes the status of all variables to unassigned.\n\t */\n\tclearAllVariables() {\n\t\tfor (const v of this._vars) {\n\t\t\tv.clear();\n\t\t}\n\t}\n\n\t/**\n\t * Reverse the order of variables.\n\t * The index of each variable is reassigned.\n\t */\n\treverseVariables() {\n\t\tthis._vars.reverse();\n\t\tfor (let i = 0, n = this._vars.length; i < n; ++i) {\n\t\t\tthis._vars[i].setIndex(i);\n\t\t}\n\t}\n\n\t/**\n\t * Sorts variables using a specified comparator.\n\t * The index of each variable is reassigned.\n\t * @param comparator A comparator.\n\t */\n\tsortVariables(comparator) {\n\t\tthis._vars.sort(comparator);\n\t\tfor (let i = 0, n = this._vars.length; i < n; ++i) {\n\t\t\tthis._vars[i].setIndex(i);\n\t\t}\n\t}\n\n\t// Methods for Variables --------\n\n\t/**\n\t * Returns the number of variables in the problem.\n\t * @return Number of variables\n\t */\n\tvariableSize() {\n\t\treturn this._vars.length;\n\t}\n\n\t/**\n\t * Returns a variable by index.\n\t * @param index Index (0 <= index < getVariableSize()).\n\t * @return A variable\n\t */\n\tvariableAt(index) {\n\t\treturn this._vars[index];\n\t}\n\n\t/**\n\t * Returns a variable by name.\n\t * @param name Name.\n\t * @return A variable.\n\t */\n\tvariableOf(name) {\n\t\tfor (const v of this._vars) {\n\t\t\tif (v.name() === name) return v;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns whether the variable is contained or not.\n\t * @param v A variable.\n\t * @return True if contained.\n\t */\n\thasVariable(v) {\n\t\treturn this._vars.includes(v);\n\t}\n\n\t/**\n\t * Returns the list of variables.\n\t * The returned list is not allowed to be modified.\n\t * @return The variable list.\n\t */\n\tvariables() {\n\t\treturn this._vars;\n\t}\n\n\t// Methods for Constraints --------\n\n\t/**\n\t * Gets the number of constraints in the problem.\n\t * @return Number of constraints\n\t */\n\tconstraintSize() {\n\t\treturn this._cons.length;\n\t}\n\n\t/**\n\t * Returns a constraint with an index.\n\t * @param index Index (0 <= index < constraintSize()).\n\t * @return A constraint.\n\t */\n\tconstraintAt(index) {\n\t\treturn this._cons[index];\n\t}\n\n\t/**\n\t * Returns a constraint by name.\n\t * @param name Name.\n\t * @return A constraint.\n\t */\n\tconstraintOf(name) {\n\t\tfor (const c of this._cons) {\n\t\t\tif (c.name() === name) return c;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns whether the constraint is contained or not.\n\t * @param c A constraint\n\t * @return True if contained.\n\t */\n\thasConstraint(c) {\n\t\treturn this._cons.includes(c);\n\t}\n\n\t/**\n\t * Returns the list of constraint.\n\t * The returned list is not allowed to be modified.\n\t * @return The constraint list.\n\t */\n\tconstraints() {\n\t\treturn this._cons;\n\t}\n\n\t/**\n\t * Gets the constraints that exist between the specified variables.\n\t * Returns an empty array if no constraints exist.\n\t * If there are multiple constraints between two variables (including the case of n-ary constraints (2 < n)), they will be included in the return array.\n\t * @param v1 Variable 1\n\t * @param v2 Variable 2\n\t * @return Constraints.\n\t */\n\tconstraintsBetween(v1, v2) {\n\t\tconst cs = [];\n\t\tfor (const c of v1) {\n\t\t\tif (c.has(v2)) cs.push(c);\n\t\t}\n\t\treturn cs;\n\t}\n\n\t/**\n\t * Finds the set of worst satisfiable constraints in a fuzzy constraint satisfaction problem.\n\t * @return Array of constraints and worst satisfaction degree.\n\t */\n\tconstraintsWithWorstSatisfactionDegree() {\n\t\tconst cs = [];\n\t\tlet cur = 1;\n\t\tfor (const c of this._cons) {\n\t\t\tconst s = c.satisfactionDegree();\n\t\t\tif (s < cur) {\n\t\t\t\tcur = s;\n\t\t\t\tcs.length = 0;\n\t\t\t\tcs.push(c);\n\t\t\t} else if (s - cur < Number.MIN_VALUE * 10) {\n\t\t\t\tcs.push(c);\n\t\t\t}\n\t\t}\n\t\treturn [cs, cur];\n\t}\n\n\t// State acquisition methods --------\n\n\t/**\n\t * Returns the worst satisfaction degree for the constraints contained in the fuzzy constraint satisfaction problem.\n\t * If the degree cannot be determined because the variable has not yet been assigned a value or for some other reason, -1 is returned.\n\t * @return Worst satisfaction degree.\n\t */\n\tworstSatisfactionDegree() {\n\t\tlet cs = 1;\n\t\tfor (const c of this._cons) {\n\t\t\tconst s = c.satisfactionDegree();\n\t\t\tif (s === Constraint.UNDEFINED) return Constraint.UNDEFINED;\n\t\t\tif (s < cs) cs = s;\n\t\t}\n\t\treturn cs;\n\t}\n\n\t/**\n\t * Gets the average of satisfaction degrees of the fuzzy constraints.\n\t * @return Average of satisfaction degrees.\n\t */\n\taverageSatisfactionDegree() {\n\t\tlet ave = 0;\n\t\tfor (const c of this._cons) {\n\t\t\tave += c.satisfactionDegree();\n\t\t}\n\t\tave = ave / this._cons.length;\n\t\treturn ave;\n\t}\n\n\t/**\n\t * Returns the number of variables in the problem that have not been assigned a value.\n\t * @return Number of variables with no value assigned.\n\t */\n\temptyVariableSize() {\n\t\tlet num = 0;\n\t\tfor (const v of this._vars) {\n\t\t\tif (v.isEmpty()) num++;\n\t\t}\n\t\treturn num;\n\t}\n\n\t/**\n\t * Gets the constraint density (number of constraints/number of variables).\n\t * @return Constraint density.\n\t */\n\tconstraintDensity() {\n\t\treturn this.constraintSize() / this.variableSize();\n\t}\n\n\t/**\n\t * Returns whether the constraint satisfaction problem has any variables with empty domain.\n\t * @return True if it exists.\n\t */\n\thasEmptyDomain() {\n\t\tfor (const v of this._vars) {\n\t\t\tif (v.domain().size() === 0) return true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns whether the problem is a fuzzy constraint satisfaction problem, i.e., whether it contains fuzzy constraints.\n\t * @return True if it is a fuzzy constraint satisfaction problem.\n\t */\n\tisFuzzy() {\n\t\treturn this._isFuzzy;\n\t}\n\n}\n\n/**\n * The class represents a crisp constraint satisfaction problem.\n *\n * @author Takuto Yanagida\n * @version 2023-04-10\n */\n\nclass CrispProblem extends Problem {\n\n\t/**\n\t * Generates a crisp constraint.\n\t * @param Array args {\n\t *   @type string   'name'      Display name.\n\t *   @type Array    'variables' Variables.\n\t *   @type Relation 'relation'  A relation.\n\t * }\n\t * @return A constraint.\n\t */\n\tcreateConstraint(args) {\n\t\tif(args.relation instanceof FuzzyRelation) throw new Error();\n\t\treturn super.createConstraint(args);\n\t}\n\n\t/**\n\t * Returns whether the problem is a fuzzy constraint satisfaction problem, i.e., whether it contains fuzzy constraints.\n\t * @return Always returns false.\n\t */\n\tisFuzzy() {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns the rate of constraints that are satisfied out of all constraints.\n\t * @return Rate of satisfied constraints.\n\t */\n\tsatisfiedConstraintRate() {\n\t\treturn this.satisfiedConstraintSize() / this._cons.length;\n\t}\n\n\t/**\n\t * Returns the number of satisfied constraints.\n\t * Undefined constraints are ignored.\n\t * @return Number of satisfied constraints.\n\t */\n\tsatisfiedConstraintSize() {\n\t\tlet count = 0;\n\t\tfor (let i = 0; i < this._cons.length; ++i) {\n\t\t\tif (this._cons[i].isSatisfied() === 1) ++count;\n\t\t}\n\t\treturn count;\n\t}\n\n\t/**\n\t * Returns a list of violating constraints.\n\t * Undefined constraints are ignored.\n\t * @return Array of constraints.\n\t */\n\tviolatingConstraints() {\n\t\tconst cs = [];\n\t\tfor (const c of this._cons) {\n\t\t\tif (c.isSatisfied() === 0) cs.push(c);\n\t\t}\n\t\treturn cs;\n\t}\n\n\t/**\n\t * Returns the number of violating constraints.\n\t * Undefined constraints are ignored.\n\t * @return Number of violating constraints.\n\t */\n\tviolatingConstraintSize() {\n\t\tlet count = 0;\n\t\tfor (const c of this._cons) {\n\t\t\tif (c.isSatisfied() === 0) ++count;\n\t\t}\n\t\treturn count;\n\t}\n\n}\n\n"]}