{"version":3,"sources":["sample.js"],"names":["Beta","static","a","t","x","y","u","r","Math","sqrt","random","log","exp","E","b","T","gamma","N_queens","ProblemFactory","sum_time","sum_rate","i","COUNT","nq","QUEEN_NUM","p","createProblem","CrispProblem","Date","now","s","ForwardChecking","setTimeLimit","res","solve","ct","cr","satisfiedConstraintRate","console","name","printResult","size","constructor","queenSize","super","this","getQueenSize","setQueenSize","isFuzzy","v","push","createVariable","domain","createDomain","min","max","value","j","createConstraint","relation","CrispQueenRelation","variables","l","variableAt","isEmpty","CrispRelation","dist","isSatisfied","vs","v1","v2","N_1_queens","sum_degree","Problem","FuzzyForwardChecking","cd","worstSatisfactionDegree","FuzzyQueenRelation","FuzzyRelation","satisfactionDegree","RandomBinary","VAR_NUM","DENSITY","AVE_TIGHTNESS","floor","den","sig","varCount","density","aveTightness","domainSize","getVariableCount","setVariableCount","count","getDensity","setDensity","getAverageTightness","setAverageTightness","tightness","getDomainSize","setDomainSize","temp","constraintSize","nextInt","constraintsBetween","length","TableRelation","getRelationTable","table","Array","q","Number","MAX_VALUE","value1","value2"],"mappings":"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","file":"sample.min.js","sourcesContent":["class Beta {\n\n\tstatic #gamma(a) {\n\t\tlet t, x, y, u, r;\n\t\tif (a > 1) {\n\t\t\tt = Math.sqrt(2 * a - 1);\n\t\t\tdo {\n\t\t\t\tdo {\n\t\t\t\t\tdo {\n\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\tx = Math.random();\n\t\t\t\t\t\t\ty = 2 * Math.random() - 1;\n\t\t\t\t\t\t} while ((x * x + y * y >= 1) || (x === 0));\n\t\t\t\t\t\ty = y / x;\n\t\t\t\t\t\tx = t * y + a - 1;\n\t\t\t\t\t} while (x <= 0);\n\t\t\t\t\tu = (a - 1) * Math.log(x / (a - 1)) - t * y;\n\t\t\t\t} while (u <= -50);\n\t\t\t} while ((1 + y * y) * Math.exp(u) <= Math.random());\n\t\t} else {\n\t\t\tt = Math.E / (a + Math.E);\n\t\t\tdo {\n\t\t\t\tif (Math.random() < t) {\n\t\t\t\t\tx = 0;\n\t\t\t\t\ty = 1;\n\t\t\t\t\tr = Math.random();\n\t\t\t\t\tif (r > 0) {\n\t\t\t\t\t\tx = Math.exp(Math.log(r) / a);\n\t\t\t\t\t\ty = Math.exp(-x);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tr = Math.random();\n\t\t\t\t\tx = 1;\n\t\t\t\t\ty = 0;\n\t\t\t\t\tif (r > 0) {\n\t\t\t\t\t\tx = 1 - Math.log(r);\n\t\t\t\t\t\ty = Math.exp((a - 1) * Math.log(x));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} while (Math.random() >= y);\n\t\t}\n\t\treturn x;\n\t}\n\n\tstatic random(a, b) {\n\t\tconst T = Beta.#gamma(a);\n\t\treturn T / (T + Beta.#gamma(b));\n\t}\n\n}\n\n/**\n * A sample implementation of the N queens problem.\n *\n * @author Takuto Yanagida\n * @version 2023-03-31\n */\n\nclass N_queens extends ProblemFactory {\n\n\t// ################################################################\n\n\tstatic COUNT     = 1;  // Interaction count\n\tstatic QUEEN_NUM = 20;  // Number of queens\n\n\tstatic main() {\n\t\tlet sum_time = 0;\n\t\tlet sum_rate = 0;\n\n\t\tfor (let i = 0; i < N_queens.COUNT; ++i) {\n\t\t\tconst nq = new N_queens(N_queens.QUEEN_NUM);\n\t\t\tconst p  = nq.createProblem(new CrispProblem());\n\t\t\tconst t  = Date.now();  // Start time measurement\n\n\t\t\tconst s = new ForwardChecking(p);\n\t\t\t// const s = new MaxForwardChecking(p);\n\t\t\t// const s = new LocalChanges(p);\n\t\t\t// const s = new LocalChangesEx(p);\n\t\t\t// const s = new Breakout(p);\n\t\t\t// const s = new GENET(p);\n\t\t\t// const s = new CrispSRS3(p);\n\t\t\t// s.setTargetRate(null);\n\t\t\ts.setTimeLimit(10000);\n\t\t\tconst res = s.solve();\n\n\t\t\tconst ct = Date.now() - t;  // Stop time measurement\n\t\t\tconst cr = p.satisfiedConstraintRate();\n\t\t\tconsole.log(`solver: ${s.name()}   ${res ? 'success' : 'failure'}`);\n\t\t\tconsole.log(`time: ${ct}   rate: ${cr}`);\n\t\t\tnq.printResult(p);\n\t\t\tsum_time += ct;\n\t\t\tsum_rate += cr;\n\t\t}\n\t\tconsole.log(`average time: ${sum_time / N_queens.COUNT}   average rate: ${sum_rate / N_queens.COUNT}`);\n\t}\n\n\t// ################################################################\n\n\t#size;\n\n\tconstructor(queenSize) {\n\t\tsuper();\n\t\tthis.#size = queenSize;\n\t}\n\n\tgetQueenSize() {\n\t\treturn this.#size;\n\t}\n\n\tsetQueenSize(size) {\n\t\tthis.#size = size;\n\t}\n\n\tisFuzzy() {\n\t\treturn false;\n\t}\n\n\tcreateProblem(p) {\n\t\tconst v = [];\n\t\tfor (let i = 0; i < this.#size; ++i) {\n\t\t\tv.push(p.createVariable({ name: `Queen ${i}`, domain: p.createDomain({ min: 1, max: this.#size }), value: 1 }));\n\t\t}\n\t\tfor (let i = 0; i < this.#size; ++i) {\n\t\t\tfor (let j = i + 1; j < this.#size; ++j) {\n\t\t\t\tp.createConstraint({ relation: new CrispQueenRelation(i, j), variables: [v[i], v[j]] });\n\t\t\t}\n\t\t}\n\t\treturn p;\n\t}\n\n\tprintResult(p) {\n\t\tfor (let y = 0; y < this.#size; ++y) {\n\t\t\tlet l = '';\n\t\t\tif (p.variableAt(y).isEmpty()) {\n\t\t\t\tfor (let x = 0; x < this.#size; ++x) {\n\t\t\t\t\tl += '- ';\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor (let x = 0; x < this.#size; ++x) {\n\t\t\t\t\tif (p.variableAt(y).value() - 1 === x) {\n\t\t\t\t\t\tl += 'o ';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tl += '- ';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tconsole.log(l);\n\t\t}\n\t}\n\n}\n\nclass CrispQueenRelation extends CrispRelation {\n\n\t#dist;\n\n\tconstructor(i, j) {\n\t\tsuper();\n\t\tthis.#dist = j - i;\n\t}\n\n\tisSatisfied(...vs) {\n\t\tconst [v1, v2] = vs;\n\t\tif ((v1 !== v2) && (v1 !== v2 + this.#dist) && (v1 !== v2 - this.#dist)) return true;\n\t\treturn false;\n\t}\n\n}\n\n/**\n * A sample implementation of the N-1 Queen Problem.\n * The problem is to place N queens on a board of N vertical squares and N-1 horizontal squares in such a way that as few queens as possible are taken from each other.\n * If two queens are in a position to be taken, the farther apart they are, the higher the satisfaction degree.\n *\n * @author Takuto Yanagida\n * @version 2023-03-31\n */\n\nclass N_1_queens extends ProblemFactory {\n\n\t// ################################################################\n\n\tstatic COUNT     = 1;   // Interaction count\n\tstatic QUEEN_NUM = 20;  // Number of queens\n\n\tstatic main() {\n\t\tlet sum_time   = 0;\n\t\tlet sum_degree = 0;\n\n\t\tfor (let i = 0; i < N_1_queens.COUNT; ++i) {\n\t\t\tconst nq = new N_1_queens(N_1_queens.QUEEN_NUM);\n\t\t\tconst p  = nq.createProblem(new Problem());\n\t\t\tconst t  = Date.now();  // Start time measurement\n\n\t\t\tconst s = new FuzzyForwardChecking(p);\n\t\t\t// const s = new FuzzyForwardCheckingBc(p);\n\t\t\t// const s = new FlexibleLocalChanges(p);\n\t\t\t// const s = new FlexibleLocalChangesEx(p);\n\t\t\t// const s = new FuzzyBreakout(p);\n\t\t\t// const s = new FuzzyGENET(p);\n\t\t\t// const s = new SRS3(p);\n\t\t\t// const s = new SRS3_PF(p);\n\t\t\t// s.setTargetRate(null);\n\t\t\ts.setTimeLimit(10000);\n\t\t\tconst res = s.solve();\n\n\t\t\tconst ct = Date.now() - t;  // Stop time measurement\n\t\t\tconst cd = p.worstSatisfactionDegree();\n\t\t\tconsole.log(`solver: ${s.name()}   ${res ? 'success' : 'failure'}`);\n\t\t\tconsole.log(`trial: ${i + 1}   time: ${ct}   degree: ${cd}`);\n\t\t\tnq.printResult(p);\n\t\t\tsum_time   += ct;\n\t\t\tsum_degree += cd;\n\t\t}\n\t\tconsole.log(`average time: ${sum_time / N_1_queens.COUNT}   average degree: ${sum_degree / N_1_queens.COUNT}`);\n\t}\n\n\t// ################################################################\n\n\t#size;\n\n\tconstructor(queenSize) {\n\t\tsuper();\n\t\tthis.#size = queenSize;\n\t}\n\n\tgetQueenSize() {\n\t\treturn this.#size;\n\t}\n\n\tsetQueenSize(size) {\n\t\tthis.#size = size;\n\t}\n\n\tisFuzzy() {\n\t\treturn true;\n\t}\n\n\tcreateProblem(p) {\n\t\tconst v = [];\n\t\tfor (let i = 0; i < this.#size; ++i) {\n\t\t\tv.push(p.createVariable({ name:`Queen ${i}`, domain: p.createDomain({ min: 1, max: this.#size - 1 }), value: 1 }));\n\t\t}\n\t\tfor (let i = 0; i < this.#size; ++i) {\n\t\t\tfor (let j = i + 1; j < this.#size; ++j) {\n\t\t\t\tp.createConstraint({ relation: new FuzzyQueenRelation(i, j, this.#size), variables: [v[i], v[j]] });\n\t\t\t}\n\t\t}\n\t\treturn p;\n\t}\n\n\tprintResult(p) {\n\t\tfor (let y = 0; y < this.#size; ++y) {\n\t\t\tlet l = '';\n\t\t\tif (p.variableAt(y).isEmpty()) {\n\t\t\t\tfor (let x = 0; x < this.#size; ++x) {\n\t\t\t\t\tl += '- ';\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor (let x = 0; x < this.#size; ++x) {\n\t\t\t\t\tif (p.variableAt(y).value() - 1 === x) {\n\t\t\t\t\t\tl += 'o ';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tl += '- ';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tconsole.log(l);\n\t\t}\n\t}\n\n}\n\nclass FuzzyQueenRelation extends FuzzyRelation {\n\n\t#dist;\n\t#size;\n\n\tconstructor(i, j, size) {\n\t\tsuper();\n\t\tthis.#dist = j - i;\n\t\tthis.#size = size;\n\t}\n\n\tsatisfactionDegree(v1, v2) {\n\t\tif ((v1 !== v2) && (v1 !== v2 + this.#dist) && (v1 !== v2 - this.#dist)) return 1;\n\t\treturn (this.#dist - 1) / (this.#size - 1);\n\t}\n\n}\n\n/**\n * Sample implementation of a random binary problem.\n *\n * @author Takuto Yanagida\n * @version 2023-03-31\n */\n\nclass RandomBinary extends ProblemFactory {\n\n\t// ################################################################\n\n\tstatic COUNT         = 10;  // Interaction count\n\tstatic VAR_NUM       = 10;  // Number of variables\n\tstatic DENSITY       = 0.5;\n\tstatic AVE_TIGHTNESS = 0.5;\n\n\tstatic main() {\n\t\tlet sum_time   = 0;\n\t\tlet sum_degree = 0;\n\n\t\tfor (let i = 0; i < RandomBinary.COUNT; ++i) {\n\t\t\tconst rp = new RandomBinary(RandomBinary.VAR_NUM, RandomBinary.DENSITY, RandomBinary.AVE_TIGHTNESS);\n\t\t\tconst p  = rp.createProblem(new Problem());\n\t\t\tconst t  = Date.now();  // Start time measurement\n\n\t\t\tconst s = new FuzzyForwardChecking(p);\n\t\t\t// const s = new FuzzyForwardCheckingBc(p);\n\t\t\t// const s = new FlexibleLocalChanges(p);\n\t\t\t// const s = new FlexibleLocalChangesEx(p);\n\t\t\t// const s = new FuzzyBreakout(p);\n\t\t\t// const s = new FuzzyGENET(p);\n\t\t\t// const s = new SRS3(p);\n\t\t\t// const s = new SRS3_PF(p);\n\t\t\t// s.setTargetRate(null);\n\t\t\ts.setTimeLimit(10000);\n\t\t\tconst res = s.solve();\n\n\t\t\tconst ct = Date.now() - t;  // Stop time measurement\n\t\t\tconst cd = p.worstSatisfactionDegree();\n\t\t\tconsole.log(`solver: ${s.name()}   ${res ? 'success' : 'failure'}`);\n\t\t\tconsole.log(`trial: ${i + 1}   time: ${ct}   degree: ${cd}`);\n\t\t\tsum_time   += ct;\n\t\t\tsum_degree += cd;\n\t\t}\n\t\tconsole.log(`average time: ${sum_time / RandomBinary.COUNT}   average degree: ${sum_degree / RandomBinary.COUNT}`);\n\t}\n\n\t// ################################################################\n\n\tstatic nextInt(max) {\n\t\treturn Math.floor(Math.random() * Math.floor(max));\n\t}\n\n\t#size;\n\t#den;\n\t#t;\n\t#sig;\n\n\tconstructor(varCount, density, aveTightness, domainSize = null) {\n\t\tsuper();\n\t\tthis.#size = varCount;\n\t\tthis.#den  = density;\n\t\tthis.#t    = aveTightness;\n\t\tthis.#sig  = domainSize ?? varCount;\n\t}\n\n\tgetVariableCount() {\n\t\treturn this.#size;\n\t}\n\n\tsetVariableCount(count) {\n\t\tthis.#size = count;\n\t}\n\n\tgetDensity() {\n\t\treturn this.#den;\n\t}\n\n\tsetDensity(density) {\n\t\tthis.#den = density;\n\t}\n\n\tgetAverageTightness() {\n\t\treturn this.#t;\n\t}\n\n\tsetAverageTightness(tightness) {\n\t\tthis.#t = tightness;\n\t}\n\n\tgetDomainSize() {\n\t\treturn this.#sig;\n\t}\n\n\tsetDomainSize(size) {\n\t\tthis.#sig = size;\n\t}\n\n\tisFuzzy() {\n\t\treturn true;\n\t}\n\n\tcreateProblem(p) {\n\t\tconst r  = (this.#den * ((this.#size * this.#size - this.#size) / 2)) | 0;\n\t\tconst vs = [];\n\t\tfor (let i = 0; i <this.#size; ++i) {\n\t\t\tvs.push(p.createVariable({ domain: p.createDomain({ min: 0, max: this.#sig - 1 }), value: 0 }));\n\t\t}\n\t\tconst temp = [];\n\t\twhile (p.constraintSize() < r) {\n\t\t\tconst i = RandomBinary.nextInt(this.#size);\n\t\t\tconst j = RandomBinary.nextInt(this.#size);\n\n\t\t\tif (i !== j) {\n\t\t\t\tp.constraintsBetween(vs[i], vs[j], temp);\n\t\t\t\tif (0 === temp.length) {\n\t\t\t\t\tp.createConstraint({ relation: new TableRelation(this.#getRelationTable()), variables: [vs[i], vs[j]] });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn p;\n\t}\n\n\t#getRelationTable() {\n\t\tconst table = [];\n\t\tfor (let i = 0; i < this.#sig; ++i) {\n\t\t\ttable.push(new Array(this.#sig));\n\t\t}\n\t\tfor (let i = 0; i < this.#sig; ++i) {\n\t\t\tfor (let j = 0; j < this.#sig; ++j) {\n\t\t\t\tconst q = (this.#t === 0) ? Number.MAX_VALUE : (1 - this.#t) / this.#t;\n\t\t\t\ttable[i][j] = Beta.random(1, q);\n\t\t\t}\n\t\t}\n\t\treturn table;\n\t}\n\n}\n\nclass TableRelation extends FuzzyRelation {\n\n\t#table;\n\n\tconstructor(table) {\n\t\tsuper();\n\t\tthis.#table = table;\n\t}\n\n\tsatisfactionDegree(value1, value2) {\n\t\treturn this.#table[value1][value2];\n\t}\n\n}\n\n"]}