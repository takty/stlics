{
  "version": 3,
  "sources": ["../src/problem/element.ts", "../src/problem/variable.ts", "../src/problem/domain.ts", "../src/problem/domain-ranged.ts", "../src/problem/domain-arbitrary.ts", "../src/problem/constraint.ts", "../src/problem/constraint-1.ts", "../src/problem/constraint-2.ts", "../src/problem/constraint-3.ts", "../src/problem/constraint-n.ts", "../src/problem/problem.ts", "../src/problem/problem-crisp.ts", "../src/problem/observable-variable.ts", "../src/problem/relation-fuzzy-table.ts", "../src/problem/relation-fuzzy-function.ts", "../src/problem/relation-crisp-table.ts", "../src/problem/relation-crisp-function.ts", "../src/problem/relation-view.ts", "../src/solver/solver.ts", "../src/util/assignment.ts", "../src/util/assignment-list.ts", "../src/util/domain-pruner.ts", "../src/solver/crisp/forward-checking.ts", "../src/solver/crisp/max-forward-checking.ts", "../src/solver/crisp/local-changes.ts", "../src/solver/crisp/local-changes-ex.ts", "../src/solver/crisp/breakout.ts", "../src/solver/crisp/genet.ts", "../src/solver/crisp/crisp-srs3.ts", "../src/solver/fuzzy/fuzzy-forward-checking.ts", "../src/solver/fuzzy/fuzzy-forward-checking-bc.ts", "../src/solver/fuzzy/flexible-local-changes.ts", "../src/solver/fuzzy/flexible-local-changes-ex.ts", "../src/solver/fuzzy/fuzzy-breakout.ts", "../src/solver/fuzzy/fuzzy-genet.ts", "../src/solver/fuzzy/srs3.ts", "../src/solver/filter/post-stabilization.ts", "../src/solver/fuzzy/srs3-pf.ts", "../src/solver/solver-factory-static.ts", "../src/solver/filter/ac3.ts", "../src/solver/filter/node-consistency.ts", "../src/util/problems.ts", "../src/util/loop-detector.ts"],
  "sourcesContent": ["/**\n * The common class of variables and constraints.\n *\n * @author Takuto Yanagida\n * @version 2022-08-15\n */\n\nexport class Element {\n\n\t#index: number = -1;\n\t#name: string = '';\n\n\t/**\n\t * It is used when the user wishes to associate an arbitrary object with each element.\n\t */\n\tuserObject: any = null;\n\n\t/**\n\t * Used when the solver wants to associate an arbitrary object with each element.\n\t */\n\tsolverObject: any = null;\n\n\t// Called only from Problem.\n\tsetIndex(index: number): void {\n\t\tthis.#index = index;\n\t}\n\n\t/**\n\t * Sets the name.\n\t *\n\t * @param name string representing the name.\n\t */\n\tsetName(name: string): void {\n\t\tthis.#name = name;\n\t}\n\n\t/**\n\t * Get the index on the owned problem.\n\t * Each variable and constraint is assigned a serial number as an index, which is used to access it through the problem.\n\t *\n\t * @return Integer value representing the index.\n\t */\n\tindex(): number {\n\t\treturn this.#index;\n\t}\n\n\t/**\n\t * Gets the name.\n\t *\n\t * @return String representing the name.\n\t */\n\tname(): string {\n\t\treturn this.#name;\n\t}\n\n}\n", "/**\n * Class that represents a variable.\n *\n * @author Takuto Yanagida\n * @version 2023-04-18\n */\n\nimport { Problem } from './problem';\nimport { Element } from './element';\nimport { Constraint } from './constraint';\nimport { Domain } from './domain';\n\nexport class Variable extends Element {\n\n\tstatic #INVALID = Number.MIN_VALUE;\n\n\t#owner: Problem;\n\t#dom: Domain;\n\t#val: number  = Variable.#INVALID;\n\t#cons: Constraint[] = [];\n\n\t// Called only from Problem.\n\tconstructor(owner: Problem, d: Domain) {\n\t\tsuper();\n\t\tthis.#owner = owner;\n\t\tthis.#dom   = d;\n\t}\n\n\t// Called only from Problem.\n\tconnect(c: Constraint): void {\n\t\tif (this.has(c)) {\n\t\t\tthrow new RangeError();\n\t\t}\n\t\tthis.#cons.push(c);\n\t}\n\n\t// Called only from Problem.\n\tdisconnect(c: Constraint): void {\n\t\tif (!this.has(c)) {\n\t\t\tthrow new RangeError();\n\t\t}\n\t\tthis.#cons = this.#cons.filter(n => n !== c);\n\t}\n\n\t/**\n\t * Assign a value.\n\t * @param value Value.\n\t */\n\tassign(value: number): void {\n\t\tthis.#val = value;  // Do not change #val except here.\n\t}\n\n\t/**\n\t * Sets the state of the variable to unassigned.\n\t */\n\tclear(): void {\n\t\tthis.assign(Variable.#INVALID);  // Do not use the invalid value except here and below (isEmpty).\n\t}\n\n\t/**\n\t * Checks whether the value is unassigned or not.\n\t * @return True if unassigned.\n\t */\n\tisEmpty(): boolean {\n\t\treturn this.value() === Variable.#INVALID;\n\t}\n\n\t/**\n\t * Assign the domain.\n\t * The variable will be in unassigned state.\n\t * @param d Domain to be assigned.\n\t */\n\tsetDomain(d: Domain): void {\n\t\tthis.#dom = d;\n\t\tthis.clear();\n\t}\n\n\t/**\n\t * Gets the problem that owns this variable.\n\t * @return Owner.\n\t */\n\towner(): Problem {\n\t\treturn this.#owner;\n\t}\n\n\t/**\n\t * Gets the number of associated constraints.\n\t * @return Number of constraints.\n\t */\n\tsize(): number {\n\t\treturn this.#cons.length;\n\t}\n\n\t/**\n\t * Gets the associated constraints by specifying their indices.\n\t * @param index Index.\n\t * @return A constraint.\n\t */\n\tat(index: number): Constraint {\n\t\treturn this.#cons[index];\n\t}\n\n\t/**\n\t * Gets the iterator of the associated constraints.\n\t */\n\t[Symbol.iterator]() {\n\t\treturn this.#cons[Symbol.iterator]();\n\t}\n\n\t/**\n\t * Gets the domain of the variable.\n\t * @return The domain.\n\t */\n\tdomain(): Domain {\n\t\treturn this.#dom;\n\t}\n\n\t/**\n\t * Checks whether or not the variable is associated with the specified constraint.\n\t * @param c A constraint.\n\t * @return True if associated.\n\t */\n\thas(c: Constraint): boolean {\n\t\treturn this.#cons.includes(c);\n\t}\n\n\t/**\n\t * Gets a string representation.\n\t * @return A string representation.\n\t */\n\ttoString(): string {\n\t\treturn `x${this.index()}${this.name() === '' ? '' : `(${this.name()})`} = ${this.isEmpty() ? '<empty>' : this.value()}`;\n\t}\n\n\t/**\n\t * Gets the value of the variable.\n\t * @returnThe value of the variable.\n\t */\n\tvalue(): number {\n\t\treturn this.#val;\n\t}\n\n\t/**\n\t * Collects the variables connected via the associated constraints.\n\t * @return An array of variables\n\t */\n\tneighbors(): Variable[] {\n\t\tconst vs: Variable[] = [];\n\t\tfor (const c of this.#cons) {\n\t\t\tfor (const v of c) {\n\t\t\t\tif (v !== this) vs.push(v);\n\t\t\t}\n\t\t}\n\t\treturn vs;\n\t}\n\n}\n", "/**\n * An abstract class that represents a variable domain.\n * The domain is immutable.\n *\n * @author Takuto Yanagida\n * @version 2023-04-10\n */\n\nexport abstract class Domain {\n\n\t/**\n\t * Checks whether the specified value is included as an element of the domain.\n\t *\n\t * @param val A value.\n\t * @return True if the value is included.\n\t */\n\tabstract contains(val: number): boolean;\n\n\t/**\n\t * Gets the index of the specified value. If it does not exist, -1 is returned.\n\t *\n\t * @param val A value.\n\t * @return The index.\n\t */\n\tabstract indexOf(val: number): number;\n\n\t/**\n\t * Gets the size of the domain, including the pruned elements.\n\t *\n\t * @return The size.\n\t */\n\tabstract size(): number;\n\n\t/**\n\t * Gets the value at the specified index. The retrieved value may have been pruned.\n\t *\n\t * @param index An index.\n\t * @return The value.\n\t */\n\tabstract at(index: number): number;\n\n\t/**\n\t * Gets the iterator of the values of the domain.\n\t */\n\tabstract [Symbol.iterator](): Iterator<number>;\n\n\t/**\n\t * Gets an arbitrary value, regardless of whether it has been pruned or not.\n\t *\n\t * @return A value.\n\t */\n\trandom(): number {\n\t\treturn this.at(Math.floor(Math.random() * this.size()));\n\t}\n\n}\n", "/**\n * A variable domain with contiguous integer elements.\n *\n * @author Takuto Yanagida\n * @version 2023-04-10\n */\n\nimport { Domain } from './domain';\n\nexport class DomainRanged extends Domain {\n\n\t#min: number;\n\t#max: number;\n\n\tconstructor(min: number, max: number) {\n\t\tsuper();\n\t\tthis.#min = min | 0;\n\t\tthis.#max = max | 0;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tcontains(val: number): boolean {\n\t\treturn this.#min <= val && val <= this.#max;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tindexOf(val: number): number {\n\t\treturn (this.#min <= val && val <= this.#max) ? (val - this.#min) : -1;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tsize(): number {\n\t\treturn this.#max - this.#min + 1;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tat(index: number): number {\n\t\treturn this.#min + index;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\t[Symbol.iterator](): Iterator<number> {\n\t\tlet val = this.#min;\n\t\tconst max = this.#max;\n\t\treturn {\n\t\t\tnext(): IteratorResult<number> {\n\t\t\t\tif (val <= max) {\n\t\t\t\t\treturn { value: val++, done: false };\n\t\t\t\t} else {\n\t\t\t\t\treturn { value: null, done: true };\n\t\t\t\t}\n\t\t\t},\n\t\t};\n\t}\n\n}\n", "/**\n * A variable domain with arbitrary elements.\n *\n * @author Takuto Yanagida\n * @version 2023-04-10\n */\n\nimport { Domain } from './domain';\n\nexport class DomainArbitrary extends Domain {\n\n\t#vals: number[];\n\n\tconstructor(vals: number[]) {\n\t\tsuper();\n\t\tthis.#vals = [...vals];\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tcontains(val: number): boolean {\n\t\treturn this.#vals.includes(val);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tindexOf(val: number): number {\n\t\treturn this.#vals.indexOf(val);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tsize(): number {\n\t\treturn this.#vals.length;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tat(index: number): number {\n\t\treturn this.#vals[index];\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\t[Symbol.iterator](): Iterator<number> {\n\t\treturn this.#vals[Symbol.iterator]();\n\t}\n\n}\n", "/**\n * The class represents a constraint.\n *\n * @author Takuto Yanagida\n * @version 2023-04-11\n */\n\nimport { Element } from './element';\nimport { Variable } from './variable';\nimport { Relation } from './relation';\nimport { CrispRelation } from './relation-crisp';\nimport { FuzzyRelation } from './relation-fuzzy';\n\nexport abstract class Constraint extends Element {\n\n\t/**\n\t * The constant indicating that the satisfaction degree is not defined.\n\t */\n\tstatic UNDEFINED: -1 = -1;\n\n\trel: Relation;\n\n\t// Called only from Problem.\n\tconstructor(r: Relation) {\n\t\tsuper();\n\t\tthis.rel = r;\n\t}\n\n\t/**\n\t * Returns the crisp relation between variables.\n\t * @return Relation.\n\t */\n\tcrispRelation(): CrispRelation {\n\t\treturn this.rel as CrispRelation;\n\t}\n\n\t/**\n\t * Returns the fuzzy relation between variables.\n\t * @return Relation.\n\t */\n\tfuzzyRelation(): FuzzyRelation {\n\t\treturn this.rel as FuzzyRelation;\n\t}\n\n\t/**\n\t * Returns whether this is a fuzzy constraint.\n\t * @return True if it is fuzzy constraint.\n\t */\n\tisFuzzy(): boolean {\n\t\treturn 'satisfactionDegree' in this.rel;\n\t}\n\n\t/**\n\t * Returns a string representation.\n\t * @return A string representation.\n\t */\n\ttoString(): string {\n\t\tconst s = this.satisfactionDegree();\n\t\treturn `c${this.index()}${this.name() === '' ? '' : `(${this.name()})`} = ${s === Constraint.UNDEFINED ? 'UNDEFINED' : s}`;\n\t}\n\n\t/**\n\t * Returns the order of the constraint, i.e., the number of (associated) variables in the scope.\n\t * @return Order.\n\t */\n\tabstract size(): number;\n\n\t/**\n\t * Gets the associated variable by specifying its index.\n\t * @param index Index.\n\t * @return A variable.\n\t */\n\tabstract at(index: number): Variable;\n\n\t/**\n\t * Gets the iterator of the associated variables.\n\t */\n\tabstract [Symbol.iterator](): Iterator<Variable>;\n\n\t/**\n\t * Returns whether the specified variable is associated or not.\n\t * @param v A variable.\n\t * @return True if it is associated.\n\t */\n\tabstract has(v: Variable): boolean;\n\n\t/**\n\t * Gets the index of a specified variable.\n\t * If not found, returns -1.\n\t * @param v A variable.\n\t * @return Index.\n\t */\n\tabstract indexOf(v: Variable): number;\n\n\t/**\n\t * Returns the number of scope variables that have not been assigned a value.\n\t * @return Number of variables\n\t */\n\tabstract emptyVariableSize(): number;\n\n\t/**\n\t * Returns whether or not the satisfaction (degree) is defined.\n\t * Satisfaction (degree) is defined when all associated variables have values assigned to them.\n\t * @return True if it is defined.\n\t */\n\tabstract isDefined(): boolean;\n\n\t/**\n\t * Returns whether or not this constraint is satisfied.\n\t * @return 1 if satisfied, 0 if not, UNDEFINED if undefined\n\t */\n\tabstract isSatisfied(): -1|0|1;\n\n\t/**\n\t * Gets the current satisfaction degree.\n\t * @return Degree 0 - 1, UNDEFINED if undefined.\n\t */\n\tabstract satisfactionDegree(): number;\n\n\t/**\n\t * Returns the set of constraints connected via the associated variables.\n\t * @return A set of constraints.\n\t */\n\tabstract neighbors(): Constraint[];\n\n\t/**\n\t * Calculates the highest consistency degree.\n\t * That is, it seeks the highest satisfaction degree of the possible combinations of variable assignments for a given constraint.\n\t * When all associated variables have been assigned values, it returns the same value as getSatisfactionDegree().\n\t * @return The highest consistency degree.\n\t */\n\tabstract highestConsistencyDegree(): number;\n\n\t/**\n\t * Calculates the lowest consistency degree.\n\t * That is, it seeks the lowest satisfaction degree of the possible combinations of variable assignments for a given constraint.\n\t * When all associated variables have been assigned values, it returns the same value as getSatisfactionDegree().\n\t * @return The lowest consistency degree.\n\t */\n\tabstract lowestConsistencyDegree(): number;\n\n}\n", "/**\n * The class represents an unary constraint.\n * The constructor is not called directly, since it is created by the Problem.\n *\n * @author Takuto Yanagida\n * @version 2023-04-11\n */\n\nimport { Constraint } from './constraint';\nimport { Variable } from './variable';\nimport { Relation } from './relation';\n\nexport class Constraint1 extends Constraint {\n\n\t#vars: [Variable] = [] as unknown as [Variable];\n\n\t// Called only from Problem.\n\tconstructor(r: Relation, v: Variable) {\n\t\tsuper(r);\n\t\tthis.#vars = [v];\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tsize(): number {\n\t\treturn 1;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tat(index: number): Variable {\n\t\tif (index === 0) return this.#vars[0];\n\t\tthrow new RangeError();\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\t[Symbol.iterator](): Iterator<Variable> {\n\t\treturn this.#vars[Symbol.iterator]();\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\thas(v: Variable) {\n\t\treturn v === this.#vars[0];\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tindexOf(v: Variable) {\n\t\treturn (v === this.#vars[0]) ? 0 : -1;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\temptyVariableSize() {\n\t\treturn this.#vars[0].isEmpty() ? 1 : 0;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tisDefined(): boolean {\n\t\treturn !this.#vars[0].isEmpty();\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tisSatisfied(): -1|0|1 {\n\t\tif (this.#vars[0].isEmpty()) return Constraint.UNDEFINED;\n\t\treturn this.crispRelation().isSatisfied(this.#vars[0].value()) ? 1 : 0;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tsatisfactionDegree(): number {\n\t\tif (this.#vars[0].isEmpty()) return Constraint.UNDEFINED;\n\t\treturn this.fuzzyRelation().satisfactionDegree(this.#vars[0].value());\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tneighbors(): Constraint[] {\n\t\tconst cs: Constraint[] = [];\n\t\tfor (const c of this.#vars[0]) {\n\t\t\tif (c !== this as unknown as Constraint) cs.push(c);\n\t\t}\n\t\treturn cs;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\thighestConsistencyDegree(): number {\n\t\tconst sd = this.satisfactionDegree();\n\t\tif (sd !== Constraint.UNDEFINED) {\n\t\t\treturn sd;\n\t\t}\n\t\tlet cd = 0;\n\n\t\tfor (const val of this.#vars[0].domain()) {\n\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val);\n\t\t\tif (s > cd) cd = s;\n\t\t\tif (cd === 1) break;\n\t\t}\n\t\treturn cd;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tlowestConsistencyDegree(): number {\n\t\tconst sd = this.satisfactionDegree();\n\t\tif (sd !== Constraint.UNDEFINED) {\n\t\t\treturn sd;\n\t\t}\n\t\tlet cd = 1;\n\n\t\tfor (const val of this.#vars[0].domain()) {\n\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val);\n\t\t\tif (s < cd) cd = s;\n\t\t\tif (cd === 0) break;\n\t\t}\n\t\treturn cd;\n\t}\n\n}\n", "/**\n * The class represents an binary constraint.\n * The constructor is not called directly, since it is created by the Problem.\n *\n * @author Takuto Yanagida\n * @version 2023-04-16\n */\n\nimport { Constraint } from './constraint';\nimport { Variable } from './variable';\nimport { Relation } from './relation';\n\nexport class Constraint2 extends Constraint {\n\n\t#vars: [Variable, Variable] = [] as unknown as [Variable, Variable];\n\n\t// Called only from Problem.\n\tconstructor(r: Relation, v1: Variable, v2: Variable) {\n\t\tsuper(r);\n\t\tthis.#vars = [v1, v2];\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tsize(): number {\n\t\treturn 2;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tat(index: number): Variable {\n\t\tif (index === 0) return this.#vars[0];\n\t\tif (index === 1) return this.#vars[1];\n\t\tthrow new RangeError();\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\t[Symbol.iterator](): Iterator<Variable> {\n\t\treturn this.#vars[Symbol.iterator]();\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\thas(v: Variable): boolean {\n\t\treturn this.#vars[0] === v || this.#vars[1] === v;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tindexOf(v: Variable): number {\n\t\tif (v === this.#vars[0]) return 0;\n\t\tif (v === this.#vars[1]) return 1;\n\t\treturn -1;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\temptyVariableSize(): number {\n\t\tlet sum = 0;\n\t\tif (this.#vars[0].isEmpty()) ++sum;\n\t\tif (this.#vars[1].isEmpty()) ++sum;\n\t\treturn sum;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tisDefined(): boolean {\n\t\treturn !this.#vars[0].isEmpty() && !this.#vars[1].isEmpty();\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tisSatisfied(): -1|0|1 {\n\t\tif (this.#vars[0].isEmpty() || this.#vars[1].isEmpty()) return Constraint.UNDEFINED;\n\t\treturn this.crispRelation().isSatisfied(this.#vars[0].value(), this.#vars[1].value()) ? 1 : 0;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tsatisfactionDegree(): number {\n\t\tif (this.#vars[0].isEmpty() || this.#vars[1].isEmpty()) return Constraint.UNDEFINED;\n\t\treturn this.fuzzyRelation().satisfactionDegree(this.#vars[0].value(), this.#vars[1].value());\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tneighbors(): Constraint[] {\n\t\tconst cs = [];\n\t\tfor (const c of this.#vars[0]) {\n\t\t\tif (c !== this) cs.push(c);\n\t\t}\n\t\tfor (const c of this.#vars[1]) {\n\t\t\tif (c !== this) cs.push(c);\n\t\t}\n\t\treturn cs;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\thighestConsistencyDegree(): number {\n\t\tconst sd = this.satisfactionDegree();\n\t\tif (sd !== Constraint.UNDEFINED) {\n\t\t\treturn sd;\n\t\t}\n\t\tlet cd = 0;\n\t\tconst val1 = this.#vars[0].value();\n\t\tconst val2 = this.#vars[1].value();\n\t\tconst d1   = this.#vars[0].domain();\n\t\tconst d2   = this.#vars[1].domain();\n\n\t\tif (this.#vars[0].isEmpty() && !this.#vars[1].isEmpty()) {\n\t\t\tfor (const val1 of d1) {\n\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2);\n\t\t\t\tif (s > cd) cd = s;\n\t\t\t\tif (cd === 1) break;\n\t\t\t}\n\t\t} else if (!this.#vars[0].isEmpty() && this.#vars[1].isEmpty()) {\n\t\t\tfor (const val2 of d2) {\n\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2);\n\t\t\t\tif (s > cd) cd = s;\n\t\t\t\tif (cd === 1) break;\n\t\t\t}\n\t\t} else {\n\t\t\tfor (const val1 of d1) {\n\t\t\t\tfor (const val2 of d2) {\n\t\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2);\n\t\t\t\t\tif (s > cd) cd = s;\n\t\t\t\t\tif (cd === 1) break;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn cd;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tlowestConsistencyDegree(): number {\n\t\tconst sd = this.satisfactionDegree();\n\t\tif (sd !== Constraint.UNDEFINED) {\n\t\t\treturn sd;\n\t\t}\n\t\tlet cd = 1;\n\t\tconst val1 = this.#vars[0].value();\n\t\tconst val2 = this.#vars[1].value();\n\t\tconst d1   = this.#vars[0].domain();\n\t\tconst d2   = this.#vars[1].domain();\n\n\t\tif (this.#vars[0].isEmpty() && !this.#vars[1].isEmpty()) {\n\t\t\tfor (const val1 of d1) {\n\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2);\n\t\t\t\tif (s < cd) cd = s;\n\t\t\t\tif (cd === 0) break;\n\t\t\t}\n\t\t} else if (!this.#vars[0].isEmpty() && this.#vars[1].isEmpty()) {\n\t\t\tfor (const val2 of d2) {\n\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2);\n\t\t\t\tif (s < cd) cd = s;\n\t\t\t\tif (cd === 0) break;\n\t\t\t}\n\t\t} else {\n\t\t\tfor (const val1 of d1) {\n\t\t\t\tfor (const val2 of d2) {\n\t\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2);\n\t\t\t\t\tif (s < cd) cd = s;\n\t\t\t\t\tif (cd === 0) break;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn cd;\n\t}\n\n}\n", "/**\n * The class represents an 3-ary constraint.\n * The constructor is not called directly, since it is created by the Problem.\n *\n * @author Takuto Yanagida\n * @version 2023-04-11\n */\n\nimport { Constraint } from './constraint';\nimport { Variable } from './variable';\nimport { Relation } from './relation';\n\nexport class Constraint3 extends Constraint {\n\n\t#vars: [Variable, Variable, Variable] = [] as unknown as [Variable, Variable, Variable];\n\n\t// Called only from Problem.\n\tconstructor(r: Relation, v1: Variable, v2: Variable, v3: Variable) {\n\t\tsuper(r);\n\t\tthis.#vars = [v1, v2, v3];\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tsize(): number {\n\t\treturn 3;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tat(index: number): Variable {\n\t\tif (index === 0) return this.#vars[0];\n\t\tif (index === 1) return this.#vars[1];\n\t\tif (index === 2) return this.#vars[2];\n\t\tthrow new RangeError();\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\t[Symbol.iterator](): Iterator<Variable> {\n\t\treturn this.#vars[Symbol.iterator]();\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\thas(v: Variable): boolean {\n\t\treturn this.#vars[0] === v || this.#vars[1] === v || this.#vars[2] === v;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tindexOf(v: Variable): number {\n\t\tif (v === this.#vars[0]) return 0;\n\t\tif (v === this.#vars[1]) return 1;\n\t\tif (v === this.#vars[2]) return 2;\n\t\treturn -1;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\temptyVariableSize(): number {\n\t\tlet sum = 0;\n\t\tif (this.#vars[0].isEmpty()) ++sum;\n\t\tif (this.#vars[1].isEmpty()) ++sum;\n\t\tif (this.#vars[2].isEmpty()) ++sum;\n\t\treturn sum;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tisDefined(): boolean {\n\t\treturn !this.#vars[0].isEmpty() && !this.#vars[1].isEmpty() && !this.#vars[2].isEmpty();\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tisSatisfied(): -1|0|1 {\n\t\tif (this.#vars[0].isEmpty() || this.#vars[1].isEmpty() || this.#vars[2].isEmpty()) return -1;\n\t\treturn this.crispRelation().isSatisfied(this.#vars[0].value(), this.#vars[1].value(), this.#vars[2].value()) ? 1 : 0;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tsatisfactionDegree(): number {\n\t\tif (this.#vars[0].isEmpty() || this.#vars[1].isEmpty() || this.#vars[2].isEmpty()) return Constraint.UNDEFINED;\n\t\treturn this.fuzzyRelation().satisfactionDegree(this.#vars[0].value(), this.#vars[1].value(), this.#vars[2].value());\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tneighbors(): Constraint[] {\n\t\tconst cs = [];\n\t\tfor (const c of this.#vars[0]) {\n\t\t\tif (c !== this) cs.push(c);\n\t\t}\n\t\tfor (const c of this.#vars[1]) {\n\t\t\tif (c !== this) cs.push(c);\n\t\t}\n\t\tfor (const c of this.#vars[2]) {\n\t\t\tif (c !== this) cs.push(c);\n\t\t}\n\t\treturn cs;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\thighestConsistencyDegree(): number {\n\t\tconst sd = this.satisfactionDegree();\n\t\tif (sd !== Constraint.UNDEFINED) {\n\t\t\treturn sd;\n\t\t}\n\t\tlet cd = 1;\n\t\tconst val1 = this.#vars[0].value();\n\t\tconst val2 = this.#vars[1].value();\n\t\tconst val3 = this.#vars[2].value();\n\t\tconst d1   = this.#vars[0].domain();\n\t\tconst d2   = this.#vars[1].domain();\n\t\tconst d3   = this.#vars[2].domain();\n\n\t\tif (this.#vars[0].isEmpty() && !this.#vars[1].isEmpty() && !this.#vars[2].isEmpty()) {\n\t\t\tfor (const val1 of d1) {\n\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2, val3);\n\t\t\t\tif (s > cd) cd = s;\n\t\t\t\tif (cd === 1) break;\n\t\t\t}\n\t\t} else if (!this.#vars[0].isEmpty() && this.#vars[1].isEmpty() && !this.#vars[2].isEmpty()) {\n\t\t\tfor (const val2 of d2) {\n\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2, val3);\n\t\t\t\tif (s > cd) cd = s;\n\t\t\t\tif (cd === 1) break;\n\t\t\t}\n\t\t} else if (!this.#vars[0].isEmpty() && !this.#vars[1].isEmpty() && this.#vars[2].isEmpty()) {\n\t\t\tfor (const val3 of d3) {\n\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2, val3);\n\t\t\t\tif (s > cd) cd = s;\n\t\t\t\tif (cd === 1) break;\n\t\t\t}\n\n\t\t} else if (this.#vars[0].isEmpty() && this.#vars[1].isEmpty() && !this.#vars[2].isEmpty()) {\n\t\t\tfor (const val1 of d1) {\n\t\t\t\tfor (const val2 of d2) {\n\t\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2, val3);\n\t\t\t\t\tif (s > cd) cd = s;\n\t\t\t\t\tif (cd === 1) break;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (this.#vars[0].isEmpty() && !this.#vars[1].isEmpty() && this.#vars[2].isEmpty()) {\n\t\t\tfor (const val1 of d1) {\n\t\t\t\tfor (const val3 of d3) {\n\t\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2, val3);\n\t\t\t\t\tif (s > cd) cd = s;\n\t\t\t\t\tif (cd === 1) break;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (!this.#vars[0].isEmpty() && this.#vars[1].isEmpty() && this.#vars[2].isEmpty()) {\n\t\t\tfor (const val2 of d2) {\n\t\t\t\tfor (const val3 of d3) {\n\t\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2, val3);\n\t\t\t\t\tif (s > cd) cd = s;\n\t\t\t\t\tif (cd === 1) break;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (const val1 of d1) {\n\t\t\t\tfor (const val2 of d2) {\n\t\t\t\t\tfor (const val3 of d3) {\n\t\t\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2, val3);\n\t\t\t\t\t\tif (s > cd) cd = s;\n\t\t\t\t\t\tif (cd === 1) break;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn cd;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tlowestConsistencyDegree(): number {\n\t\tconst sd = this.satisfactionDegree();\n\t\tif (sd !== Constraint.UNDEFINED) {\n\t\t\treturn sd;\n\t\t}\n\t\tlet cd = 1;\n\t\tconst val1 = this.#vars[0].value();\n\t\tconst val2 = this.#vars[1].value();\n\t\tconst val3 = this.#vars[2].value();\n\t\tconst d1   = this.#vars[0].domain();\n\t\tconst d2   = this.#vars[1].domain();\n\t\tconst d3   = this.#vars[2].domain();\n\n\t\tif (this.#vars[0].isEmpty() && !this.#vars[1].isEmpty() && !this.#vars[2].isEmpty()) {\n\t\t\tfor (const val1 of d1) {\n\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2, val3);\n\t\t\t\tif (s < cd) cd = s;\n\t\t\t\tif (cd === 0) break;\n\t\t\t}\n\t\t} else if (!this.#vars[0].isEmpty() && this.#vars[1].isEmpty() && !this.#vars[2].isEmpty()) {\n\t\t\tfor (const val2 of d2) {\n\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2, val3);\n\t\t\t\tif (s < cd) cd = s;\n\t\t\t\tif (cd === 0) break;\n\t\t\t}\n\t\t} else if (!this.#vars[0].isEmpty() && !this.#vars[1].isEmpty() && this.#vars[2].isEmpty()) {\n\t\t\tfor (const val3 of d3) {\n\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2, val3);\n\t\t\t\tif (s < cd) cd = s;\n\t\t\t\tif (cd === 0) break;\n\t\t\t}\n\t\t} else if (this.#vars[0].isEmpty() && this.#vars[1].isEmpty() && !this.#vars[2].isEmpty()) {\n\t\t\tfor (const val1 of d1) {\n\t\t\t\tfor (const val2 of d2) {\n\t\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2, val3);\n\t\t\t\t\tif (s < cd) cd = s;\n\t\t\t\t\tif (cd === 0) break;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (this.#vars[0].isEmpty() && !this.#vars[1].isEmpty() && this.#vars[2].isEmpty()) {\n\t\t\tfor (const val1 of d1) {\n\t\t\t\tfor (const val3 of d3) {\n\t\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2, val3);\n\t\t\t\t\tif (s < cd) cd = s;\n\t\t\t\t\tif (cd === 0) break;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (!this.#vars[0].isEmpty() && this.#vars[1].isEmpty() && this.#vars[2].isEmpty()) {\n\t\t\tfor (const val2 of d2) {\n\t\t\t\tfor (const val3 of d3) {\n\t\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2, val3);\n\t\t\t\t\tif (s < cd) cd = s;\n\t\t\t\t\tif (cd === 0) break;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (const val1 of d1) {\n\t\t\t\tfor (const val2 of d2) {\n\t\t\t\t\tfor (const val3 of d3) {\n\t\t\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(val1, val2, val3);\n\t\t\t\t\t\tif (s < cd) cd = s;\n\t\t\t\t\t\tif (cd === 0) break;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn cd;\n\t}\n\n}\n", "/**\n * The class represents an n-ary constraint.\n * The constructor is not called directly, since it is created by the Problem.\n *\n * @author Takuto Yanagida\n * @version 2023-04-11\n */\n\nimport { Constraint } from './constraint';\nimport { Variable } from './variable';\nimport { Relation } from './relation';\n\nexport class ConstraintN extends Constraint {\n\n\t#vars: Variable[];\n\t#vals: number[];  // For reuse.\n\n\t// Called only from Problem.\n\tconstructor(r: Relation, ...vs: Variable[]) {\n\t\tsuper(r);\n\t\tthis.#vars = [...vs];\n\t\tthis.#vals = new Array(this.#vars.length);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tsize(): number {\n\t\treturn this.#vars.length;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tat(index: number) {\n\t\treturn this.#vars[index];\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\t[Symbol.iterator](): Iterator<Variable> {\n\t\treturn this.#vars[Symbol.iterator]();\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\thas(v: Variable): boolean {\n\t\treturn this.#vars.includes(v);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tindexOf(v: Variable): number {\n\t\treturn this.#vars.indexOf(v);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\temptyVariableSize(): number {\n\t\tlet sum = 0;\n\t\tfor (const v of this.#vars) {\n\t\t\tif (v.isEmpty()) ++sum;\n\t\t}\n\t\treturn sum;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tisDefined() {\n\t\tfor (const v of this.#vars) {\n\t\t\tif (v.isEmpty()) return false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tisSatisfied(): -1|0|1 {\n\t\tfor (let i = 0; i < this.#vars.length; ++i) {\n\t\t\tif (this.#vars[i].isEmpty()) return -1;\n\t\t\tthis.#vals[i] = this.#vars[i].value();\n\t\t}\n\t\treturn this.crispRelation().isSatisfied(...this.#vals) ? 1 : 0;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tsatisfactionDegree(): number {\n\t\tfor (let i = 0; i < this.#vars.length; ++i) {\n\t\t\tconst v = this.#vars[i];\n\t\t\tif (v.isEmpty()) return Constraint.UNDEFINED;\n\t\t\tthis.#vals[i] = v.value();\n\t\t}\n\t\treturn this.fuzzyRelation().satisfactionDegree(...this.#vals);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tneighbors() {\n\t\tconst cs = [];\n\t\tfor (const v of this.#vars) {\n\t\t\tfor (const c of v) {\n\t\t\t\tif (c !== this) cs.push(c);\n\t\t\t}\n\t\t}\n\t\treturn cs;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\thighestConsistencyDegree(): number {\n\t\tconst sd = this.satisfactionDegree();\n\t\tif (sd !== Constraint.UNDEFINED) {\n\t\t\treturn sd;\n\t\t}\n\t\tconst emptyIndices = new Array(this.emptyVariableSize());\n\t\tlet c = 0;\n\n\t\tfor (let i = 0; i < this.#vars.length; ++i) {\n\t\t\tif (this.#vars[i].isEmpty()) {\n\t\t\t\temptyIndices[c++] = i;\n\t\t\t} else {\n\t\t\t\tthis.#vals[i] = this.#vars[i].value();\n\t\t\t}\n\t\t}\n\t\treturn this.checkHCD(emptyIndices, 0, 0);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\tlowestConsistencyDegree(): number {\n\t\tconst sd = this.satisfactionDegree();\n\t\tif (sd !== Constraint.UNDEFINED) {\n\t\t\treturn sd;\n\t\t}\n\t\tconst emptyIndices = new Array(this.emptyVariableSize());\n\t\tlet c = 0;\n\n\t\tfor (let i = 0; i < this.#vars.length; ++i) {\n\t\t\tif (this.#vars[i].isEmpty()) {\n\t\t\t\temptyIndices[c++] = i;\n\t\t\t} else {\n\t\t\t\tthis.#vals[i] = this.#vars[i].value();\n\t\t\t}\n\t\t}\n\t\treturn this.checkLCD(emptyIndices, 0, 1);\n\t}\n\n\tcheckHCD(emptyIndices: number[], currentStep: number, cd: number): number {\n\t\tconst index = emptyIndices[currentStep];\n\t\tconst d     = this.#vars[index].domain();\n\n\t\tif (currentStep === emptyIndices.length - 1) {\n\t\t\tfor (const val of d) {\n\t\t\t\tthis.#vals[index] = val;\n\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(...this.#vals);\n\t\t\t\tif (s > cd) cd = s;\n\t\t\t\tif (cd === 1) break;\n\t\t\t}\n\t\t} else {\n\t\t\tfor (const val of d) {\n\t\t\t\tthis.#vals[index] = val;\n\t\t\t\tcd = this.checkLCD(emptyIndices, currentStep + 1, cd);\n\t\t\t}\n\t\t}\n\t\treturn cd;\n\t}\n\n\tcheckLCD(emptyIndices: number[], currentStep: number, cd: number): number {\n\t\tconst index = emptyIndices[currentStep];\n\t\tconst d     = this.#vars[index].domain();\n\n\t\tif (currentStep === emptyIndices.length - 1) {\n\t\t\tfor (const val of d) {\n\t\t\t\tthis.#vals[index] = val;\n\t\t\t\tconst s = this.fuzzyRelation().satisfactionDegree(...this.#vals);\n\t\t\t\tif (s < cd) cd = s;\n\t\t\t\tif (cd === 0) break;\n\t\t\t}\n\t\t} else {\n\t\t\tfor (const val of d) {\n\t\t\t\tthis.#vals[index] = val;\n\t\t\t\tcd = this.checkLCD(emptyIndices, currentStep + 1, cd);\n\t\t\t}\n\t\t}\n\t\treturn cd;\n\t}\n\n}\n", "/**\n * The class represents a constraint satisfaction problem.\n *\n * @author Takuto Yanagida\n * @version 2023-04-16\n */\n\nimport { Variable } from './variable';\nimport { Domain } from './domain';\nimport { DomainRanged } from './domain-ranged';\nimport { DomainArbitrary } from './domain-arbitrary';\nimport { Constraint } from './constraint';\nimport { Constraint1 } from './constraint-1';\nimport { Constraint2 } from './constraint-2';\nimport { Constraint3 } from './constraint-3';\nimport { ConstraintN } from './constraint-n';\nimport { Relation } from './relation';\n\nexport class Problem {\n\n\t#fv = (o: Problem, d: Domain): Variable => new Variable(o, d);\n\t#fc: (r: Relation, vs: Variable[]) => Constraint = (r, vs) => {\n\t\tif (vs.length === 1) return new Constraint1(r, vs[0]) as unknown as Constraint;\n\t\tif (vs.length === 2) return new Constraint2(r, vs[0], vs[1]) as unknown as Constraint;\n\t\tif (vs.length === 3) return new Constraint3(r, vs[0], vs[1], vs[2]) as unknown as Constraint;\n\t\treturn new ConstraintN(r, ...vs) as unknown as Constraint;\n\t}\n\n\t_isFuzzy: boolean = false;\n\t_vars: Variable[]    = [];\n\t_cons: Constraint[]    = [];\n\n\t// Methods for Modifying Factories --------\n\n\t/**\n\t * Sets a variable factory.\n\t */\n\tsetVariableFactory(fn: (o: Problem, d: Domain) => Variable): void {\n\t\tthis.#fv = fn;\n\t}\n\n\t/**\n\t * Sets a variable factory.\n\t */\n\tsetConstraintFactory(fn: (r: Relation, vs: Variable[]) => Constraint): void {\n\t\tthis.#fc = fn;\n\t}\n\n\t// Generation Methods --------\n\n\t/**\n\t * Adds a variable to this problem.\n\t * @param Variable v A variable.\n\t */\n\taddVariable(v: Variable) {\n\t\tv.setIndex(this._vars.length);\n\t\tthis._vars.push(v);\n\t}\n\n\t/**\n\t * Generates a domain.\n\t * @param args {\n\t *   @type Array 'values' Multiple values.\n\t *\n\t *   @type Number 'min' Minimum value.\n\t *   @type Number 'max' Maximum value.\n\t * }\n\t * @return A domain.\n\t */\n\tcreateDomain(args: {values: number[]}|{min: number, max: number}) {\n\t\tif ('values' in args) {\n\t\t\treturn new DomainArbitrary(args.values);\n\t\t} else if ('min' in args && 'max' in args) {\n\t\t\treturn new DomainRanged(args.min, args.max);\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Generates a variable.\n\t * @param Array args {\n\t *   @type string 'name'   Display name.\n\t *   @type Domain 'domain' A domain.\n\t *   @type *      'value'  A value.\n\t * }\n\t * @return A variable.\n\t */\n\tcreateVariable(args: {name: string, domain: Domain, value?: number}|{variable: Variable}): Variable {\n\t\tif ('variable' in args) {\n\t\t\tconst v = this.#fv(this, args.variable.domain());\n\t\t\tthis.addVariable(v);\n\t\t\tv.setName(v.name());\n\t\t\tv.assign(v.value());\n\t\t\treturn v;\n\t\t} else {\n\t\t\tif (args.value !== undefined && !args.domain.contains(args.value)) {\n\t\t\t\tthrow new Error();\n\t\t\t}\n\t\t\tconst v = this.#fv(this, args.domain);\n\t\t\tthis.addVariable(v);\n\t\t\tif (args.name) v.setName(args.name);\n\t\t\tif (args.value) v.assign(args.value);\n\t\t\treturn v;\n\t\t}\n\t}\n\n\t/**\n\t * Generates a constraint.\n\t * @param Array args {\n\t *   @type string   'name'      Display name.\n\t *   @type Array    'variables' Variables.\n\t *   @type Relation 'relation'  A relation.\n\t * }\n\t * @return A constraint.\n\t */\n\tcreateConstraint(args: {name?: string, variables: Variable[], relation: Relation}) {\n\t\tfor (const v of args.variables) {\n\t\t\tif (v.owner() !== this) return null;\n\t\t}\n\t\tconst c = this.#fc(args.relation, args.variables);\n\t\tc.setIndex(this._cons.length);\n\t\tthis._cons.push(c);\n\t\tfor (const v of args.variables) v.connect(c);\n\t\tif (c.isFuzzy()) this._isFuzzy = true;\n\t\tif ('name' in args) c.setName(args.name as string);\n\t\treturn c;\n\t}\n\n\t//  Modification Methods --------\n\n\t/**\n\t * Remove the constraint.\n\t * @param c Constraints to be removed.\n\t */\n\tremoveConstraint(c: Constraint): void {\n\t\tconst index = this._cons.indexOf(c);\n\t\tthis._cons.splice(index, 1);\n\t\tfor (let i = index; i < this._cons.length; ++i) {\n\t\t\tthis._cons[i].setIndex(i);\n\t\t}\n\t\tfor (const v of c) {\n\t\t\tv.disconnect(c);\n\t\t}\n\t\tthis._isFuzzy = false;\n\t\tfor (const c of this._cons) {\n\t\t\tif (c.isFuzzy()) {\n\t\t\t\tthis._isFuzzy = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Changes the status of all variables to unassigned.\n\t */\n\tclearAllVariables(): void {\n\t\tfor (const v of this._vars) {\n\t\t\tv.clear();\n\t\t}\n\t}\n\n\t/**\n\t * Reverse the order of variables.\n\t * The index of each variable is reassigned.\n\t */\n\treverseVariables(): void {\n\t\tthis._vars.reverse();\n\t\tfor (let i = 0; i < this._vars.length; ++i) {\n\t\t\tthis._vars[i].setIndex(i);\n\t\t}\n\t}\n\n\t/**\n\t * Sorts variables using a specified comparator.\n\t * The index of each variable is reassigned.\n\t * @param comparator A comparator.\n\t */\n\tsortVariables(comparator: (a: Variable, b: Variable) => number): void {\n\t\tthis._vars.sort(comparator);\n\t\tfor (let i = 0; i < this._vars.length; ++i) {\n\t\t\tthis._vars[i].setIndex(i);\n\t\t}\n\t}\n\n\t// Methods for Variables --------\n\n\t/**\n\t * Returns the number of variables in the problem.\n\t * @return Number of variables\n\t */\n\tvariableSize(): number {\n\t\treturn this._vars.length;\n\t}\n\n\t/**\n\t * Returns a variable by index.\n\t * @param index Index (0 <= index < getVariableSize()).\n\t * @return A variable\n\t */\n\tvariableAt(index: number): Variable {\n\t\treturn this._vars[index];\n\t}\n\n\t/**\n\t * Returns a variable by name.\n\t * @param name Name.\n\t * @return A variable.\n\t */\n\tvariableOf(name: string): Variable|null {\n\t\tfor (const v of this._vars) {\n\t\t\tif (v.name() === name) return v;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns whether the variable is contained or not.\n\t * @param v A variable.\n\t * @return True if contained.\n\t */\n\thasVariable(v: Variable): boolean {\n\t\treturn this._vars.includes(v);\n\t}\n\n\t/**\n\t * Returns the list of variables.\n\t * The returned list is not allowed to be modified.\n\t * @return The variable list.\n\t */\n\tvariables(): Variable[] {\n\t\treturn this._vars;\n\t}\n\n\t// Methods for Constraints --------\n\n\t/**\n\t * Gets the number of constraints in the problem.\n\t * @return Number of constraints\n\t */\n\tconstraintSize(): number {\n\t\treturn this._cons.length;\n\t}\n\n\t/**\n\t * Returns a constraint with an index.\n\t * @param index Index (0 <= index < constraintSize()).\n\t * @return A constraint.\n\t */\n\tconstraintAt(index: number): Constraint {\n\t\treturn this._cons[index];\n\t}\n\n\t/**\n\t * Returns a constraint by name.\n\t * @param name Name.\n\t * @return A constraint.\n\t */\n\tconstraintOf(name: string): Constraint|null {\n\t\tfor (const c of this._cons) {\n\t\t\tif (c.name() === name) return c;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns whether the constraint is contained or not.\n\t * @param c A constraint\n\t * @return True if contained.\n\t */\n\thasConstraint(c: Constraint): boolean {\n\t\treturn this._cons.includes(c);\n\t}\n\n\t/**\n\t * Returns the list of constraint.\n\t * The returned list is not allowed to be modified.\n\t * @return The constraint list.\n\t */\n\tconstraints(): Constraint[] {\n\t\treturn this._cons;\n\t}\n\n\t/**\n\t * Gets the constraints that exist between the specified variables.\n\t * Returns an empty array if no constraints exist.\n\t * If there are multiple constraints between two variables (including the case of n-ary constraints (2 < n)), they will be included in the return array.\n\t * @param v1 Variable 1\n\t * @param v2 Variable 2\n\t * @return Constraints.\n\t */\n\tconstraintsBetween(v1: Variable, v2: Variable): Constraint[] {\n\t\tconst cs = [];\n\t\tfor (const c of v1) {\n\t\t\tif (c.has(v2)) cs.push(c);\n\t\t}\n\t\treturn cs;\n\t}\n\n\t/**\n\t * Finds the set of worst satisfiable constraints in a fuzzy constraint satisfaction problem.\n\t * @return Array of constraints and worst satisfaction degree.\n\t */\n\tconstraintsWithWorstSatisfactionDegree(): [Constraint[], number] {\n\t\tconst cs: Constraint[] = [];\n\t\tlet cur = 1;\n\t\tfor (const c of this._cons) {\n\t\t\tconst s = c.satisfactionDegree();\n\t\t\tif (s < cur) {\n\t\t\t\tcur = s;\n\t\t\t\tcs.length = 0;\n\t\t\t\tcs.push(c);\n\t\t\t} else if (s - cur < Number.MIN_VALUE * 10) {\n\t\t\t\tcs.push(c);\n\t\t\t}\n\t\t}\n\t\treturn [cs, cur];\n\t}\n\n\t// State acquisition methods --------\n\n\t/**\n\t * Returns the worst satisfaction degree for the constraints contained in the fuzzy constraint satisfaction problem.\n\t * If the degree cannot be determined because the variable has not yet been assigned a value or for some other reason, -1 is returned.\n\t * @return Worst satisfaction degree.\n\t */\n\tworstSatisfactionDegree(): number {\n\t\tlet cs = 1;\n\t\tfor (const c of this._cons) {\n\t\t\tconst s = c.satisfactionDegree();\n\t\t\tif (s === Constraint.UNDEFINED) return Constraint.UNDEFINED;\n\t\t\tif (s < cs) cs = s;\n\t\t}\n\t\treturn cs;\n\t}\n\n\t/**\n\t * Gets the average of satisfaction degrees of the fuzzy constraints.\n\t * @return Average of satisfaction degrees.\n\t */\n\taverageSatisfactionDegree(): number {\n\t\tlet ave = 0;\n\t\tfor (const c of this._cons) {\n\t\t\tave += c.satisfactionDegree();\n\t\t}\n\t\tave = ave / this._cons.length;\n\t\treturn ave;\n\t}\n\n\t/**\n\t * Returns the number of variables in the problem that have not been assigned a value.\n\t * @return Number of variables with no value assigned.\n\t */\n\temptyVariableSize(): number {\n\t\tlet num = 0;\n\t\tfor (const v of this._vars) {\n\t\t\tif (v.isEmpty()) num++;\n\t\t}\n\t\treturn num;\n\t}\n\n\t/**\n\t * Gets the constraint density (number of constraints/number of variables).\n\t * @return Constraint density.\n\t */\n\tconstraintDensity(): number {\n\t\treturn this.constraintSize() / this.variableSize();\n\t}\n\n\t/**\n\t * Returns whether the constraint satisfaction problem has any variables with empty domain.\n\t * @return True if it exists.\n\t */\n\thasEmptyDomain(): boolean {\n\t\tfor (const v of this._vars) {\n\t\t\tif (v.domain().size() === 0) return true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns whether the problem is a fuzzy constraint satisfaction problem, i.e., whether it contains fuzzy constraints.\n\t * @return True if it is a fuzzy constraint satisfaction problem.\n\t */\n\tisFuzzy(): boolean {\n\t\treturn this._isFuzzy;\n\t}\n\n}\n", "/**\n * The class represents a crisp constraint satisfaction problem.\n *\n * @author Takuto Yanagida\n * @version 2023-04-16\n */\n\nimport { Problem } from './problem';\nimport { Variable } from './variable';\nimport { Constraint } from './constraint';\nimport { Relation } from './relation';\n\nexport class CrispProblem extends Problem {\n\n\t/**\n\t * Generates a crisp constraint.\n\t * @param Array args {\n\t *   @type string   'name'      Display name.\n\t *   @type Array    'variables' Variables.\n\t *   @type Relation 'relation'  A relation.\n\t * }\n\t * @return A constraint.\n\t */\n\tcreateConstraint(args: { name?: string, variables: Variable[], relation: Relation; }) {\n\t\tif ('satisfactionDegree' in args.relation) throw new Error();\n\t\treturn super.createConstraint(args);\n\t}\n\n\t/**\n\t * Returns whether the problem is a fuzzy constraint satisfaction problem, i.e., whether it contains fuzzy constraints.\n\t * @return Always returns false.\n\t */\n\tisFuzzy(): boolean {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns the rate of constraints that are satisfied out of all constraints.\n\t * @return Rate of satisfied constraints.\n\t */\n\tsatisfiedConstraintRate() {\n\t\treturn this.satisfiedConstraintSize() / this._cons.length;\n\t}\n\n\t/**\n\t * Returns the number of satisfied constraints.\n\t * Undefined constraints are ignored.\n\t * @return Number of satisfied constraints.\n\t */\n\tsatisfiedConstraintSize() {\n\t\tlet count = 0;\n\t\tfor (const c of this._cons) {\n\t\t\tif (c.isSatisfied() === 1) ++count;\n\t\t}\n\t\treturn count;\n\t}\n\n\t/**\n\t * Returns a list of violating constraints.\n\t * Undefined constraints are ignored.\n\t * @return Array of constraints.\n\t */\n\tviolatingConstraints(): Constraint[] {\n\t\tconst cs = [];\n\t\tfor (const c of this._cons) {\n\t\t\tif (c.isSatisfied() === 0) cs.push(c);\n\t\t}\n\t\treturn cs;\n\t}\n\n\t/**\n\t * Returns the number of violating constraints.\n\t * Undefined constraints are ignored.\n\t * @return Number of violating constraints.\n\t */\n\tviolatingConstraintSize() {\n\t\tlet count = 0;\n\t\tfor (const c of this._cons) {\n\t\t\tif (c.isSatisfied() === 0) ++count;\n\t\t}\n\t\treturn count;\n\t}\n\n}\n", "/**\n * Class that represents an observable variable.\n *\n * @author Takuto Yanagida\n * @version 2023-04-18\n */\n\nimport { Problem } from './problem';\nimport { Variable } from './variable';\nimport { Domain } from './domain';\n\nexport class ObservableVariable extends Variable {\n\n\t#observer: ((v: Variable, val: number) => void)|null;\n\n\t// Called only from Problem.\n\tconstructor(owner: Problem, d: Domain, observer: (v: Variable, val: number) => void) {\n\t\tsuper(owner, d);\n\t\tthis.#observer = observer;\n\t}\n\n\t/**\n\t * Assign a value.\n\t * @param value Value.\n\t */\n\tassign(value: number): void {\n\t\tsuper.assign(value);\n\t\tif (this.#observer) {\n\t\t\tthis.#observer(this, value);\n\t\t}\n\t}\n\n}\n", "/**\n * This class represents fuzzy relationships by table.\n *\n * @author Takuto YANAGIDA\n * @version 2023-03-26\n */\n\nimport { FuzzyRelation } from './relation-fuzzy';\nimport { Domain } from './domain';\n\nexport class FuzzyTabledRelation implements FuzzyRelation {\n\n\t#elms: number[];\n\t#doms: Domain[];\n\t#mul: number[];\n\n\tconstructor(elms: number[], doms: Domain[]) {\n\t\tthis.#elms = [...elms];\n\t\tthis.#doms = [...doms];\n\t\tthis.#mul  = new Array(doms.length);\n\n\t\tlet m = 1;\n\t\tfor (let i = this.#mul.length - 1; i >= 0; --i) {\n\t\t\tthis.#mul[i] = m;\n\t\t\tm *= doms[i].size();\n\t\t}\n\t}\n\n\t/**\n\t * Gets the satisfaction degree in this fuzzy relation.\n\t * @param vals Values of each variable\n\t * @return A satisfaction degree d (0 <= d <= 1).\n\t */\n\tsatisfactionDegree(...vals: number[]): number {\n\t\tif (this.#mul.length !== vals.length) {\n\t\t\tthrow new RangeError();\n\t\t}\n\t\tlet index = 0;\n\t\tfor (let i = 0; i < this.#mul.length; ++i) {\n\t\t\tindex += this.#mul[i] * this.#doms[i].indexOf(vals[i]);\n\t\t}\n\t\treturn this.#elms[index];\n\t}\n\n}\n", "/**\n * Fuzzy relations defined by functions.\n *\n * @author Takuto Yanagida\n * @version 2023-04-04\n */\n\nimport { FuzzyRelation } from './relation-fuzzy';\n\nexport class FuzzyRelationFunction implements FuzzyRelation {\n\n\t#fn: (...vals: number[]) => number;\n\n\tconstructor(fn: (...vals: number[]) => number) {\n\t\tthis.#fn = fn;\n\t}\n\n\t/**\n\t * Gets the satisfaction degree in this fuzzy relation.\n\t * @param vals Values of each variable\n\t * @return A satisfaction degree d (0 <= d <= 1).\n\t */\n\tsatisfactionDegree(...vals: number[]): number {\n\t\treturn this.#fn(...vals);\n\t}\n\n}\n", "/**\n * This class represents crisp relationships by table.\n *\n * @author Takuto YANAGIDA\n * @version 2023-03-26\n */\n\nimport { CrispRelation } from './relation-crisp';\nimport { Domain } from './domain';\n\nexport class CrispTabledRelation implements CrispRelation {\n\n\t#elms: (0|1)[];\n\t#doms: Domain[];\n\t#mul: number[];\n\n\tconstructor(elms: (0|1)[], doms: Domain[]) {\n\t\tthis.#elms = [...elms];\n\t\tthis.#doms = [...doms];\n\t\tthis.#mul  = new Array(doms.length);\n\n\t\tlet m = 1;\n\t\tfor (let i = this.#mul.length - 1; i >= 0; --i) {\n\t\t\tthis.#mul[i] = m;\n\t\t\tm *= doms[i].size();\n\t\t}\n\t}\n\n\t/**\n\t * Gets whether or not the relation is satisfied in this crisp relation.\n\t * @param vals Values of each variable\n\t * @return Whether or not it is satisfied.\n\t */\n\tisSatisfied(...vals: number[]): -1|0|1 {\n\t\tif (this.#mul.length !== vals.length) {\n\t\t\tthrow new RangeError();\n\t\t}\n\t\tlet index = 0;\n\t\tfor (let i = 0; i < this.#mul.length; ++i) {\n\t\t\tindex += this.#mul[i] * this.#doms[i].indexOf(vals[i]);\n\t\t}\n\t\treturn this.#elms[index];\n\t}\n\n}\n", "/**\n * Crisp relations defined by functions.\n *\n * @author Takuto Yanagida\n * @version 2023-04-04\n */\n\nimport { CrispRelation } from './relation-crisp';\n\nexport class CrispRelationFunction implements CrispRelation {\n\n\t#fn: (...vals: number[]) => -1 | 0 | 1;\n\n\tconstructor(fn: (...vals: number[]) => -1 | 0 | 1) {\n\t\tthis.#fn = fn;\n\t}\n\n\t/**\n\t * Gets whether or not the relation is satisfied in this crisp relation.\n\t * @param vals Values of each variable\n\t * @return Whether or not it is satisfied.\n\t */\n\tisSatisfied(...vals: number[]): -1 | 0 | 1 {\n\t\treturn this.#fn(...vals);\n\t}\n\n}\n", "/**\n * View of relations.\n *\n * @author Takuto Yanagida\n * @version 2023-04-12\n */\n\nimport { CrispRelation } from './relation-crisp';\nimport { FuzzyRelation } from './relation-fuzzy';\n\nexport class CrispRelationView implements CrispRelation {\n\n\t#that: FuzzyRelation;\n\n\tconstructor(that: FuzzyRelation) {\n\t\tthis.#that = that;\n\t}\n\n\tisSatisfied(...vals: number[]): -1|0|1 {\n\t\treturn this.#that.satisfactionDegree(...vals) === 1 ? 1 : 0;\n\t}\n\n}\n\nexport class FuzzyRelationView implements FuzzyRelation {\n\n\t#that: CrispRelation;\n\n\tconstructor(that: CrispRelation) {\n\t\tthis.#that = that;\n\t}\n\n\tsatisfactionDegree(...vals: number[]): number {\n\t\treturn this.#that.isSatisfied(...vals) ? 1 : 0;\n\t}\n\n}\n", "/**\n * The class for solvers for finding solutions to constraint satisfaction problems.\n *\n * @author Takuto Yanagida\n * @version 2023-04-16\n */\n\nimport { Problem } from '../problem/problem';\nimport { AssignmentList } from '../util/assignment-list';\n\nexport class Solver {\n\n\t_debug: boolean = true;\n\n\t#debugOutput: (e: any) => void = (e: any): void => console.log(e);\n\n\t/**\n\t * The crisp/fuzzy constraint satisfaction problem solved by the solver.\n\t */\n\t_pro: Problem;\n\n\t/**\n\t *  Limit number of iterations.\n\t */\n\t_iterLimit: number|null = null;\n\n\t/**\n\t * Time limit.\n\t */\n\t_timeLimit: number|null = null;\n\n\t/**\n\t * Target 'satisfied constraint rate' or 'constraint satisfaction degree'.\n\t */\n\t_targetDeg: number|null = 0.8;\n\n\t/**\n\t * Listeners of this solver.\n\t */\n\t#listener: { foundSolution: ((as: AssignmentList, wd: number) => boolean) }[] = [];\n\n\t/**\n\t * Generates a solver given a constraint satisfaction problem.\n\t * @param pro A constraint satisfaction problem.\n\t */\n\tconstructor(pro: Problem) {\n\t\tthis._pro = pro;\n\t}\n\n\t/**\n\t * Returns the name of the solver.\n\t * @return The name.\n\t */\n\tname(): string {\n\t\treturn '';\n\t}\n\n\t/**\n\t * Placeholder for implementing an algorithm.\n\t * The solve method calls this method and returns the return value of this method.\n\t * @return True if the algorithm succeeds,\n\t */\n\texec(): boolean {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Sets and limits the maximum number of iterations for the solver's behavior.\n\t * After the specified number of iterations, the solver stops as a failure. The specific behavior depends on the solver.\n\t * @param count Maximum value; null means not set.\n\t */\n\tsetIterationLimit(count: number|null = null): void {\n\t\tthis._iterLimit = count;\n\t}\n\n\t/**\n\t * Sets a time limit on the solver's behavior.\n\t * If the specified time is exceeded, the solver stops as a failure. The specific behavior depends on the solver.\n\t * @param msec Time limit. null means not set.\n\t */\n\tsetTimeLimit(msec: number|null = null): void {\n\t\tthis._timeLimit = msec;\n\t}\n\n\t/**\n\t * The goal to be achieved, which is the condition for stopping the solver, is set as the constraint satisfaction degree (fuzzy) or the percentage of constraints satisfied (crisp).\n\t * The solver stops as success if the specified percentage is reached or exceeded. The specific behavior depends on the solver.\n\t * @param rate Degree or rate. null indicates not set.\n\t */\n\tsetTargetRate(rate: number|null = null): void {\n\t\tthis._targetDeg = rate;\n\t}\n\n\t/**\n\t * Computes the solution to a constraint satisfaction problem.\n\t * The specific meaning of the return value depends on the implementation of the algorithm.\n\t * @return True if the algorithm succeeds\n\t */\n\tsolve(): boolean {\n\t\treturn this.exec();\n\t}\n\n\taddListener(l: { foundSolution: (solution: AssignmentList, worstDegree: number) => boolean; }): void {\n\t\tthis.#listener.push(l);\n\t}\n\n\tremoveListener(l: { foundSolution: (solution: AssignmentList, worstDegree: number) => boolean; }): void {\n\t\tthis.#listener.splice(this.#listener.indexOf(l), 1);\n\t}\n\n\tfoundSolution(solution: AssignmentList, worstDegree: number): boolean {\n\t\tlet finish: boolean = false;\n\n\t\tfor (const l of this.#listener) {\n\t\t\tif (l.foundSolution(solution, worstDegree)) {\n\t\t\t\tfinish = true;\n\t\t\t}\n\t\t}\n\t\treturn finish;\n\t}\n\n\n\t// -------------------------------------------------------------------------\n\n\n\t/**\n\t * Sets whether to output debug strings.\n\t * @param boolean flag Do output if true.\n\t */\n\tsetDebugMode(flag: boolean): void {\n\t\tthis._debug = flag;\n\t}\n\n\t/**\n\t * Sets a function that used for outputting debug strings.\n\t * @param function fn Function called when debug output.\n\t */\n\tsetDebugOutput(fn: (e: any) => void): void {\n\t\tthis.#debugOutput = fn;\n\t}\n\n\t_debugOutput(str: any): void {\n\t\tif (this._debug) this.#debugOutput(str);\n\t}\n\n}\n", "/**\n * The class represents a pair of variables and the values to be assigned to them.\n *\n * @author Takuto Yanagida\n * @version 2023-03-25\n */\n\nimport { Variable } from '../problem/variable';\n\nexport class Assignment {\n\n\t#variable: Variable;\n\t#value: number;\n\n\tconstructor(args: { assignment: Assignment; } | { variable: Variable; value?: number|null }) {\n\t\tif ('assignment' in args) {\n\t\t\tthis.#variable = args.assignment.variable();\n\t\t\tthis.#value = args.assignment.value();\n\t\t} else if ('variable' in args) {\n\t\t\tthis.#variable = args.variable;\n\t\t\tthis.#value = args.value ?? args.variable.value();\n\t\t} else {\n\t\t\tthrow new RangeError();\n\t\t}\n\t}\n\n\t/**\n\t * Assigns a value to a stored variable.\n\t */\n\tapply(): void {\n\t\tthis.#variable.assign(this.#value);\n\t}\n\n\t/**\n\t * Returns a string representation.\n\t * @return A string representation.\n\t */\n\ttoString(): string {\n\t\treturn `v${this.#variable.index()} <- ${this.#value}`;\n\t}\n\n\t/**\n\t * Gets the value.\n\t * @return Value.\n\t */\n\tvalue(): number {\n\t\treturn this.#value;\n\t}\n\n\t/**\n\t * Gets the variable.\n\t * @return Variable.\n\t */\n\tvariable(): Variable {\n\t\treturn this.#variable;\n\t}\n\n}\n", "/**\n * The class represents multiple variables and their assignments.\n *\n * @author Takuto Yanagida\n * @version 2023-04-16\n */\n\nimport { Assignment } from './assignment';\nimport { Variable } from '../problem/variable';\nimport { Problem } from '../problem/problem';\n\nexport class AssignmentList {\n\n\tstatic fromVariables(vs: Iterable<Variable>): AssignmentList {\n\t\tconst al = new AssignmentList();\n\t\tal.setVariables(vs);\n\t\treturn al;\n\t}\n\n\t#as: Assignment[] = [];\n\n\tconstructor() {\n\t}\n\n\tsetProblem(problem: Problem): void {\n\t\tthis.#as.length = 0;\n\t\tfor (const v of problem.variables()) {\n\t\t\tthis.#as.push(new Assignment({ variable: v, value: v.value() }));\n\t\t}\n\t}\n\n\tsetAssignmentList(al: AssignmentList): void {\n\t\tthis.#as.length = 0;\n\t\tfor (const a of al) {\n\t\t\tthis.#as.push(new Assignment({ variable: a.variable(), value: a.value() }));\n\t\t}\n\t}\n\n\tsetVariables(vs: Iterable<Variable>): void {\n\t\tthis.#as.length = 0;\n\t\tfor (const v of vs) {\n\t\t\tthis.#as.push(new Assignment({ variable: v, value: v.value() }));\n\t\t}\n\t}\n\n\taddVariable(variable: Variable, value: number|null = null): void {\n\t\tthis.#as.push(new Assignment({ variable, value }));\n\t}\n\n\tapply(): void {\n\t\tfor (const a of this.#as) a.apply();\n\t}\n\n\t/**\n\t * Remove all assignments.\n\t */\n\tclear(): void {\n\t\tthis.#as.length = 0;\n\t}\n\n\t/**\n\t * Checks whether the list is empty or not.\n\t * @return True if empty.\n\t */\n\tisEmpty(): boolean {\n\t\treturn this.#as.length === 0;\n\t}\n\n\t/**\n\t * Gets the number of assignments.\n\t * @return Number of assignments.\n\t */\n\tsize(): number {\n\t\treturn this.#as.length;\n\t}\n\n\tdifferenceSize(): number {\n\t\tlet diff = 0;\n\t\tfor (const a of this.#as) {\n\t\t\tif (a.variable().value() !== a.value()) ++diff;\n\t\t}\n\t\treturn diff;\n\t}\n\n\t/**\n\t * Gets the assignments by specifying their indices.\n\t * @param index Index.\n\t * @return An assignment.\n\t */\n\tat(index: number): Assignment {\n\t\treturn this.#as[index];\n\t}\n\n\t/**\n\t * Gets the iterator of the assignments.\n\t */\n\t[Symbol.iterator](): Iterator<Assignment> {\n\t\treturn this.#as[Symbol.iterator]();\n\t}\n\n\t/**\n\t * Gets an arbitrary assignment.\n\t *\n\t * @return An assignment.\n\t */\n\trandom(): Assignment {\n\t\treturn this.#as[Math.floor(Math.random() * this.#as.length)];\n\t}\n\n}\n", "/**\n * This class holds the branch pruning states for a domain.\n *\n * @author Takuto Yanagida\n * @version 2023-03-25\n */\n\nexport class DomainPruner {\n\n\tstatic #UNHIDDEN: number = -1;\n\n\t#hiddenLevels: number[];\n\t#hiddenSize: number = 0;\n\n\t/**\n\t * Generates a class that holds branch pruning states for a domain.\n\t * @param size Size of the corresponding domain\n\t */\n\tconstructor(size: number) {\n\t\tthis.#hiddenLevels = new Array(size);\n\t\tthis.#hiddenLevels.fill(DomainPruner.#UNHIDDEN);\n\t}\n\n\t/**\n\t * Returns the size of the erased element.\n\t * @return Size of the erased element.\n\t */\n\thiddenSize(): number {\n\t\treturn this.#hiddenSize;\n\t}\n\n\t/**\n\t * Erases the element at the specified index.\n\t * @param index Index.\n\t * @param level Level.\n\t */\n\thide(index: number, level: number): void {\n\t\tif (this.#hiddenLevels[index] === DomainPruner.#UNHIDDEN) {\n\t\t\t++this.#hiddenSize;\n\t\t}\n\t\tthis.#hiddenLevels[index] = level;\n\t}\n\n\t/**\n\t * Returns whether the element is empty or not.\n\t * Returns true if all elements have been erased.\n\t * @return True if empty.\n\t */\n\tisEmpty(): boolean {\n\t\treturn this.#hiddenLevels.length === this.#hiddenSize;\n\t}\n\n\t/**\n\t * Returns whether or not the element at the specified index has been erased.\n\t * @param index Index.\n\t * @return True if erased.\n\t */\n\tisValueHidden(index: number): boolean {\n\t\treturn this.#hiddenLevels[index] !== DomainPruner.#UNHIDDEN;\n\t}\n\n\t/**\n\t * Restores the value that had been erased, by specifying a level.\n\t * @param level Level\n\t */\n\treveal(level: number): void {\n\t\tfor (let i = 0; i < this.#hiddenLevels.length; ++i) {\n\t\t\tif (this.#hiddenLevels[i] === level) {\n\t\t\t\tthis.#hiddenLevels[i] = DomainPruner.#UNHIDDEN;\n\t\t\t\t--this.#hiddenSize;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Restores all erased values.\n\t */\n\trevealAll(): void {\n\t\tthis.#hiddenLevels.fill(DomainPruner.#UNHIDDEN);\n\t\tthis.#hiddenSize = 0;\n\t}\n\n}\n", "/**\n * This class that implements the forward checking method.\n * The minimum-remaining-values (MRV) heuristic can also be used by specifying the option.\n * Searches for variable assignments that satisfy all constraints and fails if none are found.\n * Each variable must have its own domain because it hides domain elements as branch pruning.\n * Forward checking is also performed for problems with polynomial constraints.\n *\n * @author Takuto Yanagida\n * @version 2023-04-16\n */\n\nimport { Problem } from '../../problem/problem';\nimport { Variable } from '../../problem/variable';\nimport { Constraint } from '../../problem/constraint';\nimport { AssignmentList } from '../../util/assignment-list';\nimport { DomainPruner } from '../../util/domain-pruner';\nimport { Solver } from '../solver';\n\nexport class ForwardChecking extends Solver {\n\n\t#vars: Variable[];\n\t#sol: AssignmentList = new AssignmentList();\n\t#relCons: Constraint[][][] = [];  // Table to cache constraints between two variables.\n\n\t#useMRV: boolean = false;\n\n\t#iterCount: number = 0;\n\t#endTime: number = 0;\n\n\t/**\n\t * Generates a solver given a constraint satisfaction problem.\n\t * @param p A problem.\n\t */\n\tconstructor(p: Problem) {\n\t\tsuper(p);\n\t\tthis.#vars = [...this._pro.variables()];\n\t\tfor (const v of this.#vars) {\n\t\t\tv.solverObject = new DomainPruner(v.domain().size());\n\t\t}\n\t\tthis.#initializeRelatedConstraintTable();\n\t}\n\n\tname(): string {\n\t\treturn 'Forward Checking';\n\t}\n\n\t// Initializes a table that caches constraints between two variables.\n\t#initializeRelatedConstraintTable() {\n\t\tthis.#relCons = [];\n\n\t\tfor (let j = 0; j < this.#vars.length; ++j) {\n\t\t\tthis.#relCons.push(new Array(this.#vars.length));\n\n\t\t\tfor (let i = 0; i < this.#vars.length; ++i) {\n\t\t\t\tif (i < j) {\n\t\t\t\t\tthis.#relCons[j][i] = this._pro.constraintsBetween(this.#vars[i], this.#vars[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Retrieves an array of constraints from a table that caches constraints between two variables.\n\t#getConstraintsBetween(i: number, j: number) {\n\t\tif (i < j) {\n\t\t\treturn this.#relCons[j][i];\n\t\t}\n\t\treturn this.#relCons[i][j];\n\t}\n\n\t// Checks for possible assignment to a future variable from the current variable assignment.\n\t#checkForward(level: number, currentIndex: number) {\n\t\tfor (const v_i of this.#vars) {\n\t\t\tif (!v_i.isEmpty()) continue;  // If it is a past or present variable.\n\t\t\tconst d_i  = v_i.domain();\n\t\t\tconst dc_i = v_i.solverObject;\n\t\t\tconst cs   = this.#getConstraintsBetween(currentIndex, v_i.index());\n\n\t\t\tfor (const c of cs) {\n\t\t\t\tif (c.emptyVariableSize() !== 1) continue;\n\n\t\t\t\tfor (let k = 0, n = d_i.size(); k < n; ++k) {\n\t\t\t\t\tif (dc_i.isValueHidden(k)) continue;\n\t\t\t\t\tv_i.assign(d_i.at(k));\n\n\t\t\t\t\tif (c.isSatisfied() === 0) {  // Do hide when in violation (not even undefined).\n\t\t\t\t\t\tdc_i.hide(k, level);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tv_i.clear();\n\t\t\t\tif (dc_i.isEmpty()) return false;  // Failure if the domain of one of the future variables is empty.\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t// Returns the index of the smallest domain variable.\n\t#indexOfVariableWithMRV(): number {\n\t\tlet index = 0;\n\t\tlet size  = Number.MAX_VALUE;\n\n\t\tfor (let i = 0; i < this.#vars.length; ++i) {\n\t\t\tconst v = this.#vars[i];\n\t\t\tif (!v.isEmpty()) continue;\n\t\t\tconst d = v.domain();\n\t\t\tconst s = d.size() - v.solverObject.hiddenSize();\n\t\t\tif (s < size) {\n\t\t\t\tsize  = s;\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\t\treturn index;\n\t}\n\n\t// Searches for one variable at a time.\n\t#branch(level: number) {\n\t\tif (this._iterLimit && this._iterLimit < this.#iterCount++) {  // Failure if repeated a specified number.\n\t\t\tthis._debugOutput('stop: number of iterations has reached the limit');\n\t\t\treturn false;\n\t\t}\n\t\tif (this.#endTime < Date.now()) {  // Failure if time limit is exceeded.\n\t\t\tthis._debugOutput('stop: time limit has been reached');\n\t\t\treturn false;\n\t\t}\n\n\t\tif (level === this._pro.variableSize()) {\n\t\t\tthis.#sol.setProblem(this._pro);\n\t\t\treturn true;\n\t\t}\n\t\tconst vc_index = this.#useMRV ? this.#indexOfVariableWithMRV() : level;\n\t\tconst vc       = this.#vars[vc_index];\n\t\tconst d        = vc.domain();\n\t\tconst dc       = vc.solverObject;\n\t\tfor (let i = 0, n = d.size(); i < n; ++i) {\n\t\t\tif (dc.isValueHidden(i)) continue;\n\t\t\tvc.assign(d.at(i));\n\t\t\tif (this.#checkForward(level, vc_index) && this.#branch(level + 1)) return true;\n\t\t\tfor (const v of this.#vars) {\n\t\t\t\tv.solverObject.reveal(level);\n\t\t\t}\n\t\t}\n\t\tvc.clear();\n\t\treturn false;\n\t}\n\n\t// Do search.\n\texec() {\n\t\tthis.#endTime   = (this._timeLimit === null) ? Number.MAX_VALUE : (Date.now() + this._timeLimit);\n\t\tthis.#iterCount = 0;\n\n\t\tthis._pro.clearAllVariables();\n\t\tconst r = this.#branch(0);\n\n\t\tfor (const a of this.#sol) {\n\t\t\ta.apply();\n\t\t\ta.variable().solverObject.revealAll();\n\t\t}\n\t\treturn r;\n\t}\n\n\t/**\n\t * The settings made by this method are invalid.\n\t */\n\tsetTargetRate() {\n\t\t// Do nothing.\n\t}\n\n\t/**\n\t * Specify whether to use the minimum-remaining-values (MRV) heuristic.\n\t * Use of MRV may increase processing time for some problems.\n\t * Default is false.\n\t * @param flag Use MRV if true.\n\t */\n\tsetUsingMinimumRemainingValuesHeuristics(flag: boolean) {\n\t\tthis.#useMRV = flag;\n\t}\n\n}\n", "/**\n * This class that implements the forward checking method.\n * Find the solution to the problem as the maximum CSP.\n * Each variable must have its own domain because it hides domain elements as branch pruning.\n *\n * @author Takuto Yanagida\n * @version 2023-04-16\n */\n\nimport { Problem } from '../../problem/problem';\nimport { CrispProblem } from '../../problem/problem-crisp';\nimport { Variable } from '../../problem/variable';\nimport { Constraint } from '../../problem/constraint';\nimport { AssignmentList } from '../../util/assignment-list';\nimport { DomainPruner } from '../../util/domain-pruner';\nimport { Solver } from '../solver';\n\nexport class MaxForwardChecking extends Solver {\n\n\t#vars: Variable[];\n\t#sol: AssignmentList = new AssignmentList();\n\n\t#maxVioCount: number;\n\t#vioCount: number = 0;\n\t#checkedCons: Set<Constraint> = new Set();\n\t#cons: Constraint[] = [];\n\n\t#iterCount: number = 0;\n\t#endTime: number = 0;\n\n\tconstructor(p: Problem) {\n\t\tsuper(p);\n\t\tthis.#vars = [...this._pro.variables()];\n\t\tfor (const v of this.#vars) {\n\t\t\tv.solverObject = new DomainPruner(v.domain().size());\n\t\t}\n\t\tthis.#maxVioCount = this._pro.constraintSize();\n\t}\n\n\tname(): string {\n\t\treturn 'Forward Checking for Max CSPs';\n\t}\n\n\t#branch(level: number, vioCount: number): boolean {\n\t\tif (this._iterLimit && this._iterLimit < this.#iterCount++) return false;  // Failure if repeated a specified number.\n\t\tif (this.#endTime < Date.now()) return false;  // Failure if time limit is exceeded.\n\n\t\tif (level === this._pro.variableSize()) {\n\t\t\tconst vcs = (this._pro as CrispProblem).violatingConstraintSize();\n\t\t\tif (vcs < this.#maxVioCount) {\n\t\t\t\tthis.#maxVioCount = vcs;\n\t\t\t\tthis.#sol.setProblem(this._pro);\n\t\t\t\tthis._debugOutput(`   refreshed ${this.#maxVioCount}`);\n\t\t\t\tif ((this._targetDeg ?? 1) <= (this._pro as CrispProblem).satisfiedConstraintRate()) return true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\tconst vc  = this.#vars[level];\n\t\tconst dom = vc.domain();\n\t\tconst dc  = vc.solverObject;\n\n\t\tfor (let i = 0; i < dom.size(); ++i) {\n\t\t\tif (dc.isValueHidden(i)) continue;\n\t\t\tvc.assign(dom.at(i));\n\t\t\tthis.#vioCount = vioCount + this.#getAdditionalViolationCount(level, vc);  // for max begin\n\t\t\tif (this.#vioCount > this.#maxVioCount) continue;  // for max end\n\t\t\tif (this.#checkForward(level) && this.#branch(level + 1, this.#vioCount)) return true;\n\t\t\tfor (const v of this.#vars) {\n\t\t\t\tv.solverObject.reveal(level);\n\t\t\t}\n\t\t}\n\t\tvc.clear();\n\t\treturn false;\n\t}\n\n\t// Checks for possible assignment to a future variable from the current variable assignment.\n\t#checkForward(level: number): boolean {\n\t\tconst vc = this.#vars[level];\n\n\t\tfor (let i = level + 1; i < this.#vars.length; ++i) {\n\t\t\tconst future = this.#vars[i];\n\t\t\tthis.#cons = this._pro.constraintsBetween(vc, future);\n\n\t\t\tfor (const c of this.#cons) {\n\t\t\t\tif (c.emptyVariableSize() !== 1) continue;\n\t\t\t\tif (this.#revise(future, c, level)) {\n\t\t\t\t\tif (future.solverObject.isEmpty()) return false;  // Failure if the domain of one of the future variables is empty.\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t// Find the number of constraint violations that have increased due to the current value of the variable vc.\n\t#getAdditionalViolationCount(level: number, vc: Variable): number {\n\t\tlet avc = 0;\n\t\tthis.#checkedCons.clear();  // Reuse.\n\t\tfor (let i = 0; i < level; ++i) {\n\t\t\tthis.#cons = this._pro.constraintsBetween(vc, this.#vars[i]);\n\n\t\t\tfor (const c of this.#cons) {\n\t\t\t\tif (this.#checkedCons.has(c)) continue;  // Because of the possibility of duplication in polynomial constraints\n\t\t\t\tif (c.isSatisfied() === 0) ++avc;  // Neither satisfied nor undefined.\n\t\t\t\tthis.#checkedCons.add(c);\n\t\t\t}\n\t\t}\n\t\treturn avc;\n\t}\n\n\t// Remove values from the domain of v1 that do not correspond to v2. That is, match v1 with v2.\n\t#revise(v1: Variable, c: Constraint, level: number): boolean {\n\t\tlet deleted = false;\n\n\t\tconst dom = v1.domain();\n\t\tconst dc  = v1.solverObject;\n\n\t\tfor (let i = 0; i < dom.size(); ++i) {\n\t\t\tif (dc.isValueHidden(i)) continue;\n\t\t\tv1.assign(dom.at(i));\n\n\t\t\tif (c.isSatisfied() === 0 && this.#vioCount + 1 > this.#maxVioCount) {\n\t\t\t\tdc.hide(i, level);\n\t\t\t\tdeleted = true;\n\t\t\t}\n\t\t}\n\t\treturn deleted;\n\t}\n\n\texec(): boolean {\n\t\tthis.#endTime   = (this._timeLimit === null) ? Number.MAX_VALUE : (Date.now() + this._timeLimit);\n\t\tthis.#iterCount = 0;\n\n\t\tthis._pro.clearAllVariables();\n\t\tconst r = this.#branch(0, 0);\n\t\tif (r) {\n\t\t\tthis._debugOutput('stop: current degree is above the target');\n\t\t} else {\n\t\t\tif (this._iterLimit && this._iterLimit < this.#iterCount) {\n\t\t\t\tthis._debugOutput('stop: number of iterations has reached the limit');\n\t\t\t}\n\t\t\tif (this.#endTime < Date.now()) {\n\t\t\t\tthis._debugOutput('stop: time limit has been reached');\n\t\t\t}\n\t\t}\n\n\t\tfor (const a of this.#sol) {\n\t\t\ta.apply();\n\t\t\ta.variable().solverObject.revealAll();\n\t\t}\n\t\treturn r;\n\t}\n\n}\n", "/**\n * Class implements the local changes method.\n *\n * @author Takuto Yanagida\n * @version 2023-04-16\n */\n\nimport { Problem } from '../../problem/problem';\nimport { CrispProblem } from '../../problem/problem-crisp';\nimport { Variable } from '../../problem/variable';\nimport { Constraint } from '../../problem/constraint';\nimport { AssignmentList } from '../../util/assignment-list';\nimport { Solver } from '../solver';\n\nexport class LocalChanges extends Solver {\n\n\tstatic #setPlusSet<T>(s1: Set<T>, s2: Set<T>): Set<T> {\n\t\tconst sn = new Set(s1);\n\t\tfor (const v of s2) sn.add(v);\n\t\treturn sn;\n\t}\n\n\tstatic #setMinusSet<T>(s1: Set<T>, s2: Set<T>): Set<T> {\n\t\tconst sn = new Set(s1);\n\t\tfor (const v of s2) sn.delete(v);\n\t\treturn sn;\n\t}\n\n\tstatic #setPlusElement<T>(s: Set<T>, e: T): Set<T> {\n\t\tconst sn = new Set(s);\n\t\tsn.add(e);\n\t\treturn sn;\n\t}\n\n\tstatic #setMinusElement<T>(s: Set<T>, e: T): Set<T> {\n\t\tconst sn = new Set(s);\n\t\tsn.delete(e);\n\t\treturn sn;\n\t}\n\n\t#iterCount: number = 0;\n\t#endTime: number = 0;\n\t#globalReturn: boolean = false;\n\n\tconstructor(p: Problem, unassignAll: boolean = false) {\n\t\tsuper(p);\n\t\tif (unassignAll) {\n\t\t\tthis._pro.clearAllVariables();\n\t\t}\n\t}\n\n\tname(): string {\n\t\treturn 'Local Changes';\n\t}\n\n\t#createNewV3(V1_V2: Set<Variable>, v: Variable, val: number): Set<Variable> {\n\t\tconst newV3 = new Set<Variable>();\n\t\tconst cs    = new Set<Constraint>();\n\n\t\tfor (const va of V1_V2) {\n\t\t\tconst temp = this._pro.constraintsBetween(v, va);\n\t\t\tfor (const c of temp) cs.add(c);\n\t\t}\n\t\tconst origVal = v.value();  // Save the value.\n\t\tv.assign(val);\n\n\t\tfor (const c of cs) {\n\t\t\tif (c.isSatisfied() === 0) {\n\t\t\t\tfor (const vi of c) {\n\t\t\t\t\tnewV3.add(vi);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tv.assign(origVal);  // Restore the value.\n\t\tnewV3.delete(v);\n\t\treturn newV3;\n\t}\n\n\t#isConsistent(A: Set<Variable>, v: Variable, val: number) {\n\t\tconst cs = new Set<Constraint>();\n\n\t\tfor (const va of A) {\n\t\t\tconst temp = this._pro.constraintsBetween(v, va);\n\t\t\tfor (const c of temp) cs.add(c);\n\t\t}\n\t\tconst origVal = v.value();  // Save the value.\n\t\tv.assign(val);\n\n\t\tfor (const c of cs) {\n\t\t\tif (c.isSatisfied() === 0) {\n\t\t\t\tv.assign(origVal);  // Restore the value.\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tv.assign(origVal);  // Restore the value.\n\t\treturn true;\n\t}\n\n\t#lcValue(V1: Set<Variable>, V2: Set<Variable>, v: Variable, val: number): boolean {\n\t\tif (!this.#isConsistent(V1, v, val)) {\n\t\t\treturn false;\n\t\t}\n\t\tconst V1_V2 = LocalChanges.#setPlusSet(V1, V2);\n\t\tif (this.#isConsistent(V1_V2, v, val)) {\n\t\t\treturn true;\n\t\t}\n\t\tconst V3 = this.#createNewV3(V1_V2, v, val);\n\n\t\tconst T = LocalChanges.#setMinusSet(V1_V2, V3);\n\t\tif (!this.#isConsistent(T, v, val)) {\n\t\t\tthis._debugOutput('bug');\n\t\t}\n\n\t\tfor (const vv of V3) {\n\t\t\tvv.clear();\n\t\t}\n\t\tV1 = LocalChanges.#setPlusElement(V1, v);\n\t\tV2 = LocalChanges.#setMinusSet(V2, V3);\n\t\treturn this.#lcVariables(V1, V2, V3);\n\t}\n\n\t#lcVariable(V1: Set<Variable>, V2: Set<Variable>, v: Variable, d: Set<number>): boolean {\n\t\tif (d.size === 0) {\n\t\t\treturn false;\n\t\t}\n\t\tconst val = d.values().next().value as number;\n\t\tconst  al = AssignmentList.fromVariables(V2);\n\t\tv.assign(val);\n\n\t\tconst ret = this.#lcValue(V1, V2, v, val);\n\t\tif (ret || this.#globalReturn) {\n\t\t\treturn ret;\n\t\t}\n\n\t\tv.clear();\n\t\tal.apply();\n\n\t\treturn this.#lcVariable(V1, V2, v, LocalChanges.#setMinusElement(d, val));\n\t}\n\n\t#lcVariables(V1: Set<Variable>, V2: Set<Variable>, V3: Set<Variable>): boolean {\n\t\tthis._debugOutput(`V1 ${V1.size}, V2' ${V2.size}, V3' ${V3.size}`);\n\n\t\tif ((this._targetDeg ?? 1) <= (this._pro as CrispProblem).satisfiedConstraintRate()) {  // Success if violation rate improves from specified\n\t\t\tthis._debugOutput('stop: current degree is above the target');\n\t\t\tthis.#globalReturn = true;\n\t\t\treturn true;\n\t\t}\n\t\tif (this._iterLimit && this._iterLimit < this.#iterCount++) {  // Failure if repeated a specified number\n\t\t\tthis._debugOutput('stop: number of iterations has reached the limit');\n\t\t\tthis.#globalReturn = true;\n\t\t\treturn false;\n\t\t}\n\t\tif (this.#endTime < Date.now()) {  // Failure if time limit is exceeded\n\t\t\tthis._debugOutput('stop: time limit has been reached');\n\t\t\tthis.#globalReturn = true;\n\t\t\treturn false;\n\t\t}\n\n\t\tif (V3.size === 0) {\n\t\t\treturn true;\n\t\t}\n\t\tconst v = V3.values().next().value as Variable;\n\t\tconst d = new Set<number>();\n\t\tfor (const val of v.domain()) {\n\t\t\td.add(val);\n\t\t}\n\n\t\tconst ret = this.#lcVariable(V1, V2, v, d);\n\t\tif (!ret || this.#globalReturn) {\n\t\t\treturn ret;\n\t\t}\n\t\tV2 = LocalChanges.#setPlusElement(V2, v);\n\t\tV3 = LocalChanges.#setMinusElement(V3, v);\n\t\treturn this.#lcVariables(V1, V2, V3);\n\t}\n\n\texec() {\n\t\tthis.#endTime      = (this._timeLimit === null) ? Number.MAX_VALUE : (Date.now() + this._timeLimit);\n\t\tthis.#iterCount    = 0;\n\t\tthis.#globalReturn = false;\n\n\t\tif (this._pro.emptyVariableSize() === 0) {\n\t\t\tthis._pro.clearAllVariables();\n\t\t}\n\t\tconst notFixed   = new Set<Variable>();\n\t\tconst unassigned = new Set<Variable>();\n\t\tfor (const v of this._pro.variables()) {\n\t\t\t(!v.isEmpty() ? notFixed : unassigned).add(v);\n\t\t}\n\t\treturn this.#lcVariables(new Set(), notFixed, unassigned);\n\t}\n\n}\n", "/**\n * Class implements the local changes method.\n * The implementation is optimized by converting recursive calls to loops.\n *\n * @author Takuto Yanagida\n * @version 2023-04-16\n */\n\nimport { Problem } from '../../problem/problem';\nimport { CrispProblem } from '../../problem/problem-crisp';\nimport { Variable } from '../../problem/variable';\nimport { Constraint } from '../../problem/constraint';\nimport { AssignmentList } from '../../util/assignment-list';\nimport { Solver } from '../solver';\n\nexport class LocalChangesEx extends Solver {\n\n\tstatic #setPlusSet<T>(s1: Set<T>, s2: Set<T>): Set<T> {\n\t\tconst sn = new Set<T>(s1);\n\t\tfor (const v of s2) sn.add(v);\n\t\treturn sn;\n\t}\n\n\tstatic #setMinusSet<T>(s1: Set<T>, s2: Set<T>): Set<T> {\n\t\tconst sn = new Set<T>(s1);\n\t\tfor (const v of s2) sn.delete(v);\n\t\treturn sn;\n\t}\n\n\tstatic #setPlusElement<T>(s: Set<T>, e: T): Set<T> {\n\t\tconst sn = new Set<T>(s);\n\t\tsn.add(e);\n\t\treturn sn;\n\t}\n\n\t#iterCount: number = 0;\n\t#endTime: number = 0;\n\t#globalReturn: boolean = false;\n\n\tconstructor(p: Problem, unassignAll: boolean = false) {\n\t\tsuper(p);\n\t\tif (unassignAll) {\n\t\t\tthis._pro.clearAllVariables();\n\t\t}\n\t}\n\n\tname() {\n\t\treturn 'Local Changes Ex';\n\t}\n\n\t#createNewV3(V1_V2: Set<Variable>, v: Variable, val: number): Set<Variable> {\n\t\tconst newV3 = new Set<Variable>();\n\t\tconst cs    = new Set<Constraint>();\n\n\t\tfor (const va of V1_V2) {\n\t\t\tconst temp = this._pro.constraintsBetween(v, va);\n\t\t\tfor (const c of temp) cs.add(c);\n\t\t}\n\t\tconst origVal = v.value();  // Save the value.\n\t\tv.assign(val);\n\n\t\tfor (const c of cs) {\n\t\t\tif (c.isSatisfied() === 0) {\n\t\t\t\tfor (const vi of c) {\n\t\t\t\t\tnewV3.add(vi);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tv.assign(origVal);  // Restore the value.\n\t\tnewV3.delete(v);\n\t\treturn newV3;\n\t}\n\n\t#isConsistent(A: Set<Variable>, v: Variable, val: number): boolean {\n\t\tconst cs = new Set<Constraint>();\n\n\t\tfor (const va of A) {\n\t\t\tconst temp = this._pro.constraintsBetween(v, va);\n\t\t\tfor (const c of temp) cs.add(c);\n\t\t}\n\t\tconst origVal = v.value();  // Save the value.\n\t\tv.assign(val);\n\n\t\tfor (const c of cs) {\n\t\t\tif (c.isSatisfied() === 0) {\n\t\t\t\tv.assign(origVal);  // Restore the value.\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tv.assign(origVal);  // Restore the value.\n\t\treturn true;\n\t}\n\n\t#lcValue(V1: Set<Variable>, V2: Set<Variable>, v: Variable): boolean {\n\t\tif (!this.#isConsistent(V1, v, v.value())) {\n\t\t\treturn false;\n\t\t}\n\t\tconst V1_V2 = LocalChangesEx.#setPlusSet(V1, V2);\n\t\tif (this.#isConsistent(V1_V2, v, v.value())) {\n\t\t\treturn true;\n\t\t}\n\t\tconst V3 = this.#createNewV3(V1_V2, v, v.value());\n\n\t\tV2 = LocalChangesEx.#setMinusSet(V2, V3);\n\t\tV1 = LocalChangesEx.#setPlusElement(V1, v);\n\t\treturn this.#lcVariables(V1, V2, V3);\n\t}\n\n\t#lcVariable(V1: Set<Variable>, V2: Set<Variable>, v: Variable): boolean {\n\t\tfor (const val of v.domain()) {\n\t\t\tconst s = AssignmentList.fromVariables(V2);\n\t\t\tv.assign(val);\n\n\t\t\tconst ret = this.#lcValue(V1, V2, v);\n\t\t\tif (ret || this.#globalReturn) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\tv.clear();\n\t\t\ts.apply();\n\t\t}\n\t\treturn false;\n\t}\n\n\t#lcVariables(V1: Set<Variable>, V2: Set<Variable>, V3: Set<Variable>): boolean {\n\t\tV2 = new Set(V2);  // Clone\n\t\tV3 = new Set(V3);  // Clone\n\n\t\twhile (true) {\n\t\t\tthis._debugOutput(`V1 ${V1.size}, V2' ${V2.size}, V3' ${V3.size}`);\n\n\t\t\tif ((this._targetDeg ?? 1) <= (this._pro as CrispProblem).satisfiedConstraintRate()) {  // Success if violation rate improves from specified\n\t\t\t\tthis._debugOutput('stop: current degree is above the target');\n\t\t\t\tthis.#globalReturn = true;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (this._iterLimit && this._iterLimit < this.#iterCount++) {  // Failure if repeated a specified number\n\t\t\t\tthis._debugOutput('stop: number of iterations has reached the limit');\n\t\t\t\tthis.#globalReturn = true;\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (this.#endTime < Date.now()) {  // Failure if time limit is exceeded\n\t\t\t\tthis._debugOutput('stop: time limit has been reached');\n\t\t\t\tthis.#globalReturn = true;\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (V3.size === 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tconst v   = V3.values().next().value as Variable;\n\t\t\tconst ret = this.#lcVariable(V1, V2, v);\n\n\t\t\tif (!ret || this.#globalReturn) {\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t\tV2.add(v);\n\t\t\tV3.delete(v);\n\t\t}\n\t}\n\n\texec(): boolean {\n\t\tthis.#endTime      = (this._timeLimit === null) ? Number.MAX_VALUE : (Date.now() + this._timeLimit);\n\t\tthis.#iterCount    = 0;\n\t\tthis.#globalReturn = false;\n\n\t\tif (this._pro.emptyVariableSize() === 0) {\n\t\t\tthis._pro.clearAllVariables();\n\t\t}\n\t\tconst notFixed   = new Set<Variable>();\n\t\tconst unassigned = new Set<Variable>();\n\t\tfor (const v of this._pro.variables()) {\n\t\t\t(!v.isEmpty() ? notFixed : unassigned).add(v);\n\t\t}\n\t\treturn this.#lcVariables(new Set(), notFixed, unassigned);\n\t}\n\n}\n", "/**\n * Class implements a solver using the breakout method.\n * Solves a problem as a maximum CSP.\n *\n * @author Takuto Yanagida\n * @version 2023-04-16\n */\n\nimport { Problem } from '../../problem/problem';\nimport { CrispProblem } from '../../problem/problem-crisp';\nimport { Variable } from '../../problem/variable';\nimport { Constraint } from '../../problem/constraint';\nimport { AssignmentList } from '../../util/assignment-list';\nimport { Solver } from '../solver';\n\nexport class Breakout extends Solver {\n\n\t#weights: number[];\n\n\t#isRandom: boolean = true;\n\n\tconstructor(p: Problem) {\n\t\tsuper(p);\n\t\tthis.#weights = new Array(this._pro.constraintSize());\n\t\tthis.#weights.fill(1);\n\t}\n\n\tname(): string {\n\t\treturn 'Breakout';\n\t}\n\n\t#findCandidates(vioVars: Variable[], canList: AssignmentList): void {\n\t\tlet maxDiff = 0;\n\n\t\tfor (const v of vioVars) {\n\t\t\tconst v_val = v.value();  // Save the value\n\n\t\t\tlet nowVio = 0;\n\t\t\tfor (const c of v) {\n\t\t\t\tnowVio += (1 - c.isSatisfied()) * this.#weights[c.index()];\n\t\t\t}\n\t\t\tout: for (const d of v.domain()) {\n\t\t\t\tif (v_val === d) continue;\n\t\t\t\tv.assign(d);\n\t\t\t\tlet diff = nowVio;\n\t\t\t\tfor (const c of v) {\n\t\t\t\t\tdiff -= (1 - c.isSatisfied()) * this.#weights[c.index()];\n\t\t\t\t\t// If the improvement is less than the previous improvement, try the next variable.\n\t\t\t\t\tif (diff < maxDiff) {\n\t\t\t\t\t\tcontinue out;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (diff > maxDiff) {  // Found assignments that are better than ever before.\n\t\t\t\t\tmaxDiff = diff;\n\t\t\t\t\tcanList.clear();\n\t\t\t\t\tcanList.addVariable(v, d);\n\t\t\t\t} else if (maxDiff !== 0) {  // Found assignments that can be improved to the same level as before.\n\t\t\t\t\tcanList.addVariable(v, d);\n\t\t\t\t}\n\t\t\t}\n\t\t\tv.assign(v_val);  // Restore the value.\n\t\t}\n\t}\n\n\t#listViolatingVariables(vioCons: Constraint[]): Variable[] {\n\t\tconst vvs = new Set<Variable>();\n\t\tfor (const c of vioCons) {\n\t\t\tfor (const v of c) {\n\t\t\t\tvvs.add(v);\n\t\t\t}\n\t\t}\n\t\treturn Array.from<Variable>(vvs);\n\t}\n\n\texec(): boolean {\n\t\tconst endTime = (this._timeLimit === null) ? Number.MAX_VALUE : (Date.now() + this._timeLimit);\n\t\tlet iterCount = 0;\n\n\t\tfor (const v of this._pro.variables()) {\n\t\t\tif (v.isEmpty()) v.assign(v.domain().at(0));\n\t\t}\n\n\t\tconst canList = new AssignmentList();\n\n\t\twhile (true) {\n\t\t\tconst vc: Constraint[] = (this._pro as CrispProblem).violatingConstraints();\n\t\t\tif ((this._targetDeg ?? 1) <= (this._pro as CrispProblem).satisfiedConstraintRate()) {  // Success if violation rate improves from specified\n\t\t\t\tthis._debugOutput('stop: current degree is above the target');\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (this._iterLimit && this._iterLimit < iterCount++) {  // Failure if repeated a specified number\n\t\t\t\tthis._debugOutput('stop: number of iterations has reached the limit');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (endTime < Date.now()) {  // Failure if time limit is exceeded\n\t\t\t\tthis._debugOutput('stop: time limit has been reached');\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tthis._debugOutput(vc.length + ' violations');\n\t\t\tthis.#findCandidates(this.#listViolatingVariables(vc), canList);\n\n\t\t\tif (0 < canList.size()) {\n\t\t\t\tconst e = this.#isRandom ? canList.random() : canList.at(0);\n\t\t\t\te.apply();\n\t\t\t\tcanList.clear();\n\t\t\t\tthis._debugOutput('\\t' + e);\n\t\t\t} else {\n\t\t\t\tfor (const c of vc) {\n\t\t\t\t\tthis.#weights[c.index()] += 1;\n\t\t\t\t}\n\t\t\t\tthis._debugOutput('breakout');\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Sets the randomness of the algorithm.\n\t * Enabling randomness reduces the risk of local solutions, but makes the solution unrepeatable.\n\t * @param flag Whether the randomness is enabled.\n\t */\n\tsetRandomness(flag: boolean): void {\n\t\tthis.#isRandom = flag;\n\t}\n\n}\n", "/**\n * This class implements GENET.\n * CSP (but only Binary CSP) is supported.\n * Find the solution to the problem as the maximum CSP.\n *\n * @author Takuto Yanagida\n * @version 2023-04-17\n */\n\nimport { AssignmentList } from '../../util/assignment-list';\nimport { Solver } from '../solver';\nimport { Problem } from '../../problem/problem';\nimport { CrispProblem } from '../../problem/problem-crisp';\nimport { Variable } from '../../problem/variable';\n\nexport class GENET extends Solver {\n\n\tstatic nextInt(max: number): number {\n\t\treturn Math.floor(Math.random() * Math.floor(max));\n\t}\n\n\t#clusters: Cluster[] = [];\n\t#connections: Connection[] = [];\n\n\tconstructor(p: Problem) {\n\t\tsuper(p);\n\t}\n\n\tname(): string {\n\t\treturn 'GENET';\n\t}\n\n\t#createNetwork(): boolean {\n\t\tthis._debugOutput('network creation start');\n\t\tconst cons: Connection[] = [];\n\n\t\tfor (const v of this._pro.variables()) {\n\t\t\tif (v.domain().size() === 0) return false;\n\t\t\tthis.#clusters.push(new Cluster(v));\n\t\t}\n\t\tfor (const c of this._pro.constraints()) {\n\t\t\tif (c.size() === 1) {  // In the case of unary constraints.\n\t\t\t\tconst v  = c.at(0);\n\t\t\t\tconst cl = this.#clusters[c.at(0).index()];\n\n\t\t\t\tfor (let i = 0; i < cl.size(); ++i) {\n\t\t\t\t\tconst origVal = v.value();  // Save the value.\n\t\t\t\t\tv.assign(cl.get(i)._value);\n\n\t\t\t\t\tif (c.isSatisfied() === 0) {\n\t\t\t\t\t\tcons.push(new Connection(cl.get(i)));\n\t\t\t\t\t}\n\t\t\t\t\tv.assign(origVal);  // Restore the value.\n\t\t\t\t}\n\t\t\t} else {  // In the case of binary constraints.\n\t\t\t\tconst v1   = c.at(0);\n\t\t\t\tconst v2   = c.at(1);\n\t\t\t\tconst cl_f = this.#clusters[c.at(0).index()];\n\t\t\t\tconst cl_s = this.#clusters[c.at(1).index()];\n\n\t\t\t\tfor (let i = 0; i < cl_f.size(); ++i) {\n\t\t\t\t\tconst origVal1 = v1.value();  // Save the value.\n\t\t\t\t\tv1.assign(cl_f.get(i)._value);\n\n\t\t\t\t\tfor (let j = 0; j < cl_s.size(); ++j) {\n\t\t\t\t\t\tconst origVal2 = v2.value();  // Save the value.\n\t\t\t\t\t\tv2.assign(cl_s.get(j)._value);\n\n\t\t\t\t\t\tif (c.isSatisfied() === 0) {\n\t\t\t\t\t\t\tcons.push(new Connection(cl_f.get(i), cl_s.get(j)));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tv2.assign(origVal2);  // Restore the value.\n\t\t\t\t\t}\n\t\t\t\t\tv1.assign(origVal1);  // Restore the value.\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (const cl of this.#clusters) {\n\t\t\tfor (const n of cl._neurons) n.lockConnections();\n\t\t}\n\t\tthis.#connections = cons;\n\t\tthis._debugOutput('network creation complete');\n\t\treturn true;\n\t}\n\n\t#shuffle(is: number[]): number[] {\n\t\tfor (let i = is.length; i > 1; --i) {\n\t\t\tconst j    = GENET.nextInt(i);\n\t\t\tconst temp = is[i - 1];\n\t\t\tis[i - 1] = is[j];\n\t\t\tis[j]     = temp;\n\t\t}\n\t\treturn is;\n\t}\n\n\texec(): boolean {\n\t\tif (!this.#createNetwork()) {\n\t\t\tthrow new Error();\n\t\t}\n\t\tconst endTime = (this._timeLimit === null) ? Number.MAX_VALUE : (Date.now() + this._timeLimit);\n\t\tlet iterCount = 0;\n\n\t\tconst sol   = new AssignmentList();\n\t\tconst order: number[] = [];\n\t\tfor (let i = 0; i < this.#clusters.length; ++i) {\n\t\t\torder.push(i);\n\t\t}\n\n\t\tlet cur     = (this._pro as CrispProblem).satisfiedConstraintRate();\n\t\tlet success = false;\n\n\t\twhile (true) {\n\t\t\tif (this._iterLimit && this._iterLimit < iterCount++) {  // Failure if repeated a specified number\n\t\t\t\tthis._debugOutput('stop: number of iterations has reached the limit');\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (endTime < Date.now()) {  // Failure if time limit is exceeded\n\t\t\t\tthis._debugOutput('stop: time limit has been reached');\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tlet modified = false;\n\t\t\tfor (const i of this.#shuffle(order)) {\n\t\t\t\tif (this.#clusters[i].setActivityMaximumInput()) {\n\t\t\t\t\tmodified = true;  // Turn on the node with the largest input in each cluster\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!modified) {  // When the local minimum solution is reached.\n\t\t\t\tfor (const con of this.#connections) {\n\t\t\t\t\tcon.refreshWeight();  // Update weights for all connections\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor (const clu of this.#clusters) {\n\t\t\t\t\tclu.applyToVariable();  // Apply to variable\n\t\t\t\t}\n\t\t\t\tconst d = (this._pro as CrispProblem).satisfiedConstraintRate();\n\t\t\t\tif (cur < d) {  // If it's a better assignment than ever, save it.\n\t\t\t\t\tcur = d;\n\t\t\t\t\tthis._debugOutput(`satisfied constraint rate: ${d}`);\n\t\t\t\t\tsol.setProblem(this._pro);\n\t\t\t\t\tif (this.foundSolution(sol, d)) {  // Call hook\n\t\t\t\t\t\tsuccess = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (this._targetDeg ?? 1 <= cur) {  // Success if violation rate improves from specified\n\t\t\t\t\t\tthis._debugOutput('stop: current degree is above the target');\n\t\t\t\t\t\tsuccess = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tsol.apply();  // Despite the failures, the best assignment so far is applied for now.\n\t\treturn success;\n\t}\n\n}\n\nclass Cluster {\n\n\tstatic nextInt(max: number): number {\n\t\treturn Math.floor(Math.random() * Math.floor(max));\n\t}\n\n\t#v: Variable;  // For avoiding a bug(?) of parcel.\n\t#index: number = 0;\n\t#maxNeurons: number[] = [];\n\t_neurons: Neuron[]    = [];\n\n\tconstructor(v: Variable) {\n\t\tthis.#v = v;\n\n\t\tfor (const val of v.domain()) {\n\t\t\tthis._neurons.push(new Neuron(val));\n\t\t}\n\t\tthis.#setActivity(Cluster.nextInt(this._neurons.length));\n\t}\n\n\t#setActivity(index: number): void {\n\t\tfor (const n of this._neurons) {\n\t\t\tn._isActive = false;\n\t\t}\n\t\tthis._neurons[index]._isActive = true;\n\t\tthis.#index = index;\n\t}\n\n\tapplyToVariable(): void {\n\t\tthis.#v.assign(this._neurons[this.#index]._value);\n\t}\n\n\tget(index: number): Neuron {\n\t\treturn this._neurons[index];\n\t}\n\n\tneurons(): Neuron[] {\n\t\treturn this._neurons;\n\t}\n\n\t// Turn on the node with the largest input.\n\tsetActivityMaximumInput(): boolean {\n\t\tthis.#maxNeurons.length = 0;\n\n\t\tlet max       = Number.NEGATIVE_INFINITY;\n\t\tlet alreadyOn = false;\n\n\t\tfor (let i = 0; i < this._neurons.length; ++i) {\n\t\t\tconst input = this._neurons[i].getInput();\n\n\t\t\tif (max <= input) {\n\t\t\t\tif (max < input) {\n\t\t\t\t\tmax = input;\n\t\t\t\t\tthis.#maxNeurons.length = 0;\n\t\t\t\t\talreadyOn = false;\n\t\t\t\t}\n\t\t\t\tthis.#maxNeurons.push(i);\n\t\t\t\tif (this.#index === i) {\n\t\t\t\t\talreadyOn = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (alreadyOn || this.#maxNeurons.length === 0) {\n\t\t\treturn false;\n\t\t}\n\t\tthis.#setActivity(this.#maxNeurons[Cluster.nextInt(this.#maxNeurons.length)]);\n\t\treturn true;\n\t}\n\n\tsize(): number {\n\t\treturn this._neurons.length;\n\t}\n\n}\n\nclass Connection {\n\n\t#first: Neuron;\n\t#second: Neuron|null;\n\t_weight: number;  // Direct reference (read) allowed.\n\n\t// Order of neurons must be the same as the order of variables that the constraint has.\n\tconstructor(first: Neuron, second: Neuron|null = null) {\n\t\tthis._weight = -1;\n\n\t\tthis.#first = first;\n\t\tthis.#first.addConnection(this);\n\t\tthis.#second = second;\n\t\tif (this.#second) {\n\t\t\tthis.#second.addConnection(this);\n\t\t}\n\t}\n\n\tgetNeuron(self: Neuron): Neuron|null {\n\t\tif (self === this.#first)  return this.#second;\n\t\tif (self === this.#second) return this.#first;\n\t\treturn null;\n\t}\n\n\trefreshWeight(): void {\n\t\tif (!this.#first._isActive || (this.#second !== null && !this.#second._isActive)) {\n\t\t\treturn;\n\t\t}\n\t\tthis._weight += -1;\n\t}\n\n}\n\nclass Neuron {\n\n\t#conTemp: Connection[]|null = [];\n\t#connections: Connection[] = [];\n\t_value: number;  // Direct reference (read) allowed.\n\t_isActive: boolean = false;  // Direct reference (read, write) allowed.\n\n\tconstructor(value: number) {\n\t\tthis._value = value;\n\t}\n\n\taddConnection(c: Connection): void {\n\t\t(this.#conTemp as Connection[]).push(c);\n\t}\n\n\tlockConnections(): void {\n\t\tthis.#connections = [...this.#conTemp as Connection[]];\n\t\tthis.#conTemp     = null;  // No longer being used.\n\t}\n\n\tgetInput(): number {\n\t\tlet ret = 0;\n\t\tfor (const c of this.#connections) {\n\t\t\tconst n = c.getNeuron(this);  // If n is null, then the unary constraint.\n\t\t\tret += c._weight * ((n === null || n._isActive) ? 1 : 0);\n\t\t}\n\t\treturn ret;\n\t}\n\n}\n", "/**\n * This class implements the SRS algorithm for crisp CSP.\n * The given crisp CSP is treated as the maximum CSP.\n * Similar to SRS 3, the repair algorithm searches for an assignment that satisfies itself without reducing the number of satisfactions of its neighbors.\n *\n * @author Takuto Yanagida\n * @version 2023-04-16\n */\n\nimport { AssignmentList } from '../../util/assignment-list';\nimport { Solver } from '../solver';\nimport { Problem } from '../../problem/problem';\nimport { CrispProblem } from '../../problem/problem-crisp';\nimport { Constraint } from '../../problem/constraint';\n\nexport class CrispSRS3 extends Solver {\n\n\t#closedList          = new Set();\n\t#openList            = new Set();  // LinkedHashSet is used in the original implementation.\n\t#nodes: TreeNode[]               = [];\n\t#neighborConstraints: (Constraint[]|null)[] = [];  // Cache\n\n\t#isRandom = true;\n\n\tconstructor(p: Problem) {\n\t\tsuper(p);\n\t\tfor (const c of this._pro.constraints()) {\n\t\t\tthis.#nodes.push(new TreeNode(c));\n\t\t\tthis.#neighborConstraints.push(null);\n\t\t}\n\t}\n\n\tname(): string {\n\t\treturn 'SRS 3 for Crisp CSPs';\n\t}\n\n\t#getNeighborConstraints(c: Constraint): Constraint[] {\n\t\tconst index = c.index();\n\n\t\tif (this.#neighborConstraints[index] === null) {\n\t\t\tthis.#neighborConstraints[index] = c.neighbors();\n\t\t}\n\t\treturn this.#neighborConstraints[index];\n\t}\n\n\t#repair(c0: Constraint): boolean {\n\t\tthis._debugOutput('repair');\n\n\t\tconst canList = new AssignmentList();\n\t\tlet maxDiff = 0;\n\n\t\tfor (const v of c0) {\n\t\t\tconst v_val = v.value();  // Save the value\n\n\t\t\tlet nowVio = 0;\n\t\t\tfor (const c of v) {\n\t\t\t\tnowVio += (1 - c.isSatisfied());\n\t\t\t}\n\t\t\tout: for (const d of v.domain()) {\n\t\t\t\tif (v_val === d) continue;\n\t\t\t\tv.assign(d);\n\t\t\t\tif (c0.isSatisfied() !== 1) continue;  // Assuming c0 improvement\n\n\t\t\t\tlet diff = nowVio;\n\t\t\t\tfor (const n of v) {\n\t\t\t\t\tdiff -= (1 - n.isSatisfied());\n\t\t\t\t\tif (diff < maxDiff) continue out;  // If the improvement is less than the previous improvement, try the next variable.\n\t\t\t\t}\n\t\t\t\tif (diff > maxDiff) {  // An assignment that are better than ever before is found.\n\t\t\t\t\tmaxDiff = diff;\n\t\t\t\t\tcanList.clear();\n\t\t\t\t\tcanList.addVariable(v, d);\n\t\t\t\t} else if (maxDiff !== 0) {  // An assignments that can be improved to the same level as before is found.\n\t\t\t\t\tcanList.addVariable(v, d);\n\t\t\t\t}\n\t\t\t}\n\t\t\tv.assign(v_val);  // Restore the value\n\t\t}\n\t\tif (canList.size() > 0) {\n\t\t\tconst e = this.#isRandom ? canList.random() : canList.at(0);\n\t\t\te.apply();\n\t\t\tthis._debugOutput('\\t' + e);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t#shrink(node: TreeNode, c_stars: Set<TreeNode>): void {\n\t\tconst temp: TreeNode[] = [];\n\t\tlet cur = node;\n\n\t\twhile (true) {  // This procedure is originally a recursive call, but converted to a loop\n\t\t\tcur = cur.parent() as TreeNode;\n\t\t\ttemp.length = 0;\n\t\t\tcur.getDescendants(temp);\n\t\t\tcur.clear();\n\n\t\t\tfor (const n of c_stars) {\n\t\t\t\tthis.#openList.delete(n);\n\t\t\t\tthis.#closedList.delete(n);\n\t\t\t}\n\n\t\t\tif (c_stars.delete(cur)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tthis.#openList.add(cur);\n\t\t\tif (cur.parent() !== null && !this.#repair((cur.parent() as TreeNode).getObject())) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t#spread(node: TreeNode): void {\n\t\tthis._debugOutput('spread');\n\t\tthis.#closedList.add(node);\n\n\t\tfor (const c of this.#getNeighborConstraints(node.getObject())) {\n\t\t\tconst tnc = this.#nodes[c.index()];\n\n\t\t\tif (!this.#closedList.has(tnc) && !this.#openList.has(tnc)) {  // For constraints that are not included in Open or Closed\n\t\t\t\ttnc.clear();  // Because of its reuse, it may have had children when it was used before.\n\t\t\t\tnode.add(tnc);\n\t\t\t\tthis.#openList.add(tnc);\n\t\t\t}\n\t\t}\n\t}\n\n\t#srs(c_stars: Set<TreeNode>): boolean {\n\t\tthis._debugOutput('srs');\n\t\tconst endTime = (this._timeLimit === null) ? Number.MAX_VALUE : (Date.now() + this._timeLimit);\n\t\tlet iterCount = 0;\n\n\t\tthis.#closedList.clear();\n\t\tthis.#openList.clear();\n\t\tfor (const n of c_stars) {\n\t\t\tthis.#openList.add(n);\n\t\t}\n\n\t\twhile (c_stars.size && this.#openList.size) {\n\t\t\tif ((this._targetDeg ?? 1) <= (this._pro as CrispProblem).satisfiedConstraintRate()) {  // Success if violation rate improves from specified\n\t\t\t\tthis._debugOutput('stop: current degree is above the target');\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (this._iterLimit && this._iterLimit < iterCount++) {  // Failure if repeated a specified number\n\t\t\t\tthis._debugOutput('stop: number of iterations has reached the limit');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (endTime < Date.now()) {  // Failure if time limit is exceeded\n\t\t\t\tthis._debugOutput('stop: time limit has been reached');\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst node: TreeNode = this.#openList.values().next().value as TreeNode;\n\t\t\tthis.#openList.delete(node);\n\n\t\t\tif (this.#repair(node.getObject())) {\n\t\t\t\tif (!c_stars.delete(node)) {  // If the repaired node is included in C* (to be deleted)\n\t\t\t\t\tif (node.parent() !== null && this.#repair((node.parent() as TreeNode).getObject() as Constraint)) {  // When its improvement leads to the improvement of its parents\n\t\t\t\t\t\tthis.#shrink(node, c_stars);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.#spread(node);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {  // In case of repair failure\n\t\t\t\tthis.#spread(node);\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\texec(): boolean {\n\t\tconst vcs     = (this._pro as CrispProblem).violatingConstraints();\n\t\tconst c_stars = new Set<TreeNode>();\n\n\t\tfor (const c of vcs) {\n\t\t\tconst tnc = this.#nodes[c.index()];\n\t\t\tc_stars.add(tnc);\n\t\t}\n\t\tif (this.#srs(c_stars)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn c_stars.size === 0;\n\t}\n\n\t/**\n\t * Sets the randomness of the algorithm.\n\t * Enabling randomness reduces the risk of falling into a local solution, but makes the solution unrepeatable.\n\t * @param flag If true, randomness is enabled.\n\t */\n\tsetRandomness(flag: boolean): void {\n\t\tthis.#isRandom = flag;\n\t}\n\n}\n\nclass TreeNode {\n\n\t#children: TreeNode[] = [];\n\t#parent: TreeNode|null;\n\t#obj: any;\n\n\tconstructor(obj: any) {\n\t\tthis.#parent = null;\n\t\tthis.#obj = obj;\n\t}\n\n\tadd(tn: TreeNode): void {\n\t\ttn.#parent = this;\n\t\tthis.#children.push(tn);\n\t}\n\n\tclear(): void {\n\t\tfor (const tn of this.#children) {\n\t\t\ttn.#parent = null;\n\t\t}\n\t\tthis.#children.length = 0;\n\t}\n\n\tgetDescendants(tns: TreeNode[]): void {\n\t\ttns.push(this);\n\n\t\tfor (const tn of this.#children) {\n\t\t\ttn.getDescendants(tns);\n\t\t}\n\t}\n\n\tgetObject(): any {\n\t\treturn this.#obj;\n\t}\n\n\tparent(): TreeNode | null {\n\t\treturn this.#parent;\n\t}\n\n}\n", "/**\n * This class implements the forward checking method for fuzzy CSP.\n * The minimum-remaining-values (MRV) heuristic can also be used by specifying the option.\n * Each variable must have its own domain because it hides domain elements as branch pruning.\n * Forward checking is also performed for problems with polynomial constraints.\n *\n * @author Takuto Yanagida\n * @version 2023-04-16\n */\n\nimport { Problem } from '../../problem/problem';\nimport { Variable } from '../../problem/variable';\nimport { Constraint } from '../../problem/constraint';\nimport { AssignmentList } from '../../util/assignment-list';\nimport { DomainPruner } from '../../util/domain-pruner';\nimport { Solver } from '../solver';\n\nexport class FuzzyForwardChecking extends Solver {\n\n\tstatic CONTINUE  = 0;\n\tstatic TERMINATE = 1;\n\n\t#vars: Variable[];\n\t#sol: AssignmentList = new AssignmentList();\n\t#relCons: Constraint[][][] = [];  // Table to cache constraints between two variables.\n\n\t#solWorstDeg: number = 0;  // Degree of existing solutions (no need to find a solution less than this).\n\n\t#iterCount: number = 0;\n\t#endTime: number = 0;\n\t#useMRV: boolean = false;\n\t#degInc: number = 0;\n\n\t#sequence: Variable[];\n\t#unaryCons: Constraint[];\n\t#checkedCons: boolean[];\n\t#pruneIntensively: boolean = false;\n\n\t/**\n\t * Generates the solver given a fuzzy constraint satisfaction problem.\n\t * @param p A fuzzy problem.\n\t * @param worstSatisfactionDegree Worst satisfaction degree.\n\t */\n\tconstructor(p: Problem, worstSatisfactionDegree = null) {\n\t\tsuper(p);\n\t\tthis.#vars = [...this._pro.variables()];\n\t\tthis.#sequence = new Array(this._pro.variableSize());\n\t\tthis.#initializeRelatedConstraintTable();\n\t\tthis.#checkedCons = new Array(this._pro.constraintSize());\n\n\t\tconst temp: Constraint[] = [];\n\t\tfor (const c of this._pro.constraints()) {\n\t\t\tif (c.size() === 1) temp.push(c);\n\t\t}\n\t\tthis.#unaryCons = [...temp];  // To make it even if it is empty.\n\t\tif (worstSatisfactionDegree) {\n\t\t\tthis.#solWorstDeg = worstSatisfactionDegree;\n\t\t}\n\t}\n\n\tname() {\n\t\treturn 'Forward Checking for Fuzzy CSPs';\n\t}\n\n\t// Initializes a table that caches constraints between two variables.\n\t#initializeRelatedConstraintTable() {\n\t\tthis.#relCons = [];\n\n\t\tfor (let j = 0; j < this.#vars.length; ++j) {\n\t\t\tthis.#relCons.push(new Array(this.#vars.length));\n\n\t\t\tfor (let i = 0; i < this.#vars.length; ++i) {\n\t\t\t\tif (i < j) {\n\t\t\t\t\tthis.#relCons[j][i] = this._pro.constraintsBetween(this.#vars[i], this.#vars[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Retrieves an array of constraints from a table that caches constraints between two variables.\n\t#getConstraintsBetween(vi_index: number, vj_index: number): Constraint[] {\n\t\tif (vi_index < vj_index) {\n\t\t\treturn this.#relCons[vj_index][vi_index];\n\t\t}\n\t\treturn this.#relCons[vi_index][vj_index];\n\t}\n\n\t// Prune elements of the domain that make the unary constraint worse than the current worst degree.\n\t#pruneUnaryConstraints() {\n\t\tfor (const c of this.#unaryCons) {\n\t\t\tconst v      = c.at(0);\n\t\t\tconst orgVal = v.value();  // Save the value.\n\t\t\tconst d      = v.domain();\n\t\t\tconst dc     = v.solverObject;\n\n\t\t\tfor (let i = 0, n = d.size(); i < n; ++i) {\n\t\t\t\tv.assign(d.at(i));\n\t\t\t\tif (c.satisfactionDegree() <= this.#solWorstDeg) {\n\t\t\t\t\tdc.hide(i, -1);  // Here's a branch pruning!\n\t\t\t\t}\n\t\t\t}\n\t\t\tv.assign(orgVal);  // Restore the value.\n\t\t\tif (dc.isEmpty()) return false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t// Check for consistency between the current variable and one future variable, and prune elements of the domain that are inconsistent (when there is one unassigned variable in the scope of the constraint).\n\t#checkForwardConsistency(level: number, vi: Variable, c: Constraint) {\n\t\tconst di  = vi.domain();\n\t\tconst dci = vi.solverObject;\n\n\t\tfor (let i = 0, n = di.size(); i < n; ++i) {\n\t\t\tif (dci.isValueHidden(i)) continue;\n\t\t\tvi.assign(di.at(i));\n\t\t\tif (c.satisfactionDegree() <= this.#solWorstDeg) {  // It is not a solution when it is 'smaller than or equals'.\n\t\t\t\tdci.hide(i, level);  // Here's a branch pruning!\n\t\t\t}\n\t\t}\n\t\tvi.clear();\n\t\treturn !dci.isEmpty();  // Succeeds if the domain di of the future variable vi is not empty.\n\t}\n\n\t// Check for consistency between the current variable and one future variable, and prune elements of the domain that are inconsistent (when there are two unassigned variables in the scope of the constraint).\n\t#checkForwardConsistency2(level: number, vi: Variable, c: Constraint) {\n\t\tconst di  = vi.domain();\n\t\tconst dci = vi.solverObject;\n\t\tlet vj: Variable|null  = null;\n\n\t\tfor (const v of c) {\n\t\t\tif (v.isEmpty() && v !== vi) {\n\t\t\t\tvj = v;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tconst dj  = (vj as Variable).domain();\n\t\tconst dcj = (vj as Variable).solverObject;\n\t\tloop_i: for (let i = 0, ni = di.size(); i < ni; ++i) {\n\t\t\tif (dci.isValueHidden(i)) continue;\n\t\t\tvi.assign(di.at(i));  // Tentative assignment to vi\n\t\t\tfor (let j = 0, nj = dj.size(); j < nj; ++j) {\n\t\t\t\tif (dcj.isValueHidden(j)) continue;\n\t\t\t\t(vj as Variable).assign(dj.at(j));  // Tentative assignment to vj\n\t\t\t\tconst s = c.satisfactionDegree();\n\t\t\t\tif (s > this.#solWorstDeg) continue loop_i;  // Tentative assignment to vi was OK -> next tentative assignment.\n\t\t\t}\n\t\t\tdci.hide(i, level);  // It is not a solution when it is 'smaller than or equals'.\n\t\t}\n\t\t(vj as Variable).clear();\n\t\tvi.clear();\n\t\treturn !dci.isEmpty();  // Succeeds if the domain di of the future variable vi is not empty.\n\t}\n\n\t// Check for consistency between the current variable and one future variable, and prune elements of the domain that are inconsistent (when there are three unassigned variables in the scope of the constraint).\n\t#checkForwardConsistency3(level: number, vi: Variable, c: Constraint): boolean {\n\t\tconst di  = vi.domain();\n\t\tconst dci = vi.solverObject;\n\n\t\tlet vj: Variable|null = null;\n\t\tlet vk: Variable|null = null;\n\n\t\tfor (const v of c) {\n\t\t\tif (v.isEmpty() && v !== vi) {\n\t\t\t\tif (vj === null) {\n\t\t\t\t\tvj = v;\n\t\t\t\t} else {\n\t\t\t\t\tvk = v;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst dj  = (vj as Variable).domain();\n\t\tconst dk  = (vk as Variable).domain();\n\t\tconst dcj = (vj as Variable).solverObject;\n\t\tconst dck = (vk as Variable).solverObject;\n\n\t\tloop_i: for (let i = 0, ni = di.size(); i < ni; ++i) {\n\t\t\tif (dci.isValueHidden(i)) continue;\n\t\t\tvi.assign(di.at(i));  // Tentative assignment to vi\n\t\t\tfor (let j = 0, nj = dj.size(); j < nj; ++j) {\n\t\t\t\tif (dcj.isValueHidden(j)) continue;\n\t\t\t\t(vj as Variable).assign(dj.at(j));  // Tentative assignment to vj\n\t\t\t\tfor (let k = 0, nk = dk.size(); k < nk; ++k) {\n\t\t\t\t\tif (dck.isValueHidden(k)) continue;\n\t\t\t\t\t(vk as Variable).assign(dk.at(k));  // Tentative assignment to vk\n\t\t\t\t\tconst s = c.satisfactionDegree();\n\t\t\t\t\tif (s > this.#solWorstDeg) continue loop_i;  // Tentative assignment to vi was OK -> next tentative assignment.\n\t\t\t\t}\n\t\t\t}\n\t\t\tdci.hide(i, level);  // It is not a solution when it is 'smaller than or equals'.\n\t\t}\n\t\t(vk as Variable).clear();\n\t\t(vj as Variable).clear();\n\t\tvi.clear();\n\t\treturn !dci.isEmpty();  // Succeeds if the domain di of the future variable vi is not empty.\n\t}\n\n\t// In the case of polynomial constraints and when there are four or more unassigned variables, all combinations of assignments of unassigned variables are examined and pruned.\n\t#checkForwardConsistencyN(level: number, vi: Variable, c: Constraint, emptySize: number) {\n\t\tconst di  = vi.domain();\n\t\tconst dci = vi.solverObject;\n\t\tconst emp = new Array(emptySize - 1);\n\t\tlet j = 0;\n\n\t\tfor (const v of c) {\n\t\t\tif (v.isEmpty() && v !== vi) emp[j++] = v;\n\t\t}\n\t\tconst indexes = new Array(emp.length);\n\n\t\tloop_i: for (let i = 0, n = di.size(); i < n; ++i) {\n\t\t\tif (dci.isValueHidden(i)) continue;\n\t\t\tvi.assign(di.at(i));  // Tentative assignment to vi\n\t\t\tindexes.fill(0);\n\n\t\t\tcomLoop: while (true) {\n\t\t\t\tlet hidden = false;\n\t\t\t\tfor (let k = 0; k < emp.length; ++k) {\n\t\t\t\t\tconst dk  = emp[k].domain();\n\t\t\t\t\tconst dck = emp[k].solverObject;\n\t\t\t\t\tif (dck.isValueHidden(indexes[k])) {\n\t\t\t\t\t\thidden = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\temp[k].assign(dk.at(indexes[k]));\n\t\t\t\t}\n\t\t\t\tif (!hidden) {\n\t\t\t\t\tconst s = c.satisfactionDegree();\n\t\t\t\t\tif (s > this.#solWorstDeg) continue loop_i;  // Tentative assignment to vi was OK -> next tentative assignment.\n\t\t\t\t}\n\t\t\t\tfor (let k = 0; k < emp.length; ++k) {\n\t\t\t\t\tindexes[k] += 1;\n\t\t\t\t\tif (indexes[k] < emp[k].domain().size()) break;\n\t\t\t\t\tindexes[k] = 0;\n\t\t\t\t\tif (k === emp.length - 1) break comLoop;\n\t\t\t\t}\n\t\t\t}\n\t\t\tdci.hide(i, level);\n\t\t}\n\t\tfor (const v of emp) v.clear();\n\t\tvi.clear();\n\t\treturn !dci.isEmpty();  // Succeeds if the domain di of the future variable vi is not empty.\n\t}\n\n\t// Checks for possible assignment to a future variable from the current variable assignment.\n\t#checkForward(level: number, index: number) {\n\t\tfor (const v_i of  this.#vars) {\n\t\t\tif (!v_i.isEmpty()) continue;  // If it is a past or present variable.\n\n\t\t\tconst cs = this.#getConstraintsBetween(index, v_i.index());\n\n\t\t\tfor (const c of cs) {\n\t\t\t\tconst emptySize = c.emptyVariableSize();\n\t\t\t\tif (emptySize === 1) {\n\t\t\t\t\tif (!this.#checkForwardConsistency(level, v_i, c)) return false;\n\t\t\t\t} else if (this.#pruneIntensively) {  // Depends on options\n\t\t\t\t\tif (emptySize === 2) {\n\t\t\t\t\t\tif (!this.#checkForwardConsistency2(level, v_i, c)) return false;\n\t\t\t\t\t} else if (emptySize === 3) {\n\t\t\t\t\t\tif (!this.#checkForwardConsistency3(level, v_i, c)) return false;\n\t\t\t\t\t} else if (emptySize > 3) {\n\t\t\t\t\t\tif (!this.#checkForwardConsistencyN(level, v_i, c, emptySize)) return false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t// Checks to see if the current variable assignment makes the degree of the past variable worse than the current worst degree.\n\t#checkBackwardConsistency(vc: Variable): boolean {\n\t\tthis.#checkedCons.fill(false);  // Reuse.\n\n\t\tfor (let i = 0; i < this.#vars.length; ++i) {  // Find past variables.\n\t\t\tconst vi = this.#vars[i];\n\t\t\tif (vi === vc || vi.isEmpty()) continue;  // If it is a future variable or a present variable.\n\t\t\tconst cs = this.#getConstraintsBetween(vc.index(), i);\n\n\t\t\tfor (const c of cs) {\n\t\t\t\tif (this.#checkedCons[c.index()]) continue;  // Because of the possibility of duplication in polynomial constraints\n\t\t\t\tconst s = c.satisfactionDegree();\n\t\t\t\tif (s !== Constraint.UNDEFINED && s <= this.#solWorstDeg) {  // It is not a solution when it is 'smaller than or equals'.\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tthis.#checkedCons[c.index()] = true;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t#refresh() {\n\t\tfor (let i = 0; i < this.#sequence.length; ++i) {\n\t\t\tconst index_vi = this.#sequence[i].index();\n\n\t\t\tfor (let j = i + 1; j < this.#sequence.length; ++j) {\n\t\t\t\tconst vj = this.#sequence[j];\n\t\t\t\tconst cs = this.#getConstraintsBetween(index_vi, vj.index());\n\n\t\t\t\tfor (const c of cs) {\n\t\t\t\t\tconst orgVal = vj.value();\n\t\t\t\t\tconst dj     = vj.domain();\n\t\t\t\t\tconst dcj    = vj.solverObject;\n\n\t\t\t\t\tfor (let k = 0, n = dj.size(); k < n; ++k) {\n\t\t\t\t\t\tif (dcj.isValueHidden(k)) continue;\n\t\t\t\t\t\tvj.assign(dj.at(k));\n\t\t\t\t\t\tif (c.satisfactionDegree() <= this.#solWorstDeg) {\n\t\t\t\t\t\t\tdcj.hide(k, i);  // Here's a branch pruning!\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tvj.assign(orgVal);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Returns the index of the smallest domain variable.\n\t#indexOfVariableWithMRV(): number {\n\t\tlet index = 0;\n\t\tlet size  = Number.MAX_VALUE;\n\n\t\tfor (let i = 0; i < this.#vars.length; ++i) {\n\t\t\tconst v = this.#vars[i];\n\t\t\tif (!v.isEmpty()) continue;\n\t\t\tconst d = v.domain();\n\t\t\tconst s = d.size() - v.solverObject.hiddenSize();\n\t\t\tif (s < size) {\n\t\t\t\tsize  = s;\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\t\treturn index;\n\t}\n\n\t// Performs search one variable at a time.\n\t#branch(level: number): number {\n\t\tlet bc = FuzzyForwardChecking.CONTINUE;\n\t\tconst vc_index = this.#useMRV ? this.#indexOfVariableWithMRV() : level;\n\t\tconst vc       = this.#vars[vc_index];\n\t\tconst d        = vc.domain();\n\t\tconst dc       = vc.solverObject;\n\t\tthis.#sequence[level] = vc;\n\n\t\tfor (let i = 0, n = d.size(); i < n; ++i) {\n\t\t\tif (dc.isValueHidden(i)) continue;\n\t\t\tif ((this._iterLimit && this._iterLimit < this.#iterCount++) || this.#endTime < Date.now()) {\n\t\t\t\tbc = FuzzyForwardChecking.TERMINATE;  // Search terminated due to restrictions.\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tvc.assign(d.at(i));\n\n\t\t\tfor (const v of this.#vars) v.solverObject.reveal(level);\n\t\t\tif (!this.#checkBackwardConsistency(vc)) continue;\n\t\t\tif (!this.#checkForward(level, vc_index)) continue;\n\n\t\t\tconst nextLevel = level + 1;\n\t\t\tbc = (nextLevel === this.#vars.length - 1) ? this.#branchLast(nextLevel) : this.#branch(nextLevel);\n\t\t\tif (bc === FuzzyForwardChecking.TERMINATE) break;\n\t\t}\n\t\tif (bc === FuzzyForwardChecking.CONTINUE) {  // When searching back to the parent, undo the branch pruning here.\n\t\t\tfor (const v of this.#vars) v.solverObject.reveal(level);\n\t\t}\n\t\tvc.clear();\n\t\treturn bc;\n\t}\n\n\t// Performs search on the last variable.\n\t#branchLast(level: number): number {\n\t\tlet bc = FuzzyForwardChecking.CONTINUE;\n\t\tconst vc = this.#vars[this.#useMRV ? this.#indexOfVariableWithMRV() : level];\n\t\tconst d  = vc.domain();\n\t\tconst dc = vc.solverObject;\n\t\tthis.#sequence[level] = vc;\n\n\t\tfor (let i = 0, n = d.size(); i < n; ++i) {\n\t\t\tif (dc.isValueHidden(i)) continue;\n\t\t\tif ((this._iterLimit && this._iterLimit < this.#iterCount++) || this.#endTime < Date.now()) {\n\t\t\t\tbc = FuzzyForwardChecking.TERMINATE;  // Search terminated due to restrictions.\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tvc.assign(d.at(i));\n\n\t\t\tconst deg = this._pro.worstSatisfactionDegree();\n\t\t\tif (deg > this.#solWorstDeg) {  // A new solution is assumed when 'greater than'.\n\t\t\t\tthis.#solWorstDeg = deg;\n\t\t\t\tthis.#sol.setProblem(this._pro);\n\t\t\t\tbc = FuzzyForwardChecking.TERMINATE;\n\t\t\t\tif (this._targetDeg !==  null && this._targetDeg <= this.#solWorstDeg) {  // Search ends when target is reached\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tthis.#pruneUnaryConstraints();\n\t\t\t\tthis.#refresh();\n\t\t\t}\n\t\t}\n\t\tvc.clear();\n\t\treturn bc;\n\t}\n\n\t// Do search.\n\texec(): boolean {\n\t\tthis.#endTime   = (this._timeLimit === null) ? Number.MAX_VALUE : (Date.now() + this._timeLimit);\n\t\tthis.#iterCount = 0;\n\n\t\tfor (const v of this.#vars) {\n\t\t\tv.solverObject = new DomainPruner(v.domain().size());  // Generation of domain pruners.\n\t\t}\n\t\tthis._pro.clearAllVariables();\n\t\tif (!this.#pruneUnaryConstraints()) return false;  // Since _worstSatisfactionDegree_ has been updated, call this function.\n\n\t\tlet success = false;\n\t\twhile (true) {\n\t\t\tconst bc = this.#branch(0);\n\t\t\tif (bc === FuzzyForwardChecking.TERMINATE) {\n\t\t\t\tif (this._iterLimit && this._iterLimit < this.#iterCount++) {\n\t\t\t\t\tthis._debugOutput('stop: number of iterations has reached the limit');\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (this.#endTime < Date.now()) {\n\t\t\t\t\tthis._debugOutput('stop: time limit has been reached');\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this.#sol.isEmpty()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tthis._debugOutput(`\\tfound a solution: ${this.#solWorstDeg}`);\n\t\t\tif (this.foundSolution(this.#sol, this.#solWorstDeg)) {  // Call hook\n\t\t\t\tsuccess = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (this._targetDeg === null) {  // Degree not specified\n\t\t\t\tsuccess = true;\n\t\t\t\tthis.#solWorstDeg += this.#degInc;  // Find the next solution within the limit.\n\t\t\t} else if (this._targetDeg <= this.#solWorstDeg) {  // The current degree exceeded the specified degree.\n\t\t\t\tthis._debugOutput('stop: current degree is above the target');\n\t\t\t\tsuccess = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tfor (const v of this.#vars) v.solverObject.revealAll();\n\t\t}\n\t\tthis.#sol.apply();\n\t\tfor (const v of this.#vars) v.solverObject = null;  // Delete branch pruner\n\t\treturn success;\n\t}\n\n\t/**\n\t * Constraint satisfaction degree is set as an achievement goal that serves as a condition for stopping the solver.\n\t * The solver stops as successful when the specified degree is reached or exceeded.\n\t * The default (unset) is 0.8.\n\t * @param rate Degree. null indicates not set.\n\t */\n\tsetTargetRate(rate: number|null = null): void {\n\t\tthis._targetDeg = rate;\n\t\tif (this._targetDeg === null) {\n\t\t\tthis.#solWorstDeg = 0;\n\t\t} else {\n\t\t\t// Find the worstSatisfactionDegree_ that is slightly smaller than the targetDegree_.\n\t\t\tlet e = Number.MIN_VALUE\n\t\t\tthis.#solWorstDeg = this._targetDeg - e;\n\t\t\twhile (this.#solWorstDeg >= this._targetDeg) {\n\t\t\t\te *= 10;\n\t\t\t\tthis.#solWorstDeg = this._targetDeg - e;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Specify whether to use the minimum-remaining-values (MRV) heuristic.\n\t * Use of MRV may increase processing time for some problems.\n\t * Default is false.\n\t * @param flag Use MRV if true.\n\t */\n\tsetUsingMinimumRemainingValuesHeuristics(flag: boolean): void {\n\t\tthis.#useMRV = flag;\n\t}\n\n\t/**\n\t * If a solution is found and the search continues, it specifies how much the worst constraint satisfaction degree should be increased.\n\t * @param degree Increasing constraint satisfaction degree.\n\t */\n\tsetIncrementStepOfWorstSatisfactionDegree(degree: number): void {\n\t\tthis.#degInc = degree;\n\t}\n\n\t/**\n\t * Specifies whether or not to intensively prune branches when the problem contains 3- or n-ary constraints.\n\t * Depending on the problem, intensive pruning may increase processing time.\n\t * Default is false.\n\t * @param flag Whether or not to intensively prune branches.\n\t */\n\tsetIntensivePruning(flag: boolean): void {\n\t\tthis.#pruneIntensively = flag;\n\t}\n\n}\n", "/**\n * This class implements the forward checking method for fuzzy CSPs that contain only binary constraints.\n * The minimum-remaining-values (MRV) heuristic can also be used by specifying the option.\n *\n * @author Takuto Yanagida\n * @version 2023-04-16\n */\n\nimport { Problem } from '../../problem/problem';\nimport { Variable } from '../../problem/variable';\nimport { Constraint } from '../../problem/constraint';\nimport { AssignmentList } from '../../util/assignment-list';\nimport { DomainPruner } from '../../util/domain-pruner';\nimport { Solver } from '../solver';\n\nexport class FuzzyForwardCheckingBc extends Solver {\n\n\tstatic CONTINUE  = 0;\n\tstatic TERMINATE = 1;\n\n\t#vars: Variable[];\n\t#sol: AssignmentList = new AssignmentList();\n\t#relCons: Constraint[][][] = [];  // Table to cache constraints between two variables.\n\n\t#solWorstDeg: number = 0;  // Degree of existing solutions (no need to find a solution less than this).\n\n\t#iterCount: number = 0;\n\t#endTime: number = 0;\n\t#useMRV: boolean = false;\n\t#degInc: number = 0;\n\n\t/**\n\t * Generates the solver given a fuzzy constraint satisfaction problem.\n\t * @param p A fuzzy problem.\n\t * @param worstSatisfactionDegree Worst satisfaction degree.\n\t */\n\tconstructor(p: Problem, worstSatisfactionDegree: number|null = null) {\n\t\tsuper(p);\n\t\tthis.#vars = [...this._pro.variables()];\n\t\tthis.#initializeRelatedConstraintTable();\n\n\t\tthis.#solWorstDeg = Math.max(0, p.worstSatisfactionDegree());\n\t\tif (worstSatisfactionDegree) {\n\t\t\tthis.#solWorstDeg = worstSatisfactionDegree;\n\t\t}\n\t}\n\n\tname() {\n\t\treturn 'Forward Checking for Fuzzy CSPs of Binary Constraints';\n\t}\n\n\t// Initializes a table that caches constraints between two variables.\n\t#initializeRelatedConstraintTable() {\n\t\tthis.#relCons = [];\n\n\t\tfor (let j = 0; j < this.#vars.length; ++j) {\n\t\t\tthis.#relCons.push(new Array(this.#vars.length));\n\n\t\t\tfor (let i = 0; i < this.#vars.length; ++i) {\n\t\t\t\tif (i < j) {\n\t\t\t\t\tthis.#relCons[j][i] = this._pro.constraintsBetween(this.#vars[i], this.#vars[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Retrieves an array of constraints from a table that caches constraints between two variables.\n\t#getConstraintsBetween(vi_index: number, vj_index: number): Constraint[] {\n\t\tif (vi_index < vj_index) {\n\t\t\treturn this.#relCons[vj_index][vi_index];\n\t\t}\n\t\treturn this.#relCons[vi_index][vj_index];\n\t}\n\n\t// Check for consistency between the current variable and one future variable, and prune elements of the domain that are inconsistent (when there is one unassigned variable in the scope of the constraint).\n\t#checkForwardConsistency(level: number, vi: Variable, c: Constraint): boolean {\n\t\tconst di  = vi.domain();\n\t\tconst dci = vi.solverObject;\n\n\t\tfor (let i = 0, n = di.size(); i < n; ++i) {\n\t\t\tif (dci.isValueHidden(i)) continue;\n\t\t\tvi.assign(di.at(i));\n\t\t\tif (c.satisfactionDegree() <= this.#solWorstDeg) {  // It is not a solution when it is 'smaller than or equals'.\n\t\t\t\tdci.hide(i, level);  // Here's a branch pruning!\n\t\t\t}\n\t\t}\n\t\tvi.clear();\n\t\treturn !dci.isEmpty();  // Succeeds if the domain di of the future variable vi is not empty.\n\t}\n\n\t// Checks for possible assignment to a future variable from the current variable assignment.\n\t#checkForward(level: number, index: number): boolean {\n\t\tfor (const v_i of  this.#vars) {\n\t\t\tif (!v_i.isEmpty()) continue;  // If it is a past or present variable.\n\n\t\t\tconst cs = this.#getConstraintsBetween(index, v_i.index());\n\t\t\tfor (const c of cs) {\n\t\t\t\tif (c.size() === 2) {  // If it is a binary constraint.\n\t\t\t\t\tif (!this.#checkForwardConsistency(level, v_i, c)) return false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t// Returns the index of the smallest domain variable.\n\t#indexOfVariableWithMRV() {\n\t\tlet index = 0;\n\t\tlet size  = Number.MAX_VALUE;\n\n\t\tfor (let i = 0; i < this.#vars.length; ++i) {\n\t\t\tconst v = this.#vars[i];\n\t\t\tif (!v.isEmpty()) continue;\n\t\t\tconst d = v.domain();\n\t\t\tconst s = d.size() - v.solverObject.hiddenSize();\n\t\t\tif (s < size) {\n\t\t\t\tsize  = s;\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\t\treturn index;\n\t}\n\n\t// Performs search one variable at a time.\n\t#branch(level: number): number {\n\t\tlet bc = FuzzyForwardCheckingBc.CONTINUE;\n\t\tconst vc_index = this.#useMRV ? this.#indexOfVariableWithMRV() : level;\n\t\tconst vc       = this.#vars[vc_index];\n\t\tconst d        = vc.domain();\n\t\tconst dc       = vc.solverObject;\n\n\t\tfor (let i = 0, n = d.size(); i < n; ++i) {\n\t\t\tif (dc.isValueHidden(i)) continue;\n\t\t\tif ((this._iterLimit && this._iterLimit < this.#iterCount++) || this.#endTime < Date.now()) {\n\t\t\t\tbc = FuzzyForwardCheckingBc.TERMINATE;  // Search terminated due to restrictions.\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tvc.assign(d.at(i));\n\n\t\t\tfor (const v of this.#vars) v.solverObject.reveal(level);\n\t\t\tif (!this.#checkForward(level, vc_index)) continue;\n\n\t\t\tconst nextLevel = level + 1;\n\t\t\tbc = (nextLevel === this.#vars.length - 1) ? this.#branchLast(nextLevel) : this.#branch(nextLevel);\n\t\t\tif (bc === FuzzyForwardCheckingBc.TERMINATE) break;\n\t\t}\n\t\tif (bc === FuzzyForwardCheckingBc.CONTINUE) {  // When searching back to the parent, undo the branch pruning here.\n\t\t\tfor (const v of this.#vars) v.solverObject.reveal(level);\n\t\t}\n\t\tvc.clear();\n\t\treturn bc;\n\t}\n\n\t// Performs search on the last variable.\n\t#branchLast(level: number): number {\n\t\tlet bc = FuzzyForwardCheckingBc.CONTINUE;\n\t\tconst vc = this.#vars[this.#useMRV ? this.#indexOfVariableWithMRV() : level];\n\t\tconst d  = vc.domain();\n\t\tconst dc = vc.solverObject;\n\n\t\tfor (let i = 0, n = d.size(); i < n; ++i) {\n\t\t\tif (dc.isValueHidden(i)) continue;\n\t\t\tif ((this._iterLimit && this._iterLimit < this.#iterCount++) || this.#endTime < Date.now()) {\n\t\t\t\tbc = FuzzyForwardCheckingBc.TERMINATE;  // Search terminated due to restrictions.\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tvc.assign(d.at(i));\n\n\t\t\tconst deg = this._pro.worstSatisfactionDegree();\n\t\t\tif (deg > this.#solWorstDeg) {  // A new solution is assumed when 'greater than'.\n\t\t\t\tthis.#solWorstDeg = deg;\n\t\t\t\tthis.#sol.setProblem(this._pro);\n\t\t\t\tbc = FuzzyForwardCheckingBc.TERMINATE;  // Search terminated due to restrictions.\n\t\t\t\tif (this._targetDeg !== null && this._targetDeg <= this.#solWorstDeg) {  // Search ends when target is reached\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tvc.clear();\n\t\treturn bc;\n\t}\n\n\t// Do search.\n\texec() {\n\t\tthis.#endTime   = (this._timeLimit === null) ? Number.MAX_VALUE : (Date.now() + this._timeLimit);\n\t\tthis.#iterCount = 0;\n\n\t\tfor (const v of this.#vars) {\n\t\t\tv.solverObject = new DomainPruner(v.domain().size());  // Generation of domain pruners.\n\t\t}\n\t\tthis._pro.clearAllVariables();\n\n\t\tconst sol = new AssignmentList();\n\n\t\tlet success = false;\n\t\twhile (true) {\n\t\t\tconst bc = this.#branch(0);\n\t\t\tif (bc === FuzzyForwardCheckingBc.TERMINATE) {\n\t\t\t\tif (this._iterLimit && this._iterLimit < this.#iterCount++) {\n\t\t\t\t\tthis._debugOutput('stop: number of iterations has reached the limit');\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (this.#endTime < Date.now()) {\n\t\t\t\t\tthis._debugOutput('stop: time limit has been reached');\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this.#sol.isEmpty()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tsol.setAssignmentList(this.#sol);\n\t\t\tthis.#sol.clear();  // Clear it so that if the solution is not found in the next search, it will be known.\n\n\t\t\tthis._debugOutput(`\\tfound a solution: ${this.#solWorstDeg}`);\n\t\t\tif (this.foundSolution(sol, this.#solWorstDeg)) {  // Call hook\n\t\t\t\tsuccess = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (this._targetDeg === null) {  // Degree not specified\n\t\t\t\tsuccess = true;\n\t\t\t\tif (this.#solWorstDeg + this.#degInc > 1) break;\n\t\t\t\tthis.#solWorstDeg += ((this.#solWorstDeg + this.#degInc > 1) ? 0 : this.#degInc);  // Find the next solution within the limit.\n\t\t\t} else if (this._targetDeg <= this.#solWorstDeg) {  // The current degree exceeded the specified degree.\n\t\t\t\tthis._debugOutput(`stop: current degree is above the target`);\n\t\t\t\tsuccess = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tfor (const v of this.#vars) v.solverObject.revealAll();\n\t\t}\n\t\tsol.apply();\n\t\tfor (const v of this.#vars) v.solverObject = null;  // Delete branch pruner\n\t\treturn success;\n\t}\n\n\t/**\n\t * Constraint satisfaction degree is set as an achievement goal that serves as a condition for stopping the solver.\n\t * The solver stops as successful when the specified degree is reached or exceeded.\n\t * The default (unset) is 0.8.\n\t * @param rate Degree. null indicates not set.\n\t */\n\tsetTargetRate(rate = null) {\n\t\tthis._targetDeg = rate;\n\t\tif (this._targetDeg === null) {\n\t\t\tthis.#solWorstDeg = 0;\n\t\t} else {\n\t\t\t// Find the worstSatisfactionDegree_ that is slightly smaller than the targetDegree_.\n\t\t\tlet e = Number.MIN_VALUE\n\t\t\tthis.#solWorstDeg = this._targetDeg - e;\n\t\t\twhile (this.#solWorstDeg >= this._targetDeg) {\n\t\t\t\te *= 10;\n\t\t\t\tthis.#solWorstDeg = this._targetDeg - e;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Specify whether to use the minimum-remaining-values (MRV) heuristic.\n\t * Use of MRV may increase processing time for some problems.\n\t * Default is false.\n\t * @param flag Use MRV if true.\n\t */\n\tsetUsingMinimumRemainingValuesHeuristics(flag: boolean): void {\n\t\tthis.#useMRV = flag;\n\t}\n\n\t/**\n\t * If a solution is found and the search continues, it specifies how much the worst constraint satisfaction degree should be increased.\n\t * @param degree Increasing constraint satisfaction degree.\n\t */\n\tsetIncrementStepOfWorstSatisfactionDegree(degree: number): void {\n\t\tthis.#degInc = degree;\n\t}\n\n}\n", "/**\n * A class that implements the flexible local changes method.\n *\n * @author Takuto Yanagida\n * @version 2023-04-16\n */\n\nimport { Constraint } from '../../problem/constraint';\nimport { AssignmentList } from '../../util/assignment-list';\nimport { Solver } from '../solver';\nimport { Problem } from '../../problem/problem';\nimport { Variable } from '../../problem/variable';\n\nexport class FlexibleLocalChanges extends Solver {\n\n\tstatic #setPlusSet<T>(s1: Set<T>, s2: Set<T>): Set<T> {\n\t\tconst sn = new Set<T>(s1);\n\t\tfor (const v of s2) sn.add(v);\n\t\treturn sn;\n\t}\n\n\tstatic #setMinusSet<T>(s1: Set<T>, s2: Set<T>): Set<T> {\n\t\tconst sn = new Set<T>(s1);\n\t\tfor (const v of s2) sn.delete(v);\n\t\treturn sn;\n\t}\n\n\tstatic #setPlusElement<T>(s: Set<T>, e: T): Set<T> {\n\t\tconst sn = new Set<T>(s);\n\t\tsn.add(e);\n\t\treturn sn;\n\t}\n\n\tstatic #setMinusElement<T>(s: Set<T>, e: T): Set<T> {\n\t\tconst sn = new Set<T>(s);\n\t\tsn.delete(e);\n\t\treturn sn;\n\t}\n\n\t#lt: number = 0;\n\t#lb: number = 0;\n\n\t#iterCount: number = 0;\n\t#endTime: number = 0;\n\t#globalReturn: number = 0;\n\n\tconstructor(p: Problem) {\n\t\tsuper(p);\n\t\tthis.#computeHighestAndLowestConsistencyDegree();\n\t}\n\n\tname() {\n\t\treturn 'Flexible Local Changes';\n\t}\n\n\t#choose(x2: Set<Variable>, cr: Set<Constraint>) {\n\t\tconst res = new Map();\n\n\t\tfor (const c of cr) {\n\t\t\tif (!c.isDefined()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfor (const v of c) {\n\t\t\t\tif (!res.has(v)) {\n\t\t\t\t\tres.set(v, 1);\n\t\t\t\t} else {\n\t\t\t\t\tres.set(v, res.get(v) + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst vs = [...x2];\n\t\tvs.sort((o1, o2) => {\n\t\t\tlet res1 = 0;\n\t\t\tlet res2 = 0;\n\t\t\tif (res.has(o1)) res1 = res.get(o1);\n\t\t\tif (res.has(o2)) res2 = res.get(o2);\n\n\t\t\tif (res1 < res2) return 1;\n\t\t\tif (res1 > res2) return -1;\n\t\t\treturn 0;\n\t\t});\n\n\t\tconst ret = new Set<Variable>();\n\n\t\tfor (const v of vs) {\n\t\t\tlet remain = false;\n\t\t\tfor (const c of cr) {\n\t\t\t\tif (c.isDefined()) {\n\t\t\t\t\tremain = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!remain) break;\n\t\t\tv.clear();\n\t\t\tret.add(v);\n\t\t}\n\t\treturn ret;\n\t}\n\n\t#computeHighestAndLowestConsistencyDegree() {\n\t\tlet low  = 1;\n\t\tlet high = 0;\n\n\t\tfor (const v of this._pro.variables()) {\n\t\t\tfor (const c of v) {\n\t\t\t\tconst l = c.lowestConsistencyDegree();\n\t\t\t\tconst h = c.highestConsistencyDegree();\n\t\t\t\tif (l < low)  low  = l;\n\t\t\t\tif (h > high) high = h;\n\t\t\t}\n\t\t}\n\t\tthis.#lb = low;\n\t\tthis.#lt = high;\n\t}\n\n\t#flcRepair(X1: Set<Variable>, X2: Set<Variable>, xi: Variable, consX1xi: number, consX12: number, cr: Set<Constraint>, rc: number) {\n\t\tconst X3p = this.#choose(X2, cr);\n\t\tconst X1p = FlexibleLocalChanges.#setPlusElement(X1, xi);\n\t\tconst X2p = FlexibleLocalChanges.#setMinusSet(X2, X3p);\n\t\treturn this.#flcVariables(X1p, X2p, X3p, consX1xi, Math.min(consX12, consX1xi), rc);\n\t}\n\n\t#flcVariable(X1: Set<Variable>, X2: Set<Variable>, xi: Variable, consX1: number, consX12: number, rc: number) {\n\t\tlet bestCons = this.#lb;\n\t\tif (xi.domain().size() === 0) {\n\t\t\treturn bestCons;\n\t\t}\n\t\tlet bestX2  = AssignmentList.fromVariables(X2);\n\t\tlet bestDij = xi.domain().at(0);\n\n\t\tconst x2Store = AssignmentList.fromVariables(X2);\n\n\t\tfor (let j = 0; j < xi.domain().size() && bestCons < consX12; ++j) {\n\t\t\tconst dij = xi.domain().at(j);\n\t\t\txi.assign(dij);\n\t\t\tconst consX1_xi = Math.min(consX1, this.#testX1(X1, xi, bestCons, rc));\n\n\t\t\tif (consX1_xi > Math.max(bestCons, rc)) {\n\t\t\t\tconst crNew = new Set<Constraint>();\n\t\t\t\tconst consX12_xi = Math.min(Math.min(consX1_xi, consX12), this.#testX12(X1, X2, xi, consX1_xi, consX12, crNew));\n\n\t\t\t\tif (consX12_xi > bestCons) {\n\t\t\t\t\tbestCons = consX12_xi;\n\t\t\t\t\tbestDij  = dij;\n\t\t\t\t\tbestX2   = AssignmentList.fromVariables(X2);\n\t\t\t\t}\n\t\t\t\tif (crNew.size) {\n\t\t\t\t\tconst repairCons = this.#flcRepair(X1, X2, xi, consX1_xi, consX12, crNew, Math.max(rc, bestCons));\n\t\t\t\t\tif (this.#globalReturn !== -1) {\n\t\t\t\t\t\treturn bestCons;\n\t\t\t\t\t}\n\t\t\t\t\tif (repairCons > bestCons) {\n\t\t\t\t\t\tbestCons = repairCons;\n\t\t\t\t\t\tbestDij  = dij;\n\t\t\t\t\t\tbestX2   = AssignmentList.fromVariables(X2);\n\t\t\t\t\t}\n\t\t\t\t\tx2Store.apply();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tbestX2.apply();\n\t\txi.assign(bestDij);\n\t\treturn bestCons;\n\t}\n\n\t#flcVariables(X1: Set<Variable>, X2: Set<Variable>, X3: Set<Variable>, consX1: number, consX12: number, rc: number): number {\n\t\tthis._debugOutput(`X1 ${X1.size}, X2' ${X2.size}, X3' ${X3.size}`);\n\n\t\tif (this._targetDeg !== null && this._targetDeg <= this._pro.worstSatisfactionDegree()) {  // Success if the degree improves from specified\n\t\t\tthis._debugOutput('stop: current degree is above the target');\n\t\t\tthis.#globalReturn = 1;\n\t\t\treturn consX12;\n\t\t}\n\t\tif (this._iterLimit && this._iterLimit < this.#iterCount++) {  // Failure if repeated a specified number\n\t\t\tthis._debugOutput('stop: number of iterations has reached the limit');\n\t\t\tthis.#globalReturn = 0;\n\t\t\treturn consX12;\n\t\t}\n\t\tif (this.#endTime < Date.now()) {  // Failure if time limit is exceeded\n\t\t\tthis._debugOutput('stop: time limit has been reached');\n\t\t\tthis.#globalReturn = 0;\n\t\t\treturn consX12;\n\t\t}\n\t\tif (X3.size === 0) {\n\t\t\treturn consX12;\n\t\t}\n\t\tconst xi        = X3.values().next().value as Variable;\n\t\tconst consX12xi = this.#flcVariable(X1, X2, xi, consX1, consX12, rc);\n\n\t\tif (this.#globalReturn !== -1) {\n\t\t\treturn consX12;\n\t\t}\n\t\tif (consX12xi < rc) {\n\t\t\treturn this.#lb;\n\t\t}\n\t\tX2 = FlexibleLocalChanges.#setPlusElement(X2, xi);\n\t\tX3 = FlexibleLocalChanges.#setMinusElement(X3, xi);\n\t\treturn this.#flcVariables(X1, X2, X3, consX1, consX12xi, rc);\n\t}\n\n\t#initTest(X: Set<Variable>, cr: Set<Constraint>) {\n\t\tconst cs = new Set<Constraint>();\n\t\tfor (const v of X) {\n\t\t\tfor (const c of v) {\n\t\t\t\tcs.add(c);  // All variables in X have been assigned.\n\t\t\t}\n\t\t}\n\t\tlet ret = 1;\n\t\tfor (const c of cs) {\n\t\t\tconst sd = c.satisfactionDegree();\n\t\t\tif (sd === Constraint.UNDEFINED) continue;\n\t\t\tif (sd < ret) ret = sd;\n\t\t}\n\t\tfor (const c of this._pro.constraints()) {\n\t\t\tconst cd = c.lowestConsistencyDegree();\n\t\t\tif (cd < this.#lt) cr.add(c);\n\t\t}\n\t\treturn ret;\n\t}\n\n\t#testX1(X1: Set<Variable>, xi: Variable, bestCons: number, rc: number): number {\n\t\tlet cd = 1;\n\t\tconst cs = new Set<Constraint>();\n\n\t\tfor (const v of X1) {\n\t\t\tconst temp = this._pro.constraintsBetween(v, xi);\n\t\t\tfor (const c of temp) cs.add(c);\n\t\t}\n\t\tfor (const c of cs) {\n\t\t\tconst d = c.satisfactionDegree();\n\t\t\tif (d === Constraint.UNDEFINED) continue;\n\t\t\tif (d < cd) cd = d;\n\t\t\tif (cd <= bestCons || cd <= rc) return cd;  // If it is determined that a better solution than the current solution cannot be obtained\n\t\t}\n\t\treturn cd;\n\t}\n\n\t#testX12(X1: Set<Variable>, X2: Set<Variable>, xi: Variable, consX1xi: number, consX12: number, cr: Set<Constraint>): number {\n\t\tlet csd = 1;\n\t\tconst cs = new Set<Constraint>();\n\n\t\tfor (const v of X1) {\n\t\t\tconst temp = this._pro.constraintsBetween(v, xi);\n\t\t\tfor (const c of temp) cs.add(c);\n\t\t}\n\t\tfor (const v of X2) {\n\t\t\tconst temp = this._pro.constraintsBetween(v, xi);\n\t\t\tfor (const c of temp) cs.add(c);\n\t\t}\n\t\tfor (const c of cs) {\n\t\t\tconst sd = c.satisfactionDegree();\n\t\t\tif (sd === Constraint.UNDEFINED) continue;\n\t\t\tif (sd < csd) csd = sd;\n\t\t}\n\t\tfor (const c of cs) {\n\t\t\tconst sd = c.satisfactionDegree();\n\t\t\tif (sd === Constraint.UNDEFINED) continue;\n\t\t\tif (sd < consX1xi || sd < consX12) cr.add(c);\n\t\t}\n\t\treturn csd;\n\t}\n\n\texec(): boolean {\n\t\tthis.#endTime      = (this._timeLimit === null) ? Number.MAX_VALUE : (Date.now() + this._timeLimit);\n\t\tthis.#iterCount    = 0;\n\t\tthis.#globalReturn = -1;\n\n\t\tconst wsd = this._pro.worstSatisfactionDegree();\n\t\tif (this._pro.emptyVariableSize() === 0) {\n\t\t\tthis._pro.clearAllVariables();\n\t\t}\n\t\tconst X1 = new Set<Variable>();\n\t\tconst X2 = new Set<Variable>();  // Currently assigned variables.\n\t\tconst X3 = new Set<Variable>();  // Currently unassigned variables.\n\t\tfor (const v of this._pro.variables()) {\n\t\t\t(!v.isEmpty() ? X2 : X3).add(v);\n\t\t}\n\n\t\tconst cr       = new Set<Constraint>();\n\t\tconst initCons = this.#initTest(X2, cr);\n\t\tlet rc;\n\t\tlet initSol: AssignmentList|null = null;\n\n\t\tif (X3.size === 0) {\n\t\t\trc      = initCons;\n\t\t\tinitSol = AssignmentList.fromVariables(X2);\n\t\t} else {\n\t\t\trc = this.#lb;\n\t\t}\n\t\tconst X3p = FlexibleLocalChanges.#setPlusSet(this.#choose(X2, cr), X3);\n\t\tconst X2p = FlexibleLocalChanges.#setMinusSet(X2, X3p);\n\t\tlet result = this.#flcVariables(X1, X2p, X3p, this.#lt, this.#lt, rc);\n\t\tif (result < rc) {\n\t\t\tif (initSol !== null) {\n\t\t\t\tinitSol.apply();\n\t\t\t}\n\t\t}\n\t\tresult = this._pro.worstSatisfactionDegree();\n\t\treturn result > wsd && result > 0 && (this.#globalReturn !== 0 || this._targetDeg === null);\n\t}\n\n}\n", "/**\n * A class that implements the flexible local changes method.\n * The implementation is optimized by converting recursive calls to loops.\n *\n * @author Takuto Yanagida\n * @version 2023-04-11\n */\n\nimport { Constraint } from '../../problem/constraint';\nimport { AssignmentList } from '../../util/assignment-list';\nimport { Solver } from '../solver';\nimport { Problem } from '../../problem/problem';\nimport { Variable } from '../../problem/variable';\n\nexport class FlexibleLocalChangesEx extends Solver {\n\n\tstatic #setPlusSet<T>(s1: Set<T>, s2: Set<T>) {\n\t\tconst sn = new Set(s1);\n\t\tfor (const v of s2) sn.add(v);\n\t\treturn sn;\n\t}\n\n\tstatic #setMinusSet<T>(s1: Set<T>, s2: Set<T>) {\n\t\tconst sn = new Set(s1);\n\t\tfor (const v of s2) sn.delete(v);\n\t\treturn sn;\n\t}\n\n\tstatic #setPlusElement<T>(s: Set<T>, e: T) {\n\t\tconst sn = new Set(s);\n\t\tsn.add(e);\n\t\treturn sn;\n\t}\n\n\t#lt: number = 0;\n\t#lb: number = 0;\n\n\t#iterCount: number = 0;\n\t#endTime: number = 0;\n\t#globalReturn: number = 0;\n\n\tconstructor(p: Problem) {\n\t\tsuper(p);\n\t\tthis.#computeHighestAndLowestConsistencyDegree();\n\t}\n\n\tname() {\n\t\treturn 'Flexible Local Changes Ex';\n\t}\n\n\t#choose(x2: Set<Variable>, cr: Set<Constraint>): Set<Variable> {\n\t\tconst res = new Map();\n\n\t\tfor (const c of cr) {\n\t\t\tif (!c.isDefined()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfor (const v of c) {\n\t\t\t\tif (!res.has(v)) {\n\t\t\t\t\tres.set(v, 1);\n\t\t\t\t} else {\n\t\t\t\t\tres.set(v, res.get(v) + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst vs = [...x2];\n\t\tvs.sort((o1, o2) => {\n\t\t\tlet res1 = 0;\n\t\t\tlet res2 = 0;\n\t\t\tif (res.has(o1)) res1 = res.get(o1);\n\t\t\tif (res.has(o2)) res2 = res.get(o2);\n\n\t\t\tif (res1 < res2) return 1;\n\t\t\tif (res1 > res2) return -1;\n\t\t\treturn 0;\n\t\t});\n\n\t\tconst ret = new Set<Variable>();\n\n\t\tfor (const v of vs) {\n\t\t\tlet remain = false;\n\t\t\tfor (const c of cr) {\n\t\t\t\tif (c.isDefined()) {\n\t\t\t\t\tremain = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!remain) break;\n\t\t\tv.clear();\n\t\t\tret.add(v);\n\t\t}\n\t\treturn ret;\n\t}\n\n\t#computeHighestAndLowestConsistencyDegree() {\n\t\tlet low  = 1;\n\t\tlet high = 0;\n\n\t\tfor (const v of this._pro.variables()) {\n\t\t\tfor (const c of v) {\n\t\t\t\tconst l = c.lowestConsistencyDegree();\n\t\t\t\tconst h = c.highestConsistencyDegree();\n\t\t\t\tif (l < low)  low  = l;\n\t\t\t\tif (h > high) high = h;\n\t\t\t}\n\t\t}\n\t\tthis.#lb = low;\n\t\tthis.#lt = high;\n\t}\n\n\t#flcRepair(X1: Set<Variable>, X2: Set<Variable>, xi: Variable, consX1xi: number, consX12: number, cr: Set<Constraint>, rc: number): number {\n\t\tconst X3p = this.#choose(X2, cr);\n\t\tconst X1p = FlexibleLocalChangesEx.#setPlusElement(X1, xi);\n\t\tconst X2p = FlexibleLocalChangesEx.#setMinusSet(X2, X3p);\n\t\treturn this.#flcVariables(X1p, X2p, X3p, consX1xi, Math.min(consX12, consX1xi), rc);\n\t}\n\n\t#flcVariable(X1: Set<Variable>, X2: Set<Variable>, xi: Variable, consX1: number, consX12: number, rc: number): number {\n\t\tlet bestCons = this.#lb;\n\t\tif (xi.domain().size() === 0) {\n\t\t\treturn bestCons;\n\t\t}\n\t\tlet bestX2  = AssignmentList.fromVariables(X2);\n\t\tlet bestDij = xi.domain().at(0);\n\n\t\tconst x2Store = AssignmentList.fromVariables(X2);\n\n\t\tfor (let j = 0; j < xi.domain().size() && bestCons < consX12; ++j) {\n\t\t\tconst dij = xi.domain().at(j);\n\t\t\txi.assign(dij);\n\t\t\tconst consX1_xi = Math.min(consX1, this.#testX1(X1, xi, bestCons, rc));\n\n\t\t\tif (consX1_xi > Math.max(bestCons, rc)) {\n\t\t\t\tconst crNew = new Set<Constraint>();\n\t\t\t\tconst consX12_xi = Math.min(Math.min(consX1_xi, consX12), this.#testX12(X1, X2, xi, consX1_xi, consX12, crNew));\n\n\t\t\t\tif (consX12_xi > bestCons) {\n\t\t\t\t\tbestCons = consX12_xi;\n\t\t\t\t\tbestDij  = dij;\n\t\t\t\t\tbestX2   = AssignmentList.fromVariables(X2);\n\t\t\t\t}\n\t\t\t\tif (crNew.size) {\n\t\t\t\t\tconst repairCons = this.#flcRepair(X1, X2, xi, consX1_xi, consX12, crNew, Math.max(rc, bestCons));\n\t\t\t\t\tif (this.#globalReturn !== -1) {\n\t\t\t\t\t\treturn bestCons;\n\t\t\t\t\t}\n\t\t\t\t\tif (repairCons > bestCons) {\n\t\t\t\t\t\tbestCons = repairCons;\n\t\t\t\t\t\tbestDij  = dij;\n\t\t\t\t\t\tbestX2   = AssignmentList.fromVariables(X2);\n\t\t\t\t\t}\n\t\t\t\t\tx2Store.apply();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tbestX2.apply();\n\t\txi.assign(bestDij);\n\t\treturn bestCons;\n\t}\n\n\t#flcVariables(X1: Set<Variable>, X2: Set<Variable>, X3: Set<Variable>, consX1: number, consX12: number, rc: number): number {\n\t\tX2 = new Set<Variable>(X2);  // Clone\n\t\tX3 = new Set<Variable>(X3);  // Clone\n\n\t\twhile (true) {\n\t\t\tthis._debugOutput(`X1 ${X1.size}, X2' ${X2.size}, X3' ${X3.size}`);\n\n\t\t\tif (this._targetDeg !== null && this._targetDeg <= this._pro.worstSatisfactionDegree()) {  // Success if the degree improves from specified\n\t\t\t\tthis._debugOutput('stop: current degree is above the target');\n\t\t\t\tthis.#globalReturn = 1;\n\t\t\t\treturn consX12;\n\t\t\t}\n\t\t\tif (this._iterLimit && this._iterLimit < this.#iterCount++) {  // Failure if repeated a specified number\n\t\t\t\tthis._debugOutput('stop: number of iterations has reached the limit');\n\t\t\t\tthis.#globalReturn = 0;\n\t\t\t\treturn consX12;\n\t\t\t}\n\t\t\tif (this.#endTime < Date.now()) {  // Failure if time limit is exceeded\n\t\t\t\tthis._debugOutput('stop: time limit has been reached');\n\t\t\t\tthis.#globalReturn = 0;\n\t\t\t\treturn consX12;\n\t\t\t}\n\t\t\tif (X3.size === 0) {\n\t\t\t\treturn consX12;\n\t\t\t}\n\t\t\tconst xi        = X3.values().next().value as Variable;\n\t\t\tconst consX12xi = this.#flcVariable(X1, X2, xi, consX1, consX12, rc);\n\n\t\t\tif (this.#globalReturn !== -1) {\n\t\t\t\treturn consX12;\n\t\t\t}\n\t\t\tif (consX12xi < rc) {\n\t\t\t\treturn this.#lb;\n\t\t\t}\n\t\t\tX2.add(xi);\n\t\t\tX3.delete(xi);\n\t\t\tconsX12 = consX12xi;\n\t\t}\n\t}\n\n\t#initTest(X: Set<Variable>, cr: Set<Constraint>): number {\n\t\tconst cs = new Set<Constraint>();\n\t\tfor (const v of X) {\n\t\t\tfor (const c of v) {\n\t\t\t\tcs.add(c);  // All variables in X have been assigned.\n\t\t\t}\n\t\t}\n\t\tlet ret = 1;\n\t\tfor (const c of cs) {\n\t\t\tconst sd = c.satisfactionDegree();\n\t\t\tif (sd === Constraint.UNDEFINED) continue;\n\t\t\tif (sd < ret) ret = sd;\n\t\t}\n\t\tfor (const c of this._pro.constraints()) {\n\t\t\tconst cd = c.lowestConsistencyDegree();\n\t\t\tif (cd < this.#lt) cr.add(c);\n\t\t}\n\t\treturn ret;\n\t}\n\n\t#testX1(X1: Set<Variable>, xi: Variable, bestCons: number, rc: number): number {\n\t\tlet cd = 1;\n\t\tconst cs = new Set<Constraint>();\n\n\t\tfor (const v of X1) {\n\t\t\tconst temp = this._pro.constraintsBetween(v, xi);\n\t\t\tfor (const c of temp) cs.add(c);\n\t\t}\n\t\tfor (const c of cs) {\n\t\t\tconst d = c.satisfactionDegree();\n\t\t\tif (d === Constraint.UNDEFINED) continue;\n\t\t\tif (d < cd) cd = d;\n\t\t\tif (cd <= bestCons || cd <= rc) return cd;  // If it is determined that a better solution than the current solution cannot be obtained\n\t\t}\n\t\treturn cd;\n\t}\n\n\t#testX12(X1: Set<Variable>, X2: Set<Variable>, xi: Variable, consX1xi: number, consX12: number, cr: Set<Constraint>) {\n\t\tlet csd = 1;\n\t\tconst cs = new Set<Constraint>();\n\n\t\tfor (const v of X1) {\n\t\t\tconst temp = this._pro.constraintsBetween(v, xi);\n\t\t\tfor (const c of temp) cs.add(c);\n\t\t}\n\t\tfor (const v of X2) {\n\t\t\tconst temp = this._pro.constraintsBetween(v, xi);\n\t\t\tfor (const c of temp) cs.add(c);\n\t\t}\n\t\tfor (const c of cs) {\n\t\t\tconst sd = c.satisfactionDegree();\n\t\t\tif (sd === Constraint.UNDEFINED) continue;\n\t\t\tif (sd < csd) csd = sd;\n\t\t}\n\t\tfor (const c of cs) {\n\t\t\tconst sd = c.satisfactionDegree();\n\t\t\tif (sd === Constraint.UNDEFINED) continue;\n\t\t\tif (sd < consX1xi || sd < consX12) cr.add(c);\n\t\t}\n\t\treturn csd;\n\t}\n\n\texec(): boolean {\n\t\tthis.#endTime      = (this._timeLimit === null) ? Number.MAX_VALUE : (Date.now() + this._timeLimit);\n\t\tthis.#iterCount    = 0;\n\t\tthis.#globalReturn = -1;\n\n\t\tconst wsd = this._pro.worstSatisfactionDegree();\n\t\tif (this._pro.emptyVariableSize() === 0) {\n\t\t\tthis._pro.clearAllVariables();\n\t\t}\n\t\tconst X1 = new Set<Variable>();\n\t\tconst X2 = new Set<Variable>();  // Currently assigned variables.\n\t\tconst X3 = new Set<Variable>();  // Currently unassigned variables.\n\t\tfor (const v of this._pro.variables()) {\n\t\t\t(!v.isEmpty() ? X2 : X3).add(v);\n\t\t}\n\n\t\tconst cr       = new Set<Constraint>();\n\t\tconst initCons = this.#initTest(X2, cr);\n\t\tlet rc;\n\t\tlet initSol: AssignmentList|null = null;\n\n\t\tif (X3.size === 0) {\n\t\t\trc      = initCons;\n\t\t\tinitSol = AssignmentList.fromVariables(X2);\n\t\t} else {\n\t\t\trc = this.#lb;\n\t\t}\n\t\tconst X3p = FlexibleLocalChangesEx.#setPlusSet(this.#choose(X2, cr), X3);\n\t\tconst X2p = FlexibleLocalChangesEx.#setMinusSet(X2, X3p);\n\t\tlet result = this.#flcVariables(X1, X2p, X3p, this.#lt, this.#lt, rc);\n\t\tif (result < rc) {\n\t\t\tif (initSol !== null) {\n\t\t\t\tinitSol.apply();\n\t\t\t}\n\t\t}\n\t\tresult = this._pro.worstSatisfactionDegree();\n\t\treturn result > wsd && result > 0 && (this.#globalReturn !== 0 || this._targetDeg === null);\n\t}\n\n}\n", "/**\n * Class implements a solver using the breakout method for fuzzy CSP.\n *\n * @author Takuto Yanagida\n * @version 2023-04-16\n */\n\nimport { AssignmentList } from '../../util/assignment-list';\nimport { Solver } from '../solver';\nimport { Problem } from '../../problem/problem';\nimport { Variable } from '../../problem/variable';\nimport { Constraint } from '../../problem/constraint';\n\nexport class FuzzyBreakout extends Solver {\n\n\t#weights: number[];\n\t#lastSolDeg: number = 0;\n\n\t#isRandom: boolean = true;\n\n\tconstructor(p: Problem) {\n\t\tsuper(p);\n\t\tthis.#weights = new Array(this._pro.constraintSize());\n\t\tthis.#weights.fill(1);\n\t}\n\n\tname(): string {\n\t\treturn 'Fuzzy Breakout';\n\t}\n\n\t#findCandidates(worstVars: Iterable<Variable>, canList: AssignmentList) {\n\t\tlet maxDiff = 0;\n\n\t\tfor (const v of worstVars) {\n\t\t\tconst v_val = v.value();  // Save the value\n\n\t\t\tlet nowVio = 0;\n\t\t\tfor (const c of v) {\n\t\t\t\tnowVio += (1 - c.satisfactionDegree()) * this.#weights[c.index()];\n\t\t\t}\n\t\t\tout: for (const d of v.domain()) {\n\t\t\t\tif (v_val === d) continue;\n\t\t\t\tv.assign(d);\n\t\t\t\tlet diff = nowVio;\n\t\t\t\tfor (const c of v) {\n\t\t\t\t\tdiff -= (1 - c.satisfactionDegree()) * this.#weights[c.index()];\n\t\t\t\t\t// If the improvement is less than the previous improvement, try the next variable.\n\t\t\t\t\tif (diff < maxDiff) {\n\t\t\t\t\t\tcontinue out;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (diff > maxDiff) {  // Found assignments that are better than ever before.\n\t\t\t\t\tmaxDiff = diff;\n\t\t\t\t\tcanList.clear();\n\t\t\t\t\tcanList.addVariable(v, d);\n\t\t\t\t} else if (maxDiff !== 0) {  // Found assignments that can be improved to the same level as before.\n\t\t\t\t\tcanList.addVariable(v, d);\n\t\t\t\t}\n\t\t\t}\n\t\t\tv.assign(v_val);  // Restore the value.\n\t\t}\n\t}\n\n\t#listWorstVariables(worstCons: Iterable<Constraint>): Iterable<Variable> {\n\t\tconst wvs = new Set<Variable>();\n\t\tfor (const c of worstCons) {\n\t\t\tfor (const v of c) wvs.add(v);\n\t\t}\n\t\treturn Array.from(wvs);\n\t}\n\n\texec() {\n\t\tconst endTime = (this._timeLimit === null) ? Number.MAX_VALUE : (Date.now() + this._timeLimit);\n\t\tlet iterCount = 0;\n\n\t\tfor (const v of this._pro.variables()) {\n\t\t\tif (v.isEmpty()) v.assign(v.domain().at(0));\n\t\t}\n\n\t\tconst deg     = this._pro.worstSatisfactionDegree();\n\t\tconst canList = new AssignmentList();\n\n\t\tconst sol = new AssignmentList();\n\n\t\twhile (true) {\n\t\t\tconst [vc, wsd] = this._pro.constraintsWithWorstSatisfactionDegree();\n\t\t\tif (this._targetDeg !== null && this._targetDeg <= wsd) {  // Success if the degree improves from specified\n\t\t\t\tthis._debugOutput('stop: current degree is above the target');\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (this._iterLimit && this._iterLimit < iterCount++) {  // Failure if repeated a specified number\n\t\t\t\tthis._debugOutput('stop: number of iterations has reached the limit');\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (endTime < Date.now()) {  // Failure if time limit is exceeded\n\t\t\t\tthis._debugOutput('stop: time limit has been reached');\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tthis._debugOutput('worst satisfaction degree: ' + wsd);\n\n\t\t\tif (this.#lastSolDeg < wsd) {\n\t\t\t\tsol.setProblem(this._pro);\n\t\t\t\tthis.#lastSolDeg = wsd;\n\t\t\t\tif (this.foundSolution(sol, this.#lastSolDeg)) {  // Call hook\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.#findCandidates(this.#listWorstVariables(vc), canList);\n\n\t\t\tif (0 < canList.size()) {\n\t\t\t\tconst e = this.#isRandom ? canList.random() : canList.at(0);\n\t\t\t\te.apply();\n\t\t\t\tcanList.clear();\n\t\t\t\tthis._debugOutput('\\t' + e);\n\t\t\t} else {\n\t\t\t\tfor (const c of vc) {\n\t\t\t\t\tthis.#weights[c.index()] += 1;\n\t\t\t\t}\n\t\t\t\tthis._debugOutput('breakout');\n\t\t\t}\n\t\t}\n\t\tif (this._targetDeg === null && deg < this._pro.worstSatisfactionDegree()) return true;\n\t\treturn false;\n\t}\n\n\t/**\n\t * Sets the randomness of the algorithm.\n\t * Enabling randomness reduces the risk of local solutions, but makes the solution unrepeatable.\n\t * @param flag Whether the randomness is enabled.\n\t */\n\tsetRandomness(flag: boolean): void {\n\t\tthis.#isRandom = flag;\n\t}\n\n}\n", "/**\n * This class implements fuzzy GENET.\n * CSPs and FCSPs (but only Binary (F)CSPs) is supported.\n *\n * @author Takuto Yanagida\n * @version 2023-04-17\n */\n\nimport { AssignmentList } from '../../util/assignment-list';\nimport { Solver } from '../solver';\nimport { Problem } from '../../problem/problem';\nimport { Variable } from '../../problem/variable';\nimport { Constraint } from '../../problem/constraint';\n\nexport class FuzzyGENET extends Solver {\n\n\tstatic nextInt(max: number): number {\n\t\treturn Math.floor(Math.random() * Math.floor(max));\n\t}\n\n\t#clusters: Cluster[] = [];\n\t#connections: Connection[] = [];\n\t#worstSatisfactionDegree: number;\n\n\tconstructor(p: Problem, worstSatisfactionDegree: number = 1) {\n\t\tsuper(p);\n\t\tthis.#worstSatisfactionDegree = worstSatisfactionDegree;\n\t}\n\n\tname(): string {\n\t\treturn 'Fuzzy GENET';\n\t}\n\n\t#createNetwork(worstDeg: number): boolean {\n\t\tthis._debugOutput('network creation start');\n\t\tconst cons: Connection[] = [];\n\n\t\tfor (const v of this._pro.variables()) {\n\t\t\tif (v.domain().size() === 0) return false;\n\t\t\tthis.#clusters.push(new Cluster(v));\n\t\t}\n\t\tfor (const c of this._pro.constraints()) {\n\t\t\tif (c.size() === 1) {  // In the case of unary constraints.\n\t\t\t\tconst v  = c.at(0);\n\t\t\t\tconst cl = this.#clusters[c.at(0).index()];\n\n\t\t\t\tfor (let i = 0; i < cl.size(); ++i) {\n\t\t\t\t\tconst origVal = v.value();  // Save the value.\n\t\t\t\t\tv.assign(cl.get(i)._value);\n\n\t\t\t\t\tif (c.satisfactionDegree() <= worstDeg) {\n\t\t\t\t\t\tcons.push(new Connection(c, cl.get(i)));\n\t\t\t\t\t}\n\t\t\t\t\tv.assign(origVal);  // Restore the value.\n\t\t\t\t}\n\t\t\t} else {  // In the case of binary constraints.\n\t\t\t\tconst v1   = c.at(0);\n\t\t\t\tconst v2   = c.at(1);\n\t\t\t\tconst cl_f = this.#clusters[c.at(0).index()];\n\t\t\t\tconst cl_s = this.#clusters[c.at(1).index()];\n\n\t\t\t\tfor (let i = 0; i < cl_f.size(); ++i) {\n\t\t\t\t\tconst origVal1 = v1.value();  // Save the value.\n\t\t\t\t\tv1.assign(cl_f.get(i)._value);\n\n\t\t\t\t\tfor (let j = 0; j < cl_s.size(); ++j) {\n\t\t\t\t\t\tconst origVal2 = v2.value();  // Save the value.\n\t\t\t\t\t\tv2.assign(cl_s.get(j)._value);\n\n\t\t\t\t\t\tif (c.satisfactionDegree() <= worstDeg) {\n\t\t\t\t\t\t\tcons.push(new Connection(c, cl_f.get(i), cl_s.get(j)));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tv2.assign(origVal2);  // Restore the value.\n\t\t\t\t\t}\n\t\t\t\t\tv1.assign(origVal1);  // Restore the value.\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (const cl of this.#clusters) {\n\t\t\tfor (const n of cl._neurons) n.lockConnections();\n\t\t}\n\t\tthis.#connections = cons;\n\t\tthis._debugOutput('network creation complete');\n\t\treturn true;\n\t}\n\n\t#shuffle(is: number[]): number[] {\n\t\tfor (let i = is.length; i > 1; --i) {\n\t\t\tconst j    = FuzzyGENET.nextInt(i);\n\t\t\tconst temp = is[i - 1];\n\t\t\tis[i - 1] = is[j];\n\t\t\tis[j]     = temp;\n\t\t}\n\t\treturn is;\n\t}\n\n\texec(): boolean {\n\t\tif (!this.#createNetwork(this.#worstSatisfactionDegree)) {\n\t\t\tthrow new Error();\n\t\t}\n\t\tconst endTime = (this._timeLimit === null) ? Number.MAX_VALUE : (Date.now() + this._timeLimit);\n\t\tlet iterCount = 0;\n\n\t\tconst sol   = new AssignmentList();\n\t\tconst order: number[] = [];\n\t\tfor (let i = 0; i < this.#clusters.length; ++i) {\n\t\t\torder.push(i);\n\t\t}\n\n\t\tlet cur     = this._pro.worstSatisfactionDegree();\n\t\tlet success = false;\n\n\t\twhile (true) {\n\t\t\tif (this._iterLimit && this._iterLimit < iterCount++) {  // Failure if repeated a specified number\n\t\t\t\tthis._debugOutput('stop: number of iterations has reached the limit');\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (endTime < Date.now()) {  // Failure if time limit is exceeded\n\t\t\t\tthis._debugOutput('stop: time limit has been reached');\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tlet modified = false;\n\t\t\tfor (const i of this.#shuffle(order)) {\n\t\t\t\tif (this.#clusters[i].setActivityMaximumInput()) {\n\t\t\t\t\tmodified = true;  // Turn on the node with the largest input in each cluster\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!modified) {  // When the local minimum solution is reached.\n\t\t\t\tfor (const con of this.#connections) {\n\t\t\t\t\tcon.refreshWeight();  // Update weights for all connections\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t} else {\n\t\t\t\tfor (const clu of this.#clusters) {\n\t\t\t\t\tclu.applyToVariable();  // Apply to variable\n\t\t\t\t}\n\t\t\t\tconst d = this._pro.worstSatisfactionDegree();\n\t\t\t\tif (cur < d) {  // If it's a better assignment than ever, save it.\n\t\t\t\t\tcur = d;\n\t\t\t\t\tthis._debugOutput(`worst satisfaction degree: ${d}`);\n\t\t\t\t\tsol.setProblem(this._pro);\n\t\t\t\t\tif (this.foundSolution(sol, d)) {  // Call hook\n\t\t\t\t\t\tsuccess = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (this._targetDeg === null) {  // Satisfaction degree is not specified.\n\t\t\t\t\t\tsuccess = true;\n\t\t\t\t\t} else if (this._targetDeg <= cur) {  // Satisfaction degree is specified.\n\t\t\t\t\t\tthis._debugOutput('stop: current degree is above the target');\n\t\t\t\t\t\tsuccess = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tsol.apply();\n\t\treturn success;\n\t}\n\n}\n\nclass Cluster {\n\n\tstatic nextInt(max: number): number {\n\t\treturn Math.floor(Math.random() * Math.floor(max));\n\t}\n\n\t#v: Variable;  // For avoiding a bug(?) of parcel.\n\t#index: number = 0;\n\t#maxNeurons: number[] = [];\n\t_neurons: Neuron[]    = [];\n\n\tconstructor(v: Variable) {\n\t\tthis.#v = v;\n\n\t\tfor (const val of v.domain()) {\n\t\t\tthis._neurons.push(new Neuron(val));\n\t\t}\n\t\tthis.#setActivity(Cluster.nextInt(this._neurons.length));\n\t}\n\n\t#setActivity(index: number): void {\n\t\tfor (const n of this._neurons) {\n\t\t\tn._isActive = false;\n\t\t}\n\t\tthis._neurons[index]._isActive = true;\n\t\tthis.#index = index;\n\t}\n\n\tapplyToVariable(): void {\n\t\tthis.#v.assign(this._neurons[this.#index]._value);\n\t}\n\n\tget(index: number): Neuron {\n\t\treturn this._neurons[index];\n\t}\n\n\tneurons(): Neuron[] {\n\t\treturn this._neurons;\n\t}\n\n\t// Turn on the node with the largest input.\n\tsetActivityMaximumInput(): boolean {\n\t\tthis.#maxNeurons.length = 0;\n\n\t\tlet max       = Number.NEGATIVE_INFINITY;\n\t\tlet alreadyOn = false;\n\n\t\tfor (let i = 0; i < this._neurons.length; ++i) {\n\t\t\tconst input = this._neurons[i].getInput();\n\n\t\t\tif (max <= input) {\n\t\t\t\tif (max < input) {\n\t\t\t\t\tmax = input;\n\t\t\t\t\tthis.#maxNeurons.length = 0;\n\t\t\t\t\talreadyOn = false;\n\t\t\t\t}\n\t\t\t\tthis.#maxNeurons.push(i);\n\t\t\t\tif (this.#index === i) {\n\t\t\t\t\talreadyOn = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (alreadyOn || this.#maxNeurons.length === 0) {\n\t\t\treturn false;\n\t\t}\n\t\tthis.#setActivity(this.#maxNeurons[Cluster.nextInt(this.#maxNeurons.length)]);\n\t\treturn true;\n\t}\n\n\tsize(): number {\n\t\treturn this._neurons.length;\n\t}\n\n}\n\nclass Connection {\n\n\t#c: Constraint;\n\t#first: Neuron;\n\t#second: Neuron|null;\n\t_weight: number;  // Direct reference (read) allowed.\n\n\t// Order of neurons must be the same as the order of variables that the constraint has.\n\tconstructor(c: Constraint, first: Neuron, second: Neuron|null = null) {\n\t\tthis._weight = c.satisfactionDegree() - 1;\n\t\tthis.#c      = c;\n\n\t\tthis.#first = first;\n\t\tthis.#first.addConnection(this);\n\t\tthis.#second = second;\n\t\tif (this.#second !== null) {\n\t\t\tthis.#second.addConnection(this);\n\t\t}\n\t}\n\n\tgetNeuron(self: Neuron): Neuron|null {\n\t\tif (self === this.#first)  return this.#second;\n\t\tif (self === this.#second) return this.#first;\n\t\treturn null;\n\t}\n\n\trefreshWeight(): void {\n\t\tif (!this.#first._isActive || (this.#second !== null && !this.#second._isActive)) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.#c.size() === 1) {\n\t\t\tthis._weight += (this.#c.fuzzyRelation().satisfactionDegree(this.#first._value) - 1);\n\t\t} else {\n\t\t\tthis._weight += (this.#c.fuzzyRelation().satisfactionDegree(this.#first._value, (this.#second as Neuron)._value) - 1);\n\t\t}\n\t}\n\n}\n\nclass Neuron {\n\n\t#conTemp: Connection[]|null = [];\n\t#connections: Connection[] = [];\n\t_value: number;  // Direct reference (read) allowed.\n\t_isActive: boolean = false;  // Direct reference (read, write) allowed.\n\n\tconstructor(value: number) {\n\t\tthis._value = value;\n\t}\n\n\taddConnection(c: Connection): void {\n\t\t(this.#conTemp as Connection[]).push(c);\n\t}\n\n\tlockConnections(): void {\n\t\tthis.#connections = [...this.#conTemp as Connection[]];\n\t\tthis.#conTemp     = null;  // No longer being used.\n\t}\n\n\tgetInput(): number {\n\t\tlet ret = 0;\n\t\tfor (const c of this.#connections) {\n\t\t\tconst n = c.getNeuron(this);  // If n is null, then the unary constraint.\n\t\t\tret += c._weight * ((n === null || n._isActive) ? 1 : 0);\n\t\t}\n\t\treturn ret;\n\t}\n\n}\n", "/**\n * This class implements the SRS algorithm.\n *\n * @author Takuto Yanagida\n * @version 2023-04-17\n */\n\nimport { Problem } from '../../problem/problem';\nimport { AssignmentList } from '../../util/assignment-list';\nimport { Constraint } from '../../problem/constraint';\nimport { Solver } from '../solver';\n\nexport class SRS3 extends Solver {\n\n\t// Threshold for adopting a candidate assignment at repair time (should be 0 if strictly following SRS 3)\n\tstatic REPAIR_THRESHOLD = 0;\n\n\t#closedList          = new Set<TreeNode>();\n\t#openList            = new Set<TreeNode>();  // LinkedHashSet is used in the original implementation.\n\t#nodes: TreeNode[]   = [];\n\t#neighborConstraints: (Constraint[]|null)[] = [];  // Cache\n\n\t#c_stars = new Set<TreeNode>();  // ArrayList is used in the original implementation.\n\n\t#iterCount: number = 0;\n\t#endTime: number = 0;\n\t#isRandom: boolean = true;\n\n\tconstructor(p: Problem) {\n\t\tsuper(p);\n\t\tfor (const c of this._pro.constraints()) {\n\t\t\tthis.#nodes.push(new TreeNode(c));\n\t\t\tthis.#neighborConstraints.push(null);\n\t\t}\n\t}\n\n\tname(): string {\n\t\treturn 'SRS 3';\n\t}\n\n\t#getNeighborConstraints(c: Constraint): Constraint[] {\n\t\tconst index = c.index();\n\n\t\tif (this.#neighborConstraints[index] === null) {\n\t\t\tthis.#neighborConstraints[index] = c.neighbors();\n\t\t}\n\t\treturn this.#neighborConstraints[index];\n\t}\n\n\t#repair(c0: Constraint): boolean {\n\t\tthis._debugOutput('repair');\n\n\t\tconst canList = new AssignmentList();\n\t\tconst minDeg0 = c0.satisfactionDegree();  // Target c0 should certainly be an improvement over this.\n\t\tconst min     = this._pro.worstSatisfactionDegree();  // Lower bound of neighborhood constraints.\n\t\tlet maxDeg0   = c0.satisfactionDegree();  // Satisfaction degree of target c0 for the most improvement so far.\n\n\t\t// If a candidate satisfying the condition is stronger than the previous candidates,\n\t\t// it is replaced, and if no candidate is found until the end, it fails.\n\t\tfor (const v of c0) {\n\t\t\tconst v_val = v.value();  // Save the value\n\n\t\t\tout: for (const d of v.domain()) {\n\t\t\t\tif (v_val === d) continue;\n\t\t\t\tv.assign(d);\n\t\t\t\tconst deg0 = c0.satisfactionDegree();\n\t\t\t\t// If target c0 cannot be improved, the assignment is rejected.\n\t\t\t\tif (minDeg0 > deg0 || maxDeg0 - deg0 > SRS3.REPAIR_THRESHOLD) continue;\n\n\t\t\t\tfor (const c of v) {\n\t\t\t\t\tif (c === c0) continue;\n\t\t\t\t\tconst deg = c.satisfactionDegree();\n\t\t\t\t\t// If one of the neighborhood constraints c is less than or equal to the worst, the assignment is rejected.\n\t\t\t\t\tif (deg !== Constraint.UNDEFINED && deg < min) continue out;\n\t\t\t\t}\n\t\t\t\tif (deg0 > maxDeg0) {\n\t\t\t\t\tmaxDeg0 = deg0;\n\t\t\t\t\tcanList.clear();\n\t\t\t\t}\n\t\t\t\tcanList.addVariable(v, d);\n\t\t\t}\n\t\t\tv.assign(v_val);  // Restore the value\n\t\t}\n\t\tif (canList.size() > 0) {\n\t\t\tconst e = this.#isRandom ? canList.random() : canList.at(0);\n\t\t\te.apply();\n\t\t\tthis._debugOutput('\\t' + e);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t#shrink(node: TreeNode): void {\n\t\tthis._debugOutput('shrink');\n\n\t\tlet removeCStar = false;\n\t\twhile (true) {\n\t\t\tnode = node.parent() as TreeNode;\n\t\t\tif (this.#c_stars.delete(node)) {\n\t\t\t\tremoveCStar = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (!this.#repair((node.parent() as TreeNode).getObject())) break;\n\t\t}\n\t\tconst temp: TreeNode[] = [];\n\t\tnode.getDescendants(temp);  // temp contains node.\n\n\t\tfor (const n of temp) {\n\t\t\tn.clear();  // Prepare for reuse\n\t\t\tthis.#openList.delete(n);\n\t\t\tthis.#closedList.delete(n);\n\t\t}\n\n\t\tif (!removeCStar) {\n\t\t\tthis.#openList.add(node);\n\t\t}\n\t}\n\n\t#spread(node: TreeNode): void {\n\t\tthis._debugOutput('spread');\n\t\tthis.#closedList.add(node);\n\n\t\tfor (const c of this.#getNeighborConstraints(node.getObject())) {\n\t\t\tconst cn = this.#nodes[c.index()];\n\n\t\t\tif (!this.#closedList.has(cn) && !this.#openList.has(cn)) {  // For constraints that are not included in Open or Closed.\n\t\t\t\tnode.add(cn);\n\t\t\t\tthis.#openList.add(cn);\n\t\t\t}\n\t\t}\n\t}\n\n\t#srs(): boolean {\n\t\tthis._debugOutput('srs');\n\n\t\tconst [wsd_cs,] = this._pro.constraintsWithWorstSatisfactionDegree();\n\t\tfor (const c of wsd_cs) {\n\t\t\tconst cn = this.#nodes[c.index()];\n\t\t\tcn.setParent(null);\n\t\t\tthis.#c_stars.add(cn);\n\t\t}\n\t\tthis.#closedList.clear();\n\t\tthis.#openList.clear();\n\t\tfor (const n of this.#c_stars) {\n\t\t\tthis.#openList.add(n);\n\t\t}\n\n\t\twhile (this.#c_stars.size && this.#openList.size) {\n\t\t\tif (this._iterLimit && this._iterLimit < this.#iterCount++) {  // Failure if repeated a specified number\n\t\t\t\tthis._debugOutput('stop: number of iterations has reached the limit');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (this.#endTime < Date.now()) {  // Failure if time limit is exceeded\n\t\t\t\tthis._debugOutput('stop: time limit has been reached');\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst node = this.#openList.values().next().value as TreeNode;\n\t\t\tthis.#openList.delete(node);\n\n\t\t\tif (this.#repair(node.getObject())) {\n\t\t\t\tif (this.#c_stars.delete(node)) continue;  // If the repaired node is included in C* (to be deleted)\n\t\t\t\tif (this.#repair((node.parent() as TreeNode).getObject())) {\n\t\t\t\t\tthis.#shrink(node);  // When its improvement leads to the improvement of its parents\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.#spread(node);\n\t\t}\n\t\treturn true;\n\t}\n\n\texec(): boolean {\n\t\tthis.#endTime   = (this._timeLimit === null) ? Number.MAX_VALUE : (Date.now() + this._timeLimit);\n\t\tthis.#iterCount = 0;\n\t\tif (this._targetDeg && this._targetDeg <= this._pro.worstSatisfactionDegree()) {\n\t\t\treturn true;\n\t\t}\n\t\tconst sol = new AssignmentList();\n\n\t\tlet success = false;\n\t\twhile (true) {\n\t\t\tconst ret = this.#srs();\n\t\t\tif (!ret || this.#c_stars.size) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tconst solutionWorstDeg = this._pro.worstSatisfactionDegree();\n\t\t\tthis._debugOutput(`\\tfound a solution: ${solutionWorstDeg}\\t${this._targetDeg}`);\n\t\t\tsol.setProblem(this._pro);\n\n\t\t\tif (this.foundSolution(sol, solutionWorstDeg)) {  // Call hook\n\t\t\t\tsuccess = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (this._targetDeg === null) {  // Satisfaction degree is not specified\n\t\t\t\tsuccess = true;\n\t\t\t} else if (this._targetDeg <= solutionWorstDeg) {  // The current degree exceeded the specified degree.\n\t\t\t\tthis._debugOutput('stop: current degree is above the target');\n\t\t\t\tsuccess = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn success;\n\t}\n\n\t/**\n\t * Sets the randomness of the algorithm.\n\t * Enabling randomness reduces the risk of falling into a local solution, but makes the solution unrepeatable.\n\t * @param flag If true, randomness is enabled.\n\t */\n\tsetRandomness(flag: boolean): void {\n\t\tthis.#isRandom = flag;\n\t}\n\n}\n\nclass TreeNode {\n\n\t#children: TreeNode[] = [];\n\t#parent: TreeNode|null;\n\t#obj: any;\n\n\tconstructor(obj: any) {\n\t\tthis.#parent = null;\n\t\tthis.#obj = obj;\n\t}\n\n\tadd(tn: TreeNode): void {\n\t\ttn.#parent = this;\n\t\tthis.#children.push(tn);\n\t}\n\n\tclear(): void {\n\t\tfor (const tn of this.#children) {\n\t\t\ttn.#parent = null;\n\t\t}\n\t\tthis.#children.length = 0;\n\t}\n\n\tgetDescendants(tns: TreeNode[]): void {\n\t\ttns.push(this);\n\n\t\tfor (const tn of this.#children) {\n\t\t\ttn.getDescendants(tns);\n\t\t}\n\t}\n\n\tgetObject(): any {\n\t\treturn this.#obj;\n\t}\n\n\tparent(): TreeNode | null {\n\t\treturn this.#parent;\n\t}\n\n\tsetParent(p: TreeNode|null) {\n\t\tthis.#parent = p;\n\t}\n\n}\n", "/**\n * Class of post-stabilization.\n *\n * @author Takuto Yanagida\n * @version 2023-04-16\n */\n\nimport { Problem } from '../../problem/problem';\nimport { AssignmentList } from '../../util/assignment-list';\n\nexport class PostStabilization {\n\n\tstatic apply(p: Problem, orig: AssignmentList): boolean {\n\t\tconsole.log('start post-stabilization');\n\n\t\tlet stabilized: boolean;\n\t\tlet count: number = 0;\n\n\t\tdo {\n\t\t\tconsole.log('post-stabilization: count ' + count++);\n\n\t\t\tstabilized = false;\n\t\t\tlet C_min = p.worstSatisfactionDegree();\n\n\t\t\tconst vars = p.variables();\n\t\t\tfor (let i = 0; i < vars.length; ++i) {\n\t\t\t\tconst v   = vars[i];\n\t\t\t\tconst org = v.value();\n\n\t\t\t\tconst a = orig.at(i);\n\t\t\t\tif (org === a.value()) continue;\n\n\t\t\t\ta.apply();  // Try to assign the original.\n\t\t\t\tif (p.worstSatisfactionDegree() >= C_min) {\n\t\t\t\t\tstabilized = true;\n\t\t\t\t} else {\n\t\t\t\t\tv.assign(org);  // Restore.\n\t\t\t\t}\n\t\t\t}\n\t\t} while (stabilized);\n\n\t\tconsole.log('finish post-stabilization');\n\t\treturn true;\n\t}\n\n}\n", "/**\n * This class implements the SRS algorithm with PF.\n *\n * @author Takuto Yanagida\n * @version 2023-04-16\n */\n\nimport { Problem } from '../../problem/problem';\nimport { AssignmentList } from '../../util/assignment-list';\nimport { PostStabilization } from '../filter/post-stabilization';\nimport { SRS3 } from './srs3';\n\nexport class SRS3_PF extends SRS3 {\n\n\tconstructor(p: Problem) {\n\t\tsuper(p);\n\t}\n\n\tname(): string {\n\t\treturn 'SRS 3 + PF';\n\t}\n\n\texec(): boolean {\n\t\tlet deg = 0;\n\t\tlet uvs = 0;\n\t\tif (this._debug) {\n\t\t\tdeg = this._pro.worstSatisfactionDegree();\n\t\t\tuvs = this._pro.emptyVariableSize();\n\t\t}\n\t\tconst al = new AssignmentList();\n\t\tal.setProblem(this._pro);\n\n\t\tconst res = super.exec();\n\n\t\tif (res) {\n\t\t\tPostStabilization.apply(this._pro, al);\n\t\t}\n\t\tthis._debugOutput(`result: ${res ? 'success' : 'failure'}`);\n\t\tthis._debugOutput(`satisfaction degree: ${deg} -> ${this._pro.worstSatisfactionDegree()}`);\n\t\tthis._debugOutput(`unassigned size: ${uvs} -> ${this._pro.emptyVariableSize()}`);\n\t\treturn res;\n\t}\n\n}\n", "/**\n * Solver factory class.\n *\n * @author Takuto Yanagida\n * @version 2023-04-17\n */\n\nimport { Solver } from './solver';\nimport { Problem } from '../problem/problem';\n\nimport { ForwardChecking } from './crisp/forward-checking';\nimport { MaxForwardChecking } from './crisp/max-forward-checking';\nimport { LocalChanges } from './crisp/local-changes';\nimport { LocalChangesEx } from './crisp/local-changes-ex';\nimport { Breakout } from './crisp/breakout';\nimport { GENET } from './crisp/genet';\nimport { CrispSRS3 } from './crisp/crisp-srs3';\nimport { FuzzyForwardChecking } from './fuzzy/fuzzy-forward-checking';\nimport { FuzzyForwardCheckingBc } from './fuzzy/fuzzy-forward-checking-bc';\nimport { FlexibleLocalChanges } from './fuzzy/flexible-local-changes';\nimport { FlexibleLocalChangesEx } from './fuzzy/flexible-local-changes-ex';\nimport { FuzzyBreakout } from './fuzzy/fuzzy-breakout';\nimport { FuzzyGENET } from './fuzzy/fuzzy-genet';\nimport { SRS3 } from './fuzzy/srs3';\nimport { SRS3_PF } from './fuzzy/srs3-pf';\n\nexport class SolverFactory {\n\n\tstatic crispSolverNames(): string[] {\n\t\treturn [\n\t\t\t/* 0 */ 'Forward Checking',\n\t\t\t/* 1 */ 'Max Forward Checking',\n\t\t\t/* 2 */ 'Local Changes',\n\t\t\t/* 3 */ 'Local Changes Ex',\n\t\t\t/* 4 */ 'Breakout',\n\t\t\t/* 5 */ 'GENET',\n\t\t\t/* 6 */ 'Crisp SRS 3',\n\t\t];\n\t}\n\n\tstatic fuzzySolverNames(): string[] {\n\t\treturn [\n\t\t\t/* 0 */ 'Fuzzy Forward Checking',\n\t\t\t/* 1 */ 'Fuzzy Forward Checking Bc',\n\t\t\t/* 2 */ 'Flexible Local Changes',\n\t\t\t/* 3 */ 'Flexible Local Changes Ex',\n\t\t\t/* 4 */ 'Fuzzy Breakout',\n\t\t\t/* 5 */ 'Fuzzy GENET',\n\t\t\t/* 6 */ 'SRS 3',\n\t\t\t/* 7 */ 'SRS 3 PF',\n\t\t];\n\t}\n\n\tstatic async createSolver(type: string, p: Problem): Promise<Solver | null> {\n\t\tconst cs = await SolverFactory.createCrispSolver(type, p);\n\t\tif (cs) return cs;\n\t\tconst fs = await SolverFactory.createFuzzySolver(type, p);\n\t\tif (fs) return fs;\n\t\treturn null;\n\t}\n\n\tstatic async createCrispSolver(type: string, p: Problem): Promise<Solver | null> {\n\t\tswitch (type.replaceAll(' ', '')) {\n\t\t\tcase 'ForwardChecking':\n\t\t\tcase 'forward-checking':\n\t\t\t\treturn new ForwardChecking(p);\n\t\t\tcase 'MaxForwardChecking':\n\t\t\tcase 'max-forward-checking':\n\t\t\t\treturn new MaxForwardChecking(p);\n\t\t\tcase 'LocalChanges':\n\t\t\tcase 'local-changes':\n\t\t\t\treturn new LocalChanges(p);\n\t\t\tcase 'LocalChangesEx':\n\t\t\tcase 'local-changes-ex':\n\t\t\t\treturn new LocalChangesEx(p);\n\t\t\tcase 'Breakout':\n\t\t\tcase 'breakout':\n\t\t\t\treturn new Breakout(p);\n\t\t\tcase 'GENET':\n\t\t\tcase 'genet':\n\t\t\t\treturn new GENET(p);\n\t\t\tcase 'CrispSRS3':\n\t\t\tcase 'crisp-srs3':\n\t\t\t\treturn new CrispSRS3(p);\n\t\t}\n\t\treturn null;\n\t}\n\n\tstatic async createFuzzySolver(type: string, p: Problem): Promise<Solver | null> {\n\t\tswitch (type.replaceAll(' ', '')) {\n\t\t\tcase 'FuzzyForwardChecking':\n\t\t\tcase 'fuzzy-forward-checking':\n\t\t\t\treturn new FuzzyForwardChecking(p);\n\t\t\tcase 'FuzzyForwardCheckingBc':\n\t\t\tcase 'fuzzy-forward-checking-bc':\n\t\t\t\treturn new FuzzyForwardCheckingBc(p);\n\t\t\tcase 'FlexibleLocalChanges':\n\t\t\tcase 'flexible-local-changes':\n\t\t\t\treturn new FlexibleLocalChanges(p);\n\t\t\tcase 'FlexibleLocalChangesEx':\n\t\t\tcase 'flexible-local-changes-ex':\n\t\t\t\treturn new FlexibleLocalChangesEx(p);\n\t\t\tcase 'FuzzyBreakout':\n\t\t\tcase 'fuzzy-breakout':\n\t\t\t\treturn new FuzzyBreakout(p);\n\t\t\tcase 'FuzzyGENET':\n\t\t\tcase 'fuzzy-genet':\n\t\t\t\treturn new FuzzyGENET(p);\n\t\t\tcase 'SRS3':\n\t\t\tcase 'srs3':\n\t\t\t\treturn new SRS3(p);\n\t\t\tcase 'SRS3PF':\n\t\t\tcase 'SRS3_PF':\n\t\t\tcase 'srs3-pf':\n\t\t\t\treturn new SRS3_PF(p);\n\t\t}\n\t\treturn null;\n\t}\n\n}\n", "/**\n * The class implements AC-3, one of the arc consistency algorithms.\n *\n * @author Takuto Yanagida\n * @version 2023-04-10\n */\n\nimport { Problem } from '../../problem/problem';\nimport { Variable } from '../../problem/variable';\nimport { Constraint } from '../../problem/constraint';\nimport { Domain } from '../../problem/domain';\n\nexport class AC3 {\n\n\tstatic #checkConsistency(c: Constraint, v_j: Variable): boolean {\n\t\tfor (const val of v_j.domain()) {  // Is there a partner that satisfies the constraint?\n\t\t\tv_j.assign(val);\n\n\t\t\tif (c.isSatisfied() === 1) {  // It exists!\n\t\t\t\treturn true;  // Current assignment of v_i is consistent.\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tstatic #reviseDomain(p: Problem, v_i: Variable, v_j: Variable): boolean {\n\t\tconst val_i = v_i.value();\n\t\tconst val_j = v_j.value();  // Save the value.\n\t\tconst d_i   = v_i.domain();\n\t\tconst temp: number[] = [];\n\n\t\tconst cs = p.constraintsBetween(v_i, v_j);\n\n\t\tvals: for (const val of d_i) {\n\t\t\tv_i.assign(val);\n\n\t\t\tfor (const c of cs) {\n\t\t\t\tif (c.size() !== 2) continue;  // Check the next constraint\n\t\t\t\tif (!AC3.#checkConsistency(c, v_j)) continue vals;   // Since there is no partner satisfying the constraint, check the next value.\n\t\t\t}\n\t\t\ttemp.push(val);\n\t\t}\n\t\tv_i.assign(val_i);  // Restore the value.\n\t\tv_j.assign(val_j);  // Restore the value.\n\n\t\tif (temp.length !== d_i.size()) {\n\t\t\tconst nd = p.createDomain({ values: temp }) as Domain;\n\t\t\tv_i.setDomain(nd);\n\t\t\tconsole.log(d_i.size() + ' -> ' + nd.size());\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tstatic apply(p: Problem): void {\n\t\tconst cs: Constraint[] = [];\n\n\t\tfor (const c of p.constraints()) {\n\t\t\tif (c.size() === 2) cs.push(c);\n\t\t}\n\t\twhile (cs.length) {\n\t\t\tconst c   = cs.pop() as Constraint;\n\t\t\tconst v_k = c.at(0);\n\t\t\tconst v_m = c.at(1);\n\n\t\t\tif (AC3.#reviseDomain(p, v_k, v_m)) {\n\t\t\t\tfor (const c1 of p.constraints()) {\n\t\t\t\t\tif (c1.size() === 2 && c1.at(1) === v_k && c1.at(0) !== v_m) {\n\t\t\t\t\t\tcs.unshift(c1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n}\n", "/**\n * Utility class that performs node consistency.\n *\n * @author Takuto Yanagida\n * @version 2023-04-11\n */\n\nimport { Problem } from '../../problem/problem';\nimport { CrispProblem } from '../../problem/problem-crisp';\nimport { Domain } from '../../problem/domain';\n\nexport class NodeConsistency {\n\n\t/**\n\t * Guarantees consistency of fuzzy unary constraints. The domain of each variable is replaced as needed.\n\t * Deletes elements from domains that do not meet the specified worst satisfaction degree.\n\t * @param p A problem.\n\t * @param threshold Worst satisfaction degree.\n\t * @return True if there is no empty domain.\n\t */\n\tstatic applyToProblem(p: Problem, threshold: number): boolean {\n\t\tfor (const v of p.variables()) {\n\t\t\tconst d       = v.domain();\n\t\t\tconst origVal = v.value();  // Save the value.\n\t\t\tconst elms: number[]    = [];\n\n\t\t\tfor (const c of v) {\n\t\t\t\tif (c.size() !== 1) continue;\n\n\t\t\t\tfor (const val of d) {\n\t\t\t\t\tv.assign(val);\n\n\t\t\t\t\tif (c.satisfactionDegree() >= threshold) {\n\t\t\t\t\t\telms.push(val);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tp.removeConstraint(c);\n\t\t\t}\n\t\t\tv.assign(origVal);  // Restore the value.\n\t\t\tif (elms.length === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tv.setDomain(p.createDomain({ values: elms }) as Domain);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Guarantees consistency of crisp unary constraints. The domain of each variable is replaced as needed.\n\t * It cannot be applied to crisp views of fuzzy constraint satisfaction problems because it changes the structure of the constraint graph.\n\t * @param p A crisp problem.\n\t * @return True if there is no empty domain.\n\t */\n\tstatic applyToCrispProblem(p: CrispProblem) {\n\t\tfor (const v of p.variables()) {\n\t\t\tconst d       = v.domain();\n\t\t\tconst origVal = v.value();  // Save the value.\n\t\t\tconst elms: number[]    = [];\n\n\t\t\tfor (const c of v) {\n\t\t\t\tif (c.size() !== 1) continue;\n\n\t\t\t\tfor (const val of d) {\n\t\t\t\t\tv.assign(val);\n\n\t\t\t\t\tif (c.isSatisfied() === 1) {\n\t\t\t\t\t\telms.push(val);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tp.removeConstraint(c);\n\t\t\t}\n\t\t\tv.assign(origVal);  // Restore the value.\n\t\t\tif (elms.length === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tv.setDomain(p.createDomain({ values: elms }) as Domain);\n\t\t}\n\t\treturn true;\n\t}\n\n}\n", "/**\n * Utility class for constraint satisfaction problems.\n *\n * @author Takuto Yanagida\n * @version 2023-04-18\n */\n\nimport { Problem } from '../problem/problem';\nimport { CrispProblem } from '../problem/problem-crisp';\nimport { Variable } from '../problem/variable';\nimport { Domain } from '../problem/domain';\nimport { Relation } from '../problem/relation';\nimport { CrispRelation } from '../problem/relation-crisp';\nimport { FuzzyRelation } from '../problem/relation-fuzzy';\n\nexport class Problems {\n\n\tstatic #averagePathLength(p: Problem, v: Variable, length: number[], baseLength: number, vo: Set<Variable>): void {\n\t\tconst vn: Variable[] = [];\n\n\t\tfor (const c of v) {\n\t\t\tfor (const vi of c) {\n\t\t\t\tif (length[vi.index()] === Number.MAX_VALUE) {\n\t\t\t\t\tvn.push(vi);\n\t\t\t\t\tlength[vi.index()] = baseLength + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (const vi of vn) vo.add(vi);\n\t\tfor (const vi of vn) {\n\t\t\tProblems.#averagePathLength(p, vi, length, baseLength + 1, vo);\n\t\t}\n\t}\n\n\t/**\n\t * Calculates the average path length for a given variable.\n\t * @param p A problem.\n\t * @param v A variable of the problem.\n\t * @return Average path length.\n\t */\n\tstatic averagePathLength(p: Problem, v: Variable) {\n\t\tconst ls = new Array(p.variableSize());\n\t\tls.fill(Number.MAX_VALUE);\n\n\t\tconst vs = new Set<Variable>();\n\t\tvs.add(v);\n\n\t\tls[v.index()] = 0;\n\t\tProblems.#averagePathLength(p, v, ls, 0, vs);\n\n\t\tlet connectedSize = 0;\n\t\tlet sum = 0;\n\n\t\tfor (let i = 0; i < ls.length; ++i) {\n\t\t\tif (ls[i] !== Number.MAX_VALUE && i !== v.index()) {\n\t\t\t\t++connectedSize;\n\t\t\t\tsum += ls[i];\n\t\t\t}\n\t\t}\n\t\tif (connectedSize === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn sum / connectedSize;\n\t}\n\n\t/**\n\t * Calculates the average path length.\n\t * @param p A problem.\n\t * @return Average path length.\n\t */\n\tstatic averagePathLengths(p: Problem) {\n\t\tconst ls = new Array(p.variableSize());\n\n\t\tfor (const v of p.variables()) {\n\t\t\tls[v.index()] = Problems.averagePathLength(p, v);\n\t\t}\n\t\treturn ls;\n\t}\n\n\t/**\n\t * Gets an array containing all domains.\n\t * @param p A problem.\n\t * @return Array of domains.\n\t */\n\tstatic domains(p: Problem): Domain[] {\n\t\tconst ds: Domain[] = [];\n\n\t\tfor (const v of p.variables()) {\n\t\t\tds.push(v.domain());\n\t\t}\n\t\treturn ds;\n\t}\n\n\t/**\n\t * Returns the array of possible satisfaction degree values for all unary constraints.\n\t * @param p A problem.\n\t * @param degrees Array of degree values.\n\t * @return The array.\n\t */\n\tstatic possibleSatisfactionDegreesOfUnaryConstraints(p: Problem, degrees: number[]): number[] {\n\t\tfor (const c of p.constraints()) {\n\t\t\tif (c.size() !== 1) continue;\n\t\t\tconst v: Variable = c.at(0);\n\t\t\tconst origVal: number = v.value();  // Save the value.\n\n\t\t\tfor (const val of v.domain()) {\n\t\t\t\tv.assign(val);\n\t\t\t\tdegrees.push(c.satisfactionDegree());\n\t\t\t}\n\t\t\tv.assign(origVal);  // Restore the value.\n\t\t}\n\t\treturn degrees;\n\t}\n\n\t/**\n\t * Set up all domains.\n\t * @param p A problem.\n\t * @param ds Array of domains.\n\t */\n\tstatic setDomains(p: Problem, ds: Domain[]): void {\n\t\tfor (let i: number = 0; i < ds.length; ++i) {\n\t\t\tp.variableAt(i).setDomain(ds[i]);\n\t\t}\n\t}\n\n\t/**\n\t * Returns a view of the fuzzy constraint satisfaction problem as a crisp constraint satisfaction problem.\n\t * The relations and domains of the specified fuzzy constraint satisfaction problem are reused, but the other elements are newly generated.\n\t * Note: Assignments to variables and changes to domains of the view are reflected in the variables of the original problem.\n\t * @param p A fuzzy constraint satisfaction problem.\n\t * @param threshold The threshold of constraint satisfaction degree. A constraint is considered satisfied when the constraint satisfaction degree is greater than or equal to this value.\n\t * @return A crisp constraint satisfaction problem.\n\t */\n\tstatic toViewAsCrispProblem(p: Problem, threshold: number): CrispFuzzyProblem {\n\t\tconst cp = new CrispFuzzyProblem();\n\n\t\tfor (const v of p.variables()) {\n\t\t\tcp.createVariable({ variable: v });\n\t\t}\n\t\tfor (const c of p.constraints()) {\n\t\t\tconst vs: Variable[] = [];\n\n\t\t\tfor (const v of c) {\n\t\t\t\tvs.push(cp.variableAt(v.index()));\n\t\t\t}\n\t\t\tlet r: Relation;\n\t\t\tif (c.isFuzzy()) {\n\t\t\t\tr = new CrispFuzzyRelation(c.fuzzyRelation(), threshold);\n\t\t\t} else {\n\t\t\t\tr = c.crispRelation();\n\t\t\t}\n\t\t\tcp.createConstraint({ relation: r, variables: vs });\n\t\t}\n\t\treturn cp;\n\t}\n\n}\n\nclass CrispFuzzyProblem extends CrispProblem {\n\n\tcreateVariable(args: { variable: Variable; }): Variable {\n\t\tconst iv = new ImaginaryVariable(args.variable);\n\t\tthis.addVariable(iv);\n\t\treturn iv;\n\t}\n\n}\n\nclass CrispFuzzyRelation implements CrispRelation {\n\n\t#th: number;\n\t#fr: FuzzyRelation;\n\n\tconstructor(fr: FuzzyRelation, th: number) {\n\t\tthis.#fr = fr;\n\t\tthis.#th = th;\n\t}\n\n\tisSatisfied(...vs: number[]): 0 | 1 {\n\t\treturn this.#fr.satisfactionDegree(...vs) >= this.#th ? 1 : 0;\n\t}\n\n}\n\nclass ImaginaryVariable extends Variable {\n\n\t#orig: Variable;\n\n\tconstructor(v: Variable) {\n\t\tsuper(v.owner(), v.domain());\n\t\tthis.#orig = v;\n\t\tthis.setName(v.name());\n\t\tthis.assign(v.value());\n\t}\n\n\tassign(value: number): void {\n\t\tthis.#orig.assign(value);\n\t}\n\n\tdomain(): Domain {\n\t\treturn this.#orig.domain();\n\t}\n\n\tsetDomain(dom: Domain): void {\n\t\tthis.#orig.setDomain(dom);\n\t}\n\n\tvalue(): number {\n\t\treturn this.#orig.value();\n\t}\n\n}\n", "/**\n * This class detects that a solver's operation is looping.\n *\n * @author Takuto Yanagida\n * @version 2023-04-16\n */\n\nexport class LoopDetector {\n\n\t#indices: number[] = [];\n\t#values: number[] = [];\n\t#loopLength: number;\n\t#iterCount: number;\n\t#cur: number = 0;\n\n\tconstructor(loopLength: number = 30, iterCount: number = 3) {\n\t\tthis.#loopLength = loopLength;\n\t\tthis.#iterCount = iterCount;\n\t\tthis.#initArrays();\n\t}\n\n\t#assignToVariable(index: number, value: number): void {\n\t\tthis.#indices[this.#cur] = index;\n\t\tthis.#values[this.#cur] = value;\n\t\tif (--this.#cur === -1) {\n\t\t\tthis.#cur = this.#indices.length - 1;\n\t\t}\n\t}\n\n\t#checkLooping(): number {\n\t\tconst key = new Array(this.#loopLength);\n\t\tconst val = new Array(this.#loopLength);\n\t\tout: for (let length = 1; length <= this.#loopLength; ++length) {\n\t\t\tlet offset = this.#cur + 1;\n\t\t\tfor (let i = 0; i < length; ++i) {\n\t\t\t\tif (i + offset === this.#indices.length) {\n\t\t\t\t\toffset -= this.#indices.length;\n\t\t\t\t}\n\t\t\t\tkey[i] = this.#indices[i + offset];\n\t\t\t\tval[i] = this.#values[i + offset];\n\t\t\t}\n\t\t\tlet fi = length;\n\t\t\tfor (let i = 0; i < this.#iterCount - 1; ++i) {\n\t\t\t\toffset = this.#cur + 1;\n\t\t\t\tfor (let j = 0; j < length; ++j) {\n\t\t\t\t\tif (fi + j + offset >= this.#indices.length) {\n\t\t\t\t\t\toffset -= this.#indices.length;\n\t\t\t\t\t}\n\t\t\t\t\tif (this.#indices[fi + j + offset] !== key[j] || this.#values[fi + j + offset] !== val[j]) {\n\t\t\t\t\t\tcontinue out;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfi += length;\n\t\t\t}\n\t\t\treturn length;\n\t\t}\n\t\treturn 0;\n\t}\n\n\t#initArrays(): void {\n\t\tthis.#indices = new Array(this.#loopLength * this.#iterCount);\n\t\tthis.#values = new Array(this.#loopLength * this.#iterCount);\n\t\tthis.#indices.fill(-1);\n\t\tthis.#values.fill(-1);\n\t\tthis.#cur = this.#indices.length - 1;\n\t}\n\n\tcheckLoop(variableIndex: number, value: number): number {\n\t\tthis.#assignToVariable(variableIndex, value);\n\t\treturn this.#checkLooping();\n\t}\n\n\tclear(): void {\n\t\tthis.#indices.fill(-1);\n\t\tthis.#values.fill(-1);\n\t}\n\n\titerationCount(): number {\n\t\treturn this.#iterCount;\n\t}\n\n\tloopLength(): number {\n\t\treturn this.#loopLength;\n\t}\n\n\tvalues(): number[] {\n\t\treturn this.#values.slice();\n\t}\n\n\tvariableIndices(): number[] {\n\t\treturn this.#indices.slice();\n\t}\n\n}\n"],
  "mappings": "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",
  "names": ["Element", "#index", "#name", "index", "name", "Variable", "_Variable", "Element", "#INVALID", "#owner", "#dom", "#val", "#cons", "owner", "d", "c", "n", "value", "index", "vs", "v", "Domain", "DomainRanged", "Domain", "#min", "#max", "min", "max", "val", "index", "DomainArbitrary", "Domain", "#vals", "vals", "val", "index", "Constraint", "_Constraint", "Element", "r", "s", "Constraint1", "Constraint", "#vars", "r", "v", "index", "cs", "c", "sd", "cd", "val", "Constraint2", "Constraint", "#vars", "r", "v1", "v2", "index", "v", "sum", "cs", "c", "sd", "cd", "val1", "val2", "d1", "d2", "s", "Constraint3", "Constraint", "#vars", "r", "v1", "v2", "v3", "index", "v", "sum", "cs", "c", "sd", "cd", "val1", "val2", "val3", "d1", "d2", "d3", "s", "ConstraintN", "Constraint", "#vars", "#vals", "r", "vs", "index", "v", "sum", "i", "cs", "c", "sd", "emptyIndices", "currentStep", "cd", "d", "val", "s", "Problem", "#fv", "o", "d", "Variable", "#fc", "r", "vs", "Constraint1", "Constraint2", "Constraint3", "ConstraintN", "fn", "v", "args", "DomainArbitrary", "DomainRanged", "c", "index", "i", "comparator", "name", "v1", "v2", "cs", "cur", "s", "Constraint", "ave", "num", "CrispProblem", "Problem", "args", "count", "c", "cs", "ObservableVariable", "Variable", "#observer", "owner", "d", "observer", "value", "FuzzyTabledRelation", "#elms", "#doms", "#mul", "elms", "doms", "m", "i", "vals", "index", "FuzzyRelationFunction", "#fn", "fn", "vals", "CrispTabledRelation", "#elms", "#doms", "#mul", "elms", "doms", "m", "i", "vals", "index", "CrispRelationFunction", "#fn", "fn", "vals", "CrispRelationView", "#that", "that", "vals", "FuzzyRelationView", "Solver", "#debugOutput", "e", "#listener", "pro", "count", "msec", "rate", "l", "solution", "worstDegree", "finish", "flag", "fn", "str", "Assignment", "#variable", "#value", "args", "AssignmentList", "_AssignmentList", "vs", "al", "#as", "problem", "v", "Assignment", "a", "variable", "value", "diff", "index", "DomainPruner", "_DomainPruner", "#UNHIDDEN", "#hiddenLevels", "#hiddenSize", "size", "index", "level", "i", "ForwardChecking", "Solver", "#vars", "#sol", "AssignmentList", "#relCons", "#useMRV", "#iterCount", "#endTime", "p", "v", "DomainPruner", "#initializeRelatedConstraintTable", "j", "i", "#getConstraintsBetween", "#checkForward", "level", "currentIndex", "v_i", "d_i", "dc_i", "cs", "c", "k", "n", "#indexOfVariableWithMRV", "index", "size", "s", "#branch", "vc_index", "vc", "d", "dc", "r", "a", "flag", "MaxForwardChecking", "Solver", "#vars", "#sol", "AssignmentList", "#maxVioCount", "#vioCount", "#checkedCons", "#cons", "#iterCount", "#endTime", "p", "v", "DomainPruner", "#branch", "level", "vioCount", "vcs", "vc", "dom", "dc", "i", "#getAdditionalViolationCount", "#checkForward", "future", "c", "#revise", "avc", "v1", "deleted", "r", "a", "LocalChanges", "_LocalChanges", "Solver", "#setPlusSet", "s1", "s2", "sn", "v", "#setMinusSet", "#setPlusElement", "s", "#setMinusElement", "#iterCount", "#endTime", "#globalReturn", "p", "unassignAll", "#createNewV3", "V1_V2", "val", "newV3", "cs", "va", "temp", "c", "origVal", "vi", "#isConsistent", "A", "#lcValue", "V1", "V2", "V3", "T", "vv", "#lcVariables", "#lcVariable", "d", "al", "AssignmentList", "ret", "notFixed", "unassigned", "LocalChangesEx", "_LocalChangesEx", "Solver", "#setPlusSet", "s1", "s2", "sn", "v", "#setMinusSet", "#setPlusElement", "s", "#iterCount", "#endTime", "#globalReturn", "p", "unassignAll", "#createNewV3", "V1_V2", "val", "newV3", "cs", "va", "temp", "c", "origVal", "vi", "#isConsistent", "A", "#lcValue", "V1", "V2", "V3", "#lcVariables", "#lcVariable", "AssignmentList", "ret", "notFixed", "unassigned", "Breakout", "Solver", "#weights", "#isRandom", "p", "#findCandidates", "vioVars", "canList", "maxDiff", "v", "v_val", "nowVio", "c", "out", "d", "diff", "#listViolatingVariables", "vioCons", "vvs", "endTime", "iterCount", "AssignmentList", "vc", "e", "flag", "GENET", "_GENET", "Solver", "max", "#clusters", "#connections", "p", "#createNetwork", "cons", "v", "Cluster", "c", "cl", "i", "origVal", "Connection", "v1", "v2", "cl_f", "cl_s", "origVal1", "j", "origVal2", "n", "#shuffle", "is", "temp", "endTime", "iterCount", "sol", "AssignmentList", "order", "cur", "success", "modified", "clu", "d", "con", "_Cluster", "#v", "#index", "#maxNeurons", "val", "Neuron", "#setActivity", "index", "alreadyOn", "input", "#first", "#second", "first", "second", "self", "#conTemp", "value", "ret", "CrispSRS3", "Solver", "#closedList", "#openList", "#nodes", "#neighborConstraints", "#isRandom", "p", "c", "TreeNode", "#getNeighborConstraints", "index", "#repair", "c0", "canList", "AssignmentList", "maxDiff", "v", "v_val", "nowVio", "out", "d", "diff", "n", "e", "#shrink", "node", "c_stars", "temp", "cur", "#spread", "tnc", "#srs", "endTime", "iterCount", "vcs", "flag", "#children", "#parent", "#obj", "obj", "tn", "tns", "FuzzyForwardChecking", "_FuzzyForwardChecking", "Solver", "#vars", "#sol", "AssignmentList", "#relCons", "#solWorstDeg", "#iterCount", "#endTime", "#useMRV", "#degInc", "#sequence", "#unaryCons", "#checkedCons", "#pruneIntensively", "p", "worstSatisfactionDegree", "#initializeRelatedConstraintTable", "temp", "c", "j", "i", "#getConstraintsBetween", "vi_index", "vj_index", "#pruneUnaryConstraints", "v", "orgVal", "d", "dc", "#checkForwardConsistency", "level", "vi", "di", "dci", "#checkForwardConsistency2", "vj", "dj", "dcj", "loop_i", "ni", "nj", "#checkForwardConsistency3", "vk", "dk", "dck", "k", "nk", "#checkForwardConsistencyN", "emptySize", "emp", "indexes", "n", "comLoop", "hidden", "#checkForward", "index", "v_i", "cs", "#checkBackwardConsistency", "vc", "s", "Constraint", "#refresh", "index_vi", "#indexOfVariableWithMRV", "size", "#branch", "bc", "vc_index", "nextLevel", "#branchLast", "deg", "DomainPruner", "success", "rate", "flag", "degree", "FuzzyForwardCheckingBc", "_FuzzyForwardCheckingBc", "Solver", "#vars", "#sol", "AssignmentList", "#relCons", "#solWorstDeg", "#iterCount", "#endTime", "#useMRV", "#degInc", "p", "worstSatisfactionDegree", "#initializeRelatedConstraintTable", "j", "i", "#getConstraintsBetween", "vi_index", "vj_index", "#checkForwardConsistency", "level", "vi", "c", "di", "dci", "#checkForward", "index", "v_i", "cs", "#indexOfVariableWithMRV", "size", "v", "s", "#branch", "bc", "vc_index", "vc", "d", "dc", "n", "nextLevel", "#branchLast", "deg", "DomainPruner", "sol", "success", "rate", "flag", "degree", "FlexibleLocalChanges", "_FlexibleLocalChanges", "Solver", "#setPlusSet", "s1", "s2", "sn", "v", "#setMinusSet", "#setPlusElement", "s", "#setMinusElement", "#lt", "#lb", "#iterCount", "#endTime", "#globalReturn", "p", "#computeHighestAndLowestConsistencyDegree", "#choose", "x2", "cr", "res", "c", "vs", "o1", "o2", "res1", "res2", "ret", "remain", "low", "high", "l", "h", "#flcRepair", "X1", "X2", "xi", "consX1xi", "consX12", "rc", "X3p", "X1p", "X2p", "#flcVariables", "#flcVariable", "consX1", "bestCons", "bestX2", "AssignmentList", "bestDij", "x2Store", "j", "dij", "consX1_xi", "#testX1", "crNew", "consX12_xi", "#testX12", "repairCons", "X3", "consX12xi", "#initTest", "X", "cs", "sd", "Constraint", "cd", "temp", "d", "csd", "wsd", "initCons", "initSol", "result", "FlexibleLocalChangesEx", "_FlexibleLocalChangesEx", "Solver", "#setPlusSet", "s1", "s2", "sn", "v", "#setMinusSet", "#setPlusElement", "s", "#lt", "#lb", "#iterCount", "#endTime", "#globalReturn", "p", "#computeHighestAndLowestConsistencyDegree", "#choose", "x2", "cr", "res", "c", "vs", "o1", "o2", "res1", "res2", "ret", "remain", "low", "high", "l", "h", "#flcRepair", "X1", "X2", "xi", "consX1xi", "consX12", "rc", "X3p", "X1p", "X2p", "#flcVariables", "#flcVariable", "consX1", "bestCons", "bestX2", "AssignmentList", "bestDij", "x2Store", "j", "dij", "consX1_xi", "#testX1", "crNew", "consX12_xi", "#testX12", "repairCons", "X3", "consX12xi", "#initTest", "X", "cs", "sd", "Constraint", "cd", "temp", "d", "csd", "wsd", "initCons", "initSol", "result", "FuzzyBreakout", "Solver", "#weights", "#lastSolDeg", "#isRandom", "p", "#findCandidates", "worstVars", "canList", "maxDiff", "v", "v_val", "nowVio", "c", "out", "d", "diff", "#listWorstVariables", "worstCons", "wvs", "endTime", "iterCount", "deg", "AssignmentList", "sol", "vc", "wsd", "e", "flag", "FuzzyGENET", "_FuzzyGENET", "Solver", "max", "#clusters", "#connections", "#worstSatisfactionDegree", "p", "worstSatisfactionDegree", "#createNetwork", "worstDeg", "cons", "v", "Cluster", "c", "cl", "i", "origVal", "Connection", "v1", "v2", "cl_f", "cl_s", "origVal1", "j", "origVal2", "n", "#shuffle", "is", "temp", "endTime", "iterCount", "sol", "AssignmentList", "order", "cur", "success", "modified", "clu", "d", "con", "_Cluster", "#v", "#index", "#maxNeurons", "val", "Neuron", "#setActivity", "index", "alreadyOn", "input", "#c", "#first", "#second", "first", "second", "self", "#conTemp", "value", "ret", "SRS3", "_SRS3", "Solver", "#closedList", "#openList", "#nodes", "#neighborConstraints", "#c_stars", "#iterCount", "#endTime", "#isRandom", "p", "c", "TreeNode", "#getNeighborConstraints", "index", "#repair", "c0", "canList", "AssignmentList", "minDeg0", "min", "maxDeg0", "v", "v_val", "out", "d", "deg0", "deg", "Constraint", "e", "#shrink", "node", "removeCStar", "temp", "n", "#spread", "cn", "#srs", "wsd_cs", "sol", "success", "solutionWorstDeg", "flag", "#children", "#parent", "#obj", "obj", "tn", "tns", "PostStabilization", "p", "orig", "stabilized", "count", "C_min", "vars", "i", "v", "org", "a", "SRS3_PF", "SRS3", "p", "deg", "uvs", "al", "AssignmentList", "res", "PostStabilization", "SolverFactory", "_SolverFactory", "type", "p", "cs", "fs", "ForwardChecking", "MaxForwardChecking", "LocalChanges", "LocalChangesEx", "Breakout", "GENET", "CrispSRS3", "FuzzyForwardChecking", "FuzzyForwardCheckingBc", "FlexibleLocalChanges", "FlexibleLocalChangesEx", "FuzzyBreakout", "FuzzyGENET", "SRS3", "SRS3_PF", "AC3", "_AC3", "#checkConsistency", "c", "v_j", "val", "#reviseDomain", "p", "v_i", "val_i", "val_j", "d_i", "temp", "cs", "vals", "nd", "v_k", "v_m", "c1", "NodeConsistency", "p", "threshold", "v", "d", "origVal", "elms", "c", "val", "Problems", "_Problems", "#averagePathLength", "p", "v", "length", "baseLength", "vo", "vn", "c", "vi", "ls", "vs", "connectedSize", "sum", "i", "ds", "degrees", "origVal", "val", "threshold", "cp", "CrispFuzzyProblem", "CrispFuzzyRelation", "CrispProblem", "args", "iv", "ImaginaryVariable", "#th", "#fr", "fr", "th", "Variable", "#orig", "value", "dom", "LoopDetector", "#indices", "#values", "#loopLength", "#iterCount", "#cur", "loopLength", "iterCount", "#initArrays", "#assignToVariable", "index", "value", "#checkLooping", "key", "val", "out", "length", "offset", "i", "fi", "j", "variableIndex"]
}
